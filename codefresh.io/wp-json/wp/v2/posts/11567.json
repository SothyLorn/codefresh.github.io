{"id":11567,"date":"2020-01-08T06:00:45","date_gmt":"2020-01-08T06:00:45","guid":{"rendered":"http:\/\/codefresh.io\/?p=11567"},"modified":"2020-01-09T14:53:08","modified_gmt":"2020-01-09T14:53:08","slug":"programmatic-creation-codefresh-pipelines-part2","status":"publish","type":"post","link":"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/","title":{"rendered":"Programmatic Creation of Codefresh Pipelines &#8211; Part 2"},"content":{"rendered":"<p>At Codefresh, we know that any CI\/CD solution must be attractive to both developers and operators (SREs). One of the major advantages of Codefresh is the graphical user interface that includes dashboards for Kubernetes and Helm deployments. These graphical dashboards are very useful to developers who are just getting started with deployments and pipelines.<\/p>\n<p>We realize, however, that SREs love automation and the capability to script everything without opening the GUI. To this end, Codefresh has the option to create pipelines in a completely automated manner. We have already seen one such approach in the <a href=\"http:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part1\/\">first part of this series<\/a> where pipeline specifications exist in a separate location in the filesystem outside of the folders that contain the source code.<\/p>\n<figure id=\"attachment_11570\" aria-describedby=\"caption-attachment-11570\" style=\"width: 697px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/old-approach.png\"><img class=\"size-full wp-image-11570\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/old-approach.png\" alt=\"External pipeline specifications\" width=\"697\" height=\"387\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/old-approach.png 697w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/old-approach-300x167.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/old-approach-591x328.png 591w\" sizes=\"(max-width: 697px) 100vw, 697px\" \/><\/a><figcaption id=\"caption-attachment-11570\" class=\"wp-caption-text\">External pipeline specifications<\/figcaption><\/figure>\n<p>In this blog post, we will see an alternative approach where the pipeline specification is in the same folder as the code it manages.<\/p>\n<h2>Creating Codefresh pipelines automatically after project creation<\/h2>\n<p>Imagine that you are working for the operations\/SRE team of a big company. Developers are constantly creating new projects and ideally, you would like their pipelines to be created in a completely automated manner. Even though you could use the Codefresh GUI to create any pipeline for a new project by hand, a smarter way would be to make Codefresh work for you and create pipelines on the spot for new projects.<\/p>\n<p>To accomplish this we will create a \u201cPipeline creator\u201d pipeline. This pipeline is creating pipelines according to their <a href=\"https:\/\/codefresh-io.github.io\/cli\/pipelines\/spec\/\">specification file<\/a>. Therefore, the sequence of events is the following:<\/p>\n<ol>\n<li>A developer commits a new project folder<\/li>\n<li>An SRE (or the same developer) also commits a specification file for a pipeline<\/li>\n<li>In a completely automated manner, Codefresh reads the pipeline specification and creates a pipeline responsible for the new project<\/li>\n<li>Anytime a developer commits a change to the project from now on, the project is automatically built with Codefresh<\/li>\n<\/ol>\n<p>In all of these steps, the Codefresh UI is NOT used. Even the \u201cpipeline creator\u201d pipeline is created outside of the GUI.<\/p>\n<p>The building blocks for our automation process are the same ones we used in the first part of the series.<\/p>\n<ol>\n<li>The integrated <a href=\"https:\/\/codefresh.io\/continuous-integration\/using-codefresh-with-mono-repos\/\">mono-repo support<\/a> in Codefresh<\/li>\n<li>The ability to define complete Codefresh pipelines (including triggers) in a <a href=\"https:\/\/codefresh-io.github.io\/cli\/pipelines\/spec\/\">pipeline specification file<\/a><\/li>\n<li>The ability to read pipeline specifications via the <a href=\"https:\/\/codefresh-io.github.io\/cli\/\">Codefresh CLI<\/a><\/li>\n<\/ol>\n<p>We have seen the details of these basic blocks in the <a href=\"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part1\/\">previous blog post<\/a>, so we are not going to describe them in detail here.<\/p>\n<h2>A Codefresh pipeline for creating pipelines<\/h2>\n<p>You can find all the code in the sample project at <a href=\"https:\/\/github.com\/kostis-codefresh\/dynamic-pipelines\">https:\/\/github.com\/kostis-codefresh\/dynamic-pipelines <\/a><\/p>\n<p>First, we will start with the most crucial part of the whole process. The pipeline creator. Here is the <a href=\"https:\/\/github.com\/kostis-codefresh\/dynamic-pipelines\/blob\/master\/pipeline-creator-spec.yml\">spec<\/a>.<\/p>\n<pre>\nversion: '1.0'\nkind: pipeline\nmetadata:\n  name: dynamic-pipelines\/pipeline-creator\n  description: \"Pipeline creator for pipeline-spec.yml files\"\n  deprecate: {}\n  project: dynamic-pipelines\nspec:\n  triggers:\n    - type: git\n      repo: kostis-codefresh\/dynamic-pipelines\n      events:\n        - push\n      branchRegex: \/.*\/gi\n      modifiedFilesGlob: '**\/pipeline-spec.yml'\n      provider: github\n      name: my-trigger\n      context: github-1\n  contexts: []\n  variables: []\n  steps:\n    main_clone:\n      title: 'Cloning main repository...'\n      type: git-clone\n      repo: '${{CF_REPO_OWNER}}\/${{CF_REPO_NAME}}'\n      revision: '${{CF_REVISION}}'\n      git: github-1    \n    pipelineCreator:\n      title: Setting up a new pipeline programatically\n      image: codefresh\/cli\n      commands:\n        - echo Creating a pipeline from $CF_BRANCH\/pipeline-spec.yml\n        - codefresh create pipeline -f $CF_BRANCH\/pipeline-spec.yml\n  stages: []\n\n\n\n<\/pre>\n<p>This specification file has two very important lines. The first one is the line:<\/p>\n<pre>modifiedFilesGlob: '**\/pipeline-spec.yml'<\/pre>\n<p>This line comes from the monorepo support and essentially instructs this pipeline to run only \u201cwhen a file named pipeline-spec.yml is changed in any folder\u201d. The name we chose is arbitrary as Codefresh pipeline specifications can be named with any name that makes sense to you. This line guarantees that the pipeline creator will only run when a pipeline specification is modified. We don\u2019t want to run the pipeline creator when a normal (i.e. code) commit happens in the repository.<\/p>\n<p>The second important line is the last one:<\/p>\n<pre>codefresh create pipeline -f $CF_BRANCH\/pipeline-spec.yml<\/pre>\n<p>Here we call the Codefresh CLI and create the pipeline that will actually compile the project. There are multiple ways to locate the file that contains the pipeline, but for illustration purposes, we make the convention that the branch name is also the name of the project.<\/p>\n<p>If for example a new project is created that is named my-project, the SRE can do the following:<\/p>\n<ol>\n<li>Create a branch from master named \u201cmy-project\u201d<\/li>\n<li>Add a directory called my-project<\/li>\n<li>Add a pipeline specification under my-project\/pipeline-spec.yml<\/li>\n<li>Commit and push everything<\/li>\n<\/ol>\n<p>Then the pipeline creator will read the spec and create the pipeline.<\/p>\n<h2>Setting up the pipeline creator<\/h2>\n<p>Now that we have the specification for the pipeline creator we are ready to activate it by calling the Codefresh CLI (i.e. using the same method of creating pipelines as the creator itself).<\/p>\n<pre>codefresh create pipeline -f pipeline-creator-spec.yml<\/pre>\n<p>The pipeline creator now exists in Codefresh and will be triggered for any builds that match the <a href=\"https:\/\/en.wikipedia.org\/wiki\/Glob_(programming)\">glob expression<\/a> we have seen in the previous part.<\/p>\n<p>You can visit the Codefresh UI to verify that everything is as expected.<\/p>\n<figure id=\"attachment_15034\" aria-describedby=\"caption-attachment-15034\" style=\"width: 1024px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/pipeline-creator-1.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/pipeline-creator-1-1024x490.png\" alt=\"Pipeline Creator\" width=\"1024\" height=\"490\" class=\"size-large wp-image-15034\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/pipeline-creator-1-1024x490.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/pipeline-creator-1-300x143.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/pipeline-creator-1-768x367.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/pipeline-creator-1-20x10.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/pipeline-creator-1.png 1127w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/a><figcaption id=\"caption-attachment-15034\" class=\"wp-caption-text\">Pipeline Creator<\/figcaption><\/figure>\n<p>Notice also the trigger that clearly shows that the pipeline creator will only run if a pipeline-spec file (in any directory) is among the modified files.<\/p>\n<h2>Adding a new project<\/h2>\n<p>Now that the pipeline creator is setup we are ready to add a project. To do this we will create a subfolder (e.g. my-go-app) and add the source code and the pipeline specification for that project. Here is an example:<\/p>\n<pre>\nversion: '1.0'\nkind: pipeline\nmetadata:\n  name: dynamic-pipelines\/my-go-app-pipeline\n  description: \"Docker creation for sample GO app\"\n  deprecate: {}\n  project: dynamic-pipelines\nspec:\n  triggers:\n    - type: git\n      repo: kostis-codefresh\/dynamic-pipelines\n      events:\n        - push\n      branchRegex: \/.*\/gi\n      modifiedFilesGlob: 'my-go-app\/**'\n      provider: github\n      name: my-trigger\n      context: github-1\n  contexts: []\n  variables:\n    - key: PORT\n      value: '8080'\n  steps:\n    main_clone:\n      title: 'Cloning main repository...'\n      type: git-clone\n      repo: '${{CF_REPO_OWNER}}\/${{CF_REPO_NAME}}'\n      revision: '${{CF_REVISION}}'\n      git: github-1\n    build_my_image:\n      title: Building Docker Image\n      type: build\n      image_name: my-monorepo-go-app\n      working_directory: .\/my-go-app\n      tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'\n      dockerfile: Dockerfile\n  stages: []\n<\/pre>\n<p>The pipeline itself is very simple. It only creates a Docker image (see the <code>build_my_image<\/code> step at the bottom of the file).<\/p>\n<p>The important point here is the trigger. This pipeline will run only if the files changes are under the folder &#8216;my-go-app\/**. This makes sure that this pipeline will only deal with that particular project and nothing else. Commits that run in other project folders will be ignored.<\/p>\n<p>We now reach the magic moment. To create the pipeline for this project an SRE\/developer only needs to:<\/p>\n<ol>\n<li>Create a branch named my-go-app<\/li>\n<li>Commit and push the code plus the specification<\/li>\n<\/ol>\n<p>That\u2019s it! No other special action is needed. The only interaction for developers\/operators to get a pipeline running is via the GIT repo. The pipeline creator described in the previous section will detect this commit and automagically create a specific pipeline for the Golang project. The person that made the commit does not even need a Codefresh account!<\/p>\n<figure id=\"attachment_15035\" aria-describedby=\"caption-attachment-15035\" style=\"width: 827px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/auto-creation-pipeline.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/auto-creation-pipeline.png\" alt=\"Pipeline created automatically\" width=\"827\" height=\"533\" class=\"size-full wp-image-15035\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/auto-creation-pipeline.png 827w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/auto-creation-pipeline-300x193.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/auto-creation-pipeline-768x495.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/auto-creation-pipeline-20x13.png 20w\" sizes=\"(max-width: 827px) 100vw, 827px\" \/><\/a><figcaption id=\"caption-attachment-15035\" class=\"wp-caption-text\">Pipeline created automatically<\/figcaption><\/figure>\n<p>Now any commit that happens inside the Go project, will trigger this pipeline (in our case it just creates a Docker image)<\/p>\n<p>With this approach, anybody can keep adding projects along with their pipelines. The example monorepo has 3 projects. Here is the file layout:<\/p>\n<figure id=\"attachment_11576\" aria-describedby=\"caption-attachment-11576\" style=\"width: 501px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/file-layout.png\"><img class=\"size-full wp-image-11576\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/file-layout.png\" alt=\"Monorepo layout\" width=\"501\" height=\"304\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/file-layout.png 501w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/file-layout-300x182.png 300w\" sizes=\"(max-width: 501px) 100vw, 501px\" \/><\/a><figcaption id=\"caption-attachment-11576\" class=\"wp-caption-text\">Monorepo layout<\/figcaption><\/figure>\n<p>And here is the view inside Codefresh:<\/p>\n<figure id=\"attachment_15036\" aria-describedby=\"caption-attachment-15036\" style=\"width: 984px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/three-pipelines-created.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/three-pipelines-created.png\" alt=\"All pipelines created automatically\" width=\"984\" height=\"641\" class=\"size-full wp-image-15036\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/three-pipelines-created.png 984w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/three-pipelines-created-300x195.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/three-pipelines-created-768x500.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/three-pipelines-created-20x13.png 20w\" sizes=\"(max-width: 984px) 100vw, 984px\" \/><\/a><figcaption id=\"caption-attachment-15036\" class=\"wp-caption-text\">All pipelines created automatically<\/figcaption><\/figure>\n<h2>Future improvements<\/h2>\n<p>In this second part of the series, we have seen how you can automatically create pipelines for multiple projects just by committing their pipeline specifications. In future posts, we will also explore the following approaches&#8230;<\/p>\n<p>For illustration purposes, we used the convention where the name of the project is also the name of the branch that contains the pipeline. This makes the pipeline creator simple to understand but is not always practical. A better approach would have been to have a script that looks at all the folders of the project and locates the spec that was changed. This would also make it possible to create more than one pipeline with a single commit.<\/p>\n<p>Also for illustration purposes, we assume that each project comes with its own pipeline spec. An alternative approach would be to have a simple codefresh.yml inside and then have the pipeline-creator convert it to a spec on the fly. This would make the creation of pipelines easier for developers that are familiar with Codefresh YAML but not the full spec. For bigger organizations, it would also be possible to have a templating mechanism for pipeline specifications that gathers a collection of global and \u201capproved\u201d pipelines and changes only the values specific to a project.<\/p>\n<p>Finally, the present article shows only what happens when a project is initially created and the pipeline appears in the Codefresh GUI for the first time. A smarter approach would be to also recreate existing pipelines, so that the operator can change several settings after the initial pipeline creation.<\/p>\n<p>New to Codefresh? <a href=\"https:\/\/codefresh.io\/codefresh-signup\/?utm_source=Blog&amp;utm_medium=Post&amp;utm_campaign=monorepoPipelinePart2\">Create Your Free Account Today<\/a>!<\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"11567\"\/>","protected":false},"excerpt":{"rendered":"<p>At Codefresh, we know that any CI\/CD solution must be attractive to both developers and operators (SREs). One of the major advantages of Codefresh is the graphical user interface that includes dashboards for Kubernetes and Helm deployments. These graphical dashboards are very useful to developers who are just getting started with deployments and pipelines. We &hellip; <a href=\"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/\">Read more<\/a><\/p>\n","protected":false},"author":62,"featured_media":11606,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[3120,1543,1538],"tags":[52,53,59,3323,3324],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Programmatic Creation of Codefresh Pipelines - Part 2 | Codefresh<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Programmatic Creation of Codefresh Pipelines - Part 2\" \/>\n<meta property=\"og:description\" content=\"At Codefresh, we know that any CI\/CD solution must be attractive to both developers and operators (SREs). One of the major advantages of Codefresh is the graphical user interface that includes dashboards for Kubernetes and Helm deployments. These graphical dashboards are very useful to developers who are just getting started with deployments and pipelines. We &hellip; Read more\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2020-01-08T06:00:45+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-01-09T14:53:08+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/Screen-Shot-2018-10-17-at-9.05.04-AM.png\" \/>\n\t<meta property=\"og:image:width\" content=\"1472\" \/>\n\t<meta property=\"og:image:height\" content=\"674\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@codefresh\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Kostis Kapelonis\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"8 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/Screen-Shot-2018-10-17-at-9.05.04-AM.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/Screen-Shot-2018-10-17-at-9.05.04-AM.png\",\"width\":1472,\"height\":674},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/#webpage\",\"url\":\"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/\",\"name\":\"Programmatic Creation of Codefresh Pipelines - Part 2 | Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/#primaryimage\"},\"datePublished\":\"2020-01-08T06:00:45+00:00\",\"dateModified\":\"2020-01-09T14:53:08+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Programmatic Creation of Codefresh Pipelines &#8211; Part 2\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87\"},\"headline\":\"Programmatic Creation of Codefresh Pipelines &#8211; Part 2\",\"datePublished\":\"2020-01-08T06:00:45+00:00\",\"dateModified\":\"2020-01-09T14:53:08+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/#webpage\"},\"wordCount\":1341,\"commentCount\":5,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/Screen-Shot-2018-10-17-at-9.05.04-AM.png\",\"keywords\":[\"devops\",\"CI\/CD\",\"codefresh\",\"automation\",\"operators\"],\"articleSection\":[\"Continuous Deployment\/Delivery\",\"Continuous Integration\",\"DevOps Tutorials\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87\",\"name\":\"Kostis Kapelonis\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png\",\"caption\":\"Kostis Kapelonis\"},\"description\":\"Kostis is a software engineer\/technical-writer dual class character. He lives and breathes automation, good testing practices and stress-free deployments with GitOps.\",\"url\":\"https:\/\/codefresh.io\/author\/kostiscodefresh-io\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Programmatic Creation of Codefresh Pipelines - Part 2 | Codefresh","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/","og_locale":"en_US","og_type":"article","og_title":"Programmatic Creation of Codefresh Pipelines - Part 2","og_description":"At Codefresh, we know that any CI\/CD solution must be attractive to both developers and operators (SREs). One of the major advantages of Codefresh is the graphical user interface that includes dashboards for Kubernetes and Helm deployments. These graphical dashboards are very useful to developers who are just getting started with deployments and pipelines. We &hellip; Read more","og_url":"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2020-01-08T06:00:45+00:00","article_modified_time":"2020-01-09T14:53:08+00:00","og_image":[{"width":1472,"height":674,"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/Screen-Shot-2018-10-17-at-9.05.04-AM.png","type":"image\/png"}],"twitter_card":"summary_large_image","twitter_creator":"@codefresh","twitter_site":"@codefresh","twitter_misc":{"Written by":"Kostis Kapelonis","Est. reading time":"8 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/Screen-Shot-2018-10-17-at-9.05.04-AM.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/Screen-Shot-2018-10-17-at-9.05.04-AM.png","width":1472,"height":674},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/#webpage","url":"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/","name":"Programmatic Creation of Codefresh Pipelines - Part 2 | Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/#primaryimage"},"datePublished":"2020-01-08T06:00:45+00:00","dateModified":"2020-01-09T14:53:08+00:00","breadcrumb":{"@id":"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Programmatic Creation of Codefresh Pipelines &#8211; Part 2"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87"},"headline":"Programmatic Creation of Codefresh Pipelines &#8211; Part 2","datePublished":"2020-01-08T06:00:45+00:00","dateModified":"2020-01-09T14:53:08+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/#webpage"},"wordCount":1341,"commentCount":5,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/10\/Screen-Shot-2018-10-17-at-9.05.04-AM.png","keywords":["devops","CI\/CD","codefresh","automation","operators"],"articleSection":["Continuous Deployment\/Delivery","Continuous Integration","DevOps Tutorials"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87","name":"Kostis Kapelonis","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png","caption":"Kostis Kapelonis"},"description":"Kostis is a software engineer\/technical-writer dual class character. He lives and breathes automation, good testing practices and stress-free deployments with GitOps.","url":"https:\/\/codefresh.io\/author\/kostiscodefresh-io\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/11567"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/62"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=11567"}],"version-history":[{"count":0,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/11567\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/11606"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=11567"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=11567"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=11567"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}