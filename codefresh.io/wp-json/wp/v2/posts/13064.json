{"id":13064,"date":"2019-04-15T20:03:26","date_gmt":"2019-04-15T20:03:26","guid":{"rendered":"http:\/\/codefresh.io\/?p=13064"},"modified":"2019-04-18T19:21:08","modified_gmt":"2019-04-18T19:21:08","slug":"parallel-pipelines","status":"publish","type":"post","link":"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/","title":{"rendered":"Use parallel steps in your Codefresh pipelines"},"content":{"rendered":"<p>This is it! The moment you have been waiting for\u2026 The number one requested feature from several Codefresh customers is now in production. You can finally run parallel steps within Codefresh pipelines.<\/p>\n<p>The reason this feature took so long to implement was that we wanted to offer the most flexible option possible. So after some lengthy internal testing, we are finally ready to present you not just one, but two different ways of running parallel pipeline steps:<\/p>\n<ol>\n<li>Injection of one or more parallel phases into a serial pipeline<\/li>\n<li>Full parallel mode &#8211; create your own pipeline graph<\/li>\n<\/ol>\n<p>Let\u2019s see these in order:<\/p>\n<h2>Basic parallel mode for CI\/CD pipelines<\/h2>\n<p>The basic parallel mode is the easiest mode to use in Codefresh pipelines. It allows you to take any existing step in a serial pipeline and \u201csplit\u201d into one or more parallel steps. Usually, the parallel steps will be of the same type (but this is not required). Here is an example where a <a href=\"https:\/\/codefresh.io\/docker-tutorial\/build-docker-image-dockerfiles\/\">Docker image<\/a> is pushed in parallel in 3 Docker registries:<\/p>\n<figure id=\"attachment_13067\" aria-describedby=\"caption-attachment-13067\" style=\"width: 1359px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/parallel-push.png\"><img class=\"size-full wp-image-13067\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/parallel-push.png\" alt=\"Docker parallel push\" width=\"1359\" height=\"529\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/parallel-push.png 1359w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/parallel-push-300x117.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/parallel-push-768x299.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/parallel-push-1024x399.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/parallel-push-628x244.png 628w\" sizes=\"(max-width: 1359px) 100vw, 1359px\" \/><\/a><figcaption id=\"caption-attachment-13067\" class=\"wp-caption-text\">Docker parallel push<\/figcaption><\/figure>\n<p>Here is the definition of this pipeline:<\/p>\n<pre>version: '1.0'\nstages:\n- build\n- push\nsteps:\n  MyAppDockerImage:\n    title: Building Docker Image\n    stage: 'build'\n    type: build\n    image_name: trivialgoweb\n    working_directory: .\/\n    tag: '${{CF_BRANCH_TAG_NORMALIZED}}'\n    dockerfile: Dockerfile\n  PushingToRegistries:\n    type: parallel\n    stage: 'push'\n    steps:\n      jfrog_PushingTo_jfrog_BintrayRegistry:\n        type: push\n        title: jfrog_Pushing To Bintray Registry\n        candidate: ${{MyAppDockerImage}}\n        tag: '${{CF_SHORT_REVISION}}'\n        registry: bintray \n      PushingToGoogleRegistry:\n        type: push\n        title: Pushing To Google Registry\n        candidate: ${{MyAppDockerImage}}\n        tag: '${{CF_SHORT_REVISION}}'\n        registry: gcr\n      PushingToDockerRegistry:\n        type: push\n        title: Pushing To Dockerhub Registry\n        candidate: ${{MyAppDockerImage}}\n        tag: '${{CF_SHORT_REVISION}}'\n        image_name: kkapelon\/trivialgoweb\n        registry: dockerhub \n<\/pre>\n<p>Notice the <code>type:parallel<\/code> segment in the pipeline.<\/p>\n<p>Unlike other solutions which allow you to use parallelism only in a specific pipeline segment, in Codefresh you can create parallelism with ANY <a href=\"https:\/\/codefresh.io\/docs\/docs\/codefresh-yaml\/steps\/\">type of step<\/a> in a pipeline. Do you want parallel quality scanning? You have it. Interested in parallel deployments? You can do it. Linting while load testing? Anything is possible.<\/p>\n<p>You can even use multiple parallel phases in a single pipeline. Here is an example where parallelism is used for both tests as well as deployments:<\/p>\n<figure id=\"attachment_13068\" aria-describedby=\"caption-attachment-13068\" style=\"width: 1210px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/simple-parallelism.png\"><img class=\"size-full wp-image-13068\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/simple-parallelism.png\" alt=\"Parallel CI\/CD pipeline\" width=\"1210\" height=\"403\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/simple-parallelism.png 1210w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/simple-parallelism-300x100.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/simple-parallelism-768x256.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/simple-parallelism-1024x341.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/simple-parallelism-628x209.png 628w\" sizes=\"(max-width: 1210px) 100vw, 1210px\" \/><\/a><figcaption id=\"caption-attachment-13068\" class=\"wp-caption-text\">Parallel CI\/CD pipeline<\/figcaption><\/figure>\n<p>And here is the respective codefresh.yml:<\/p>\n<pre>version: '1.0'\nstages:\n- build\n- 'parallel test'\n- 'gcr push'\n- 'parallel deploy'\nsteps:\n  MyAppDockerImage:\n    title: Building Docker Image\n    stage: 'build'\n    type: build\n    image_name: my-app\n    dockerfile: Dockerfile\n  MyTestingPhase:\n    type: parallel\n    stage: 'parallel test'\n    steps:\n      myUnitTests:\n        title: Unit testing\n        image: ${{MyAppDockerImage}}\n        commands:\n        - echo \"Tests\"\n      myIntegrationTests:\n        title: Integration Testing\n        image: ${{MyAppDockerImage}}\n        commands:\n        - echo \"Integration\"\n  PushingToGoogleRegistry:\n    type: push\n    title: Pushing To GCR\n    stage: 'gcr push'\n    candidate: ${{MyAppDockerImage}}\n    tag: '${{CF_SHORT_REVISION}}'\n    registry: gcr     \n  MyDeploymentPhase:\n    type: parallel\n    stage: 'parallel deploy'\n    steps:\n      deploy_to_env1:\n        title: deployment ENV1\n        type: deploy\n        kind: kubernetes\n        cluster:  myDemoCluster\n        namespace: demo\n        service: my-test-service\n      deploy_to_env2:\n        title: deployment ENV2\n        type: deploy\n        kind: kubernetes\n        cluster:  myOtherDemoCluster\n        namespace: demo\n        service: my-test-service  \n<\/pre>\n<p>The pipeline is running both integration\/load testing in parallel and then deploys to two environments at the same time.<\/p>\n<h2>Advanced parallel CI\/CD pipeline mode<\/h2>\n<p>The basic parallel mode will cover most of the typical parallelism scenarios in Codefresh pipelines. We realized, however, that several organizations might want more flexibility on the types of parallelism needed in CI\/CD pipelines.<\/p>\n<p>A common example is parallel sub-flows in a single pipeline:<\/p>\n<figure id=\"attachment_13069\" aria-describedby=\"caption-attachment-13069\" style=\"width: 716px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/parallel-pipeline-examples.png\"><img class=\"size-full wp-image-13069\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/parallel-pipeline-examples.png\" alt=\"Parallel subflows in a CI\/CD pipeline\" width=\"716\" height=\"348\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/parallel-pipeline-examples.png 716w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/parallel-pipeline-examples-300x146.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/parallel-pipeline-examples-628x305.png 628w\" sizes=\"(max-width: 716px) 100vw, 716px\" \/><\/a><figcaption id=\"caption-attachment-13069\" class=\"wp-caption-text\">Parallel subflows in a CI\/CD pipeline<\/figcaption><\/figure>\n<p>Instead of trying to predict every possible scenario needed by a company, we decided to offer an advanced parallel mode that can cater to all possible pipeline configurations. To use it you need to start your pipeline with:<\/p>\n<pre>version: '1.0'\nmode: parallel\nsteps:\n[...]\n<\/pre>\n<p>This syntax makes the pipeline use the full parallel mode. In this mode, the order of build steps in the codefresh.yml no longer matters. Instead, each step will be executed according to its dependencies. You have to specify the full order of steps <a href=\"https:\/\/codefresh.io\/docs\/docs\/codefresh-yaml\/conditional-execution-of-steps\/\">using conditionals<\/a>.<\/p>\n<pre>second_step:\n  title: Second step\n  when:\n    steps:\n     - name: first_step\n       on:\n         - success\n<\/pre>\n<p>In this example, we specify the step named \u201csecond_step\u201d will only execute after \u201cfirst_step\u201d is finished.<\/p>\n<p>Codefresh will automatically calculate the step order and create the critical path of the pipeline automatically. Once you run the pipeline, it will automatically make sure that each step runs in the correct order according to its dependencies. Here is the codefresh.yml that executes the pipeline shown in the previous picture:<\/p>\n<pre>version: '1.0'\nmode: parallel\nstages:\n- start\n- middleA\n- middleB\n- end\n\nsteps:\n  Step1:\n    title: Step1\n    stage: start\n    image: alpine\n    commands:\n      - echo \"Step 1\"\n  Step2:\n    title: Step2\n    stage: middleA\n    image: alpine\n    commands:\n      - echo \"Step 2\"\n    when:\n      steps:\n       - name: Step1\n         on:\n           - success  \n  Step3:\n    title: Step3\n    stage: middleB\n    image: alpine\n    commands:\n      - echo \"Step 3\"\n    when:\n      steps:\n       - name: Step2\n         on:\n           - success            \n  Step4:\n    title: Step4\n    stage: middleB\n    image: alpine\n    commands:\n      - echo \"Step 4\"\n    when:\n      steps:\n       - name: Step1\n         on:\n           - success\n  Step5:\n    title: Step5\n    stage: end\n    image: alpine\n    commands:\n      - echo \"Step 5\"\n    when:\n      steps:\n       - name: Step3\n         on:\n           - success\n       - name: Step4\n         on:\n           - success   \n<\/pre>\n<p>The example CI\/CD pipeline only uses dummy freestyle steps, so feel free to use it as a starting point with your own steps.<\/p>\n<p>Here is also a sample representation (remember that <a href=\"https:\/\/codefresh.io\/docs\/docs\/codefresh-yaml\/stages\/\">pipeline stages<\/a> are just used for visualization purposes and they don\u2019t affect how a CI\/CD pipeline is running)<\/p>\n<figure id=\"attachment_13071\" aria-describedby=\"caption-attachment-13071\" style=\"width: 1553px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/parallel-flow.png\"><img class=\"size-full wp-image-13071\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/parallel-flow.png\" alt=\"Advanced parallel CI\/CD pipelines\" width=\"1553\" height=\"401\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/parallel-flow.png 1553w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/parallel-flow-300x77.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/parallel-flow-768x198.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/parallel-flow-1024x264.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/parallel-flow-628x162.png 628w\" sizes=\"(max-width: 1553px) 100vw, 1553px\" \/><\/a><figcaption id=\"caption-attachment-13071\" class=\"wp-caption-text\">Advanced parallel CI\/CD pipelines<\/figcaption><\/figure>\n<h2>Create your own pipeline graph<\/h2>\n<p>The advanced parallel mode described in the previous section is very powerful and we believe that it can cover a wide range of parallel scenarios for pipelines.<\/p>\n<p>But we still decided to take it to the next level by giving you the full power of pipeline graphs. You can have as many \u201cstarting\u201d steps as you want and as many \u201cending\u201d steps. Your pipeline does not need to start and end in a single step.<\/p>\n<p>This means that with Codefresh you can create fan-in-fan-out configurations like this:<\/p>\n<figure id=\"attachment_13072\" aria-describedby=\"caption-attachment-13072\" style=\"width: 871px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/pipeline-graph.png\"><img class=\"size-full wp-image-13072\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/pipeline-graph.png\" alt=\"Complex CI\/CD pipeline graph\" width=\"871\" height=\"510\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/pipeline-graph.png 871w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/pipeline-graph-300x176.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/pipeline-graph-768x450.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/pipeline-graph-560x328.png 560w\" sizes=\"(max-width: 871px) 100vw, 871px\" \/><\/a><figcaption id=\"caption-attachment-13072\" class=\"wp-caption-text\">Complex CI\/CD pipeline graph<\/figcaption><\/figure>\n<p>This is the codefresh.yml file:<\/p>\n<pre>version: '1.0'\nmode: parallel\nstages:\n- start\n- middleA\n- middleB\n- middleC\n- end\n\nsteps:\n  Step1:\n    title: Step1\n    stage: start\n    image: alpine\n    commands:\n      - echo \"Step 1\"\n  Step2:\n    title: Step2\n    stage: middleA\n    image: alpine\n    commands:\n      - echo \"Step 2\"\n    when:\n      steps:\n       - name: Step1\n         on:\n           - success  \n  Step3:\n    title: Step3\n    stage: middleB\n    image: alpine\n    commands:\n      - echo \"Step 3\"\n    when:\n      steps:\n       - name: Step2\n         on:\n           - success            \n  Step4:\n    title: Step4\n    stage: middleB\n    image: alpine\n    commands:\n      - echo \"Step 4\"\n    when:\n      steps:\n       - name: Step1\n         on:\n           - success\n  Step5:\n    title: Step5\n    stage: end\n    image: alpine\n    commands:\n      - echo \"Step 5\"\n    when:\n      steps:\n       - name: Step6\n         on:\n           - success\n  Step6:\n    title: Step6\n    stage: middleC\n    image: alpine\n    commands:\n      - echo \"Step 6\"\n    when:\n      steps:\n       - name: Step4\n         on:\n           - success     \n       - name: Step3\n         on:\n           - success             \n  Step7:\n    title: Step7\n    stage: start\n    image: alpine\n    commands:\n      - echo \"Step 7\"\n  Step8:\n    title: Step8\n    stage: middleA\n    image: alpine\n    commands:\n      - echo \"Step 8\"\n    when:\n      steps:\n       - name: Step7\n         on:\n           - success\n  Step9:\n    title: Step9\n    stage: middleC\n    image: alpine\n    commands:\n      - echo \"Step 9\"\n    when:\n      steps:\n       - name: Step4\n         on:\n           - success\n       - name: Step8\n         on:\n           - success\n  Step10:\n    title: Step10\n    stage: end\n    image: alpine\n    commands:\n      - echo \"Step 10\"\n    when:\n      steps:\n       - name: Step6\n         on:\n           - success\n           \n<\/pre>\n<p>The possibilities are endless. The parallel mode has even more features not mentioned in this blog post. See the <a href=\"https:\/\/codefresh.io\/docs\/docs\/codefresh-yaml\/advanced-workflows\/\">full documentation page<\/a> for more details.<\/p>\n<p>Ready to try Codefresh, the CI\/CD platform for Docker\/Kubernetes\/Helm? <a href=\"https:\/\/codefresh.io\/codefresh-signup\/?utm_source=Blog&amp;utm_medium=Post&amp;utm_campaign=parallel\">Create Your Free Account Today!<\/a><\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"13064\"\/>","protected":false},"excerpt":{"rendered":"<p>This is it! The moment you have been waiting for\u2026 The number one requested feature from several Codefresh customers is now in production. You can finally run parallel steps within Codefresh pipelines. The reason this feature took so long to implement was that we wanted to offer the most flexible option possible. So after some &hellip; <a href=\"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/\">Read more<\/a><\/p>\n","protected":false},"author":62,"featured_media":13093,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[3120,41,1543,1538],"tags":[24,53,59,68,4017,4018],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Use parallel steps in your Codefresh pipelines | Codefresh<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Use parallel steps in your Codefresh pipelines\" \/>\n<meta property=\"og:description\" content=\"This is it! The moment you have been waiting for\u2026 The number one requested feature from several Codefresh customers is now in production. You can finally run parallel steps within Codefresh pipelines. The reason this feature took so long to implement was that we wanted to offer the most flexible option possible. So after some &hellip; Read more\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2019-04-15T20:03:26+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2019-04-18T19:21:08+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/Parallel-pipeline-steps-670x200.1.1.png\" \/>\n\t<meta property=\"og:image:width\" content=\"670\" \/>\n\t<meta property=\"og:image:height\" content=\"200\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@codefresh\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Kostis Kapelonis\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"6 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/Parallel-pipeline-steps-670x200.1.1.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/Parallel-pipeline-steps-670x200.1.1.png\",\"width\":670,\"height\":200},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/#webpage\",\"url\":\"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/\",\"name\":\"Use parallel steps in your Codefresh pipelines | Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/#primaryimage\"},\"datePublished\":\"2019-04-15T20:03:26+00:00\",\"dateModified\":\"2019-04-18T19:21:08+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Use parallel steps in your Codefresh pipelines\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87\"},\"headline\":\"Use parallel steps in your Codefresh pipelines\",\"datePublished\":\"2019-04-15T20:03:26+00:00\",\"dateModified\":\"2019-04-18T19:21:08+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/#webpage\"},\"wordCount\":755,\"commentCount\":2,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/Parallel-pipeline-steps-670x200.1.1.png\",\"keywords\":[\"Containers\",\"CI\/CD\",\"codefresh\",\"continuous delivery\",\"parallel\",\"steps\"],\"articleSection\":[\"Continuous Deployment\/Delivery\",\"Codefresh News\",\"Continuous Integration\",\"DevOps Tutorials\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87\",\"name\":\"Kostis Kapelonis\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png\",\"caption\":\"Kostis Kapelonis\"},\"description\":\"Kostis is a software engineer\/technical-writer dual class character. He lives and breathes automation, good testing practices and stress-free deployments with GitOps.\",\"url\":\"https:\/\/codefresh.io\/author\/kostiscodefresh-io\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Use parallel steps in your Codefresh pipelines | Codefresh","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/","og_locale":"en_US","og_type":"article","og_title":"Use parallel steps in your Codefresh pipelines","og_description":"This is it! The moment you have been waiting for\u2026 The number one requested feature from several Codefresh customers is now in production. You can finally run parallel steps within Codefresh pipelines. The reason this feature took so long to implement was that we wanted to offer the most flexible option possible. So after some &hellip; Read more","og_url":"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2019-04-15T20:03:26+00:00","article_modified_time":"2019-04-18T19:21:08+00:00","og_image":[{"width":670,"height":200,"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/Parallel-pipeline-steps-670x200.1.1.png","type":"image\/png"}],"twitter_card":"summary_large_image","twitter_creator":"@codefresh","twitter_site":"@codefresh","twitter_misc":{"Written by":"Kostis Kapelonis","Est. reading time":"6 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/Parallel-pipeline-steps-670x200.1.1.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/Parallel-pipeline-steps-670x200.1.1.png","width":670,"height":200},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/#webpage","url":"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/","name":"Use parallel steps in your Codefresh pipelines | Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/#primaryimage"},"datePublished":"2019-04-15T20:03:26+00:00","dateModified":"2019-04-18T19:21:08+00:00","breadcrumb":{"@id":"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Use parallel steps in your Codefresh pipelines"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87"},"headline":"Use parallel steps in your Codefresh pipelines","datePublished":"2019-04-15T20:03:26+00:00","dateModified":"2019-04-18T19:21:08+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/#webpage"},"wordCount":755,"commentCount":2,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/Parallel-pipeline-steps-670x200.1.1.png","keywords":["Containers","CI\/CD","codefresh","continuous delivery","parallel","steps"],"articleSection":["Continuous Deployment\/Delivery","Codefresh News","Continuous Integration","DevOps Tutorials"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/codefresh-news\/parallel-pipelines\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87","name":"Kostis Kapelonis","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png","caption":"Kostis Kapelonis"},"description":"Kostis is a software engineer\/technical-writer dual class character. He lives and breathes automation, good testing practices and stress-free deployments with GitOps.","url":"https:\/\/codefresh.io\/author\/kostiscodefresh-io\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/13064"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/62"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=13064"}],"version-history":[{"count":0,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/13064\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/13093"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=13064"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=13064"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=13064"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}