{"id":13097,"date":"2019-04-18T10:51:54","date_gmt":"2019-04-18T10:51:54","guid":{"rendered":"http:\/\/codefresh.io\/?p=13097"},"modified":"2022-01-06T15:46:51","modified_gmt":"2022-01-06T15:46:51","slug":"local-k8s-draft-skaffold-garden","status":"publish","type":"post","link":"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/","title":{"rendered":"The ultimate guide for local development on Kubernetes: Draft vs Skaffold vs Garden.io"},"content":{"rendered":"<p>In the previous articles of this series, we have seen local Kubernetes installations designed specifically for developers. We have looked at all the major players such as <a href=\"https:\/\/codefresh.io\/howtos\/local-kubernetes-windows-minikube-vs-docker-desktop\/\">Minikube<\/a>, <a href=\"https:\/\/codefresh.io\/kubernetes-tutorial\/local-kubernetes-mac-minikube-vs-docker-desktop\/\">Docker-for-desktop,<\/a> and <a href=\"https:\/\/codefresh.io\/kubernetes-tutorial\/local-kubernetes-linux-minikube-vs-microk8s\/\">Microk8s<\/a>.<\/p>\n<p>However, we have conveniently left out the details on how you can use a local Kubernetes cluster as a developer to test a feature on your workstation before actually committing anything (i.e. before the CI\/CD pipeline takes over).<\/p>\n<p>By automating the local development workflow, we can significantly reduce the deployment and testing phases and provide a quick feedback loop which is always crucial for developer productivity.<\/p>\n<p>Of course, you could always run manual <strong>kubectl <\/strong>commands to deploy to your local cluster. But this process becomes quickly cumbersome and can be problematic in cases of microservices where you might have complex dependencies between the deployed applications.<\/p>\n<p>Today, there are many available tools designed for Kubernetes deployments specifically for developers. Their primary goal is to help you make the feedback loop as fast as possible (code-deploy-refactor) and they can be used with any kind of cluster (remote or local) making them the perfect solution for developers who wish to develop Kubernetes enabled applications.<\/p>\n<p>In this article, we are reviewing three such development tools that are helping developers to work with local Kubernetes clusters. These tools are <a href=\"https:\/\/draft.sh\/\">Draft<\/a>, <a href=\"https:\/\/skaffold.dev\/\">Skaffold <\/a>and <a href=\"https:\/\/garden.io\/\">Garden<\/a>.<\/p>\n<p><strong>Note: After we published this article, <a href=\"https:\/\/tilt.dev\/\">tilt.dev<\/a> appeared which is another alternative on this space. See the <a href=\"https:\/\/codefresh.io\/kubernetes-tutorial\/local-kubernetes-development-tilt-dev\/\">tilt.dev blog post<\/a> for more details. <\/strong><\/p>\n<h2>Local Kubernetes development with Draft<\/h2>\n<p><a href=\"https:\/\/draft.sh\/\">Draft<\/a> is a project developed by Microsoft, in order to assist developers to build applications that can be deployed to a Kubernetes cluster (either local or remote). Draft targets the \u201cinner loop\u201d of development workflow, meaning it helps developers deploy their feature to a cluster, without committing anything first to source control.<\/p>\n<p>Draft can also automatically discover the type of code that you are working on and help you generate all needed configuration files. You can use Draft to create both the Dockerfile and the Kubernetes manifests for an existing application.<\/p>\n<p>The second important Draft feature is the automatic deployments of your application into your a Kubernetes cluster. This means that code changes are automatically synchronized with the cluster deployment.<\/p>\n<p>To work with Draft there are three prerequisites:<\/p>\n<ol>\n<li>Downloading the Draft CLI.<\/li>\n<li>Using <a href=\"https:\/\/helm.sh\/\">Helm <\/a>(The Kubernetes package manager) in your cluster.<\/li>\n<li>Setup a local Kubernetes cluster such as Minikube, Docker-for-desktop or MicroK8s.<\/li>\n<\/ol>\n<p>The figure below depicts the Draft workflow, including the generation of the configuration files and the deployment lifecycle.<\/p>\n<figure id=\"attachment_13100\" aria-describedby=\"caption-attachment-13100\" style=\"width: 409px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/image4.png\"><img class=\"size-full wp-image-13100\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/image4.png\" alt=\"Deployments with Draft\" width=\"409\" height=\"841\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/image4.png 409w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/image4-146x300.png 146w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/image4-160x328.png 160w\" sizes=\"(max-width: 409px) 100vw, 409px\" \/><\/a><figcaption id=\"caption-attachment-13100\" class=\"wp-caption-text\">Deployments with Draft<\/figcaption><\/figure>\n<p>Draft comes with a set of <a href=\"https:\/\/github.com\/Azure\/draft\/tree\/master\/packs\">packs <\/a>that know what kind of dockerfiles and manifests are needed for all the popular programming languages such as Python, Java, Go etc. These packages are used automatically by Draft to generate a Dockerfile and a Helm chart when the draft create command is issued. The pack architecture for the supported languages is extensible, so developers can write their own extensions according to their team and application needs. Port forwarding to localhost is also provided by Draft. The resulting image deployed to the target cluster is sent via the Helm chart when issuing the command <code>draft up<\/code>.<\/p>\n<p>When a change is happening to the source code of the application, the Draft daemon on the developer machine updates the Kubernetes cluster automatically by building a new container and then deploying again without any other developer action. There are multiple examples in different programming languages (e.g. Python, Go, Java) provided by Draft in the <a href=\"https:\/\/github.com\/Azure\/draft\/blob\/master\/examples\">examples directory<\/a> if you want to experiment using Draft with an existing application.<\/p>\n<p>The main features of the Draft are:<\/p>\n<ul>\n<li>The generated configuration files, such as Helm chart and Dockerfile are fully configured and can be customized further by hand to fully match the application developed. You can also develop your own custom language packs if you want to use Draft with an exotic programming language.<\/li>\n<li>A wide range of supported languages are already included without the need to write dockerfiles or Kubernetes manifests. This can help developers who are just now starting their journey with Docker and Kubernetes.<\/li>\n<li>All the build and deployment configuration is stored along the application source code directory making each application self-described.<\/li>\n<li>It is very easy to modify\/extend\/adopt the configuration files into a full-blown CI\/CD pipeline.<\/li>\n<li>All builds are executed locally. No other external or cloud system is needed to work with Draft.<\/li>\n<li>Draft automatically monitors local code changes and triggers cluster deployments. This feature is configurable and can be enabled\/disabled by the developer.<\/li>\n<li>Draft can also work with remote Kubernetes cintlusters if your local kubeconfig points to a remote cluster.<\/li>\n<\/ul>\n<p>Draft was briefly mentioned in our <a href=\"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/\">AKS tutorial<\/a>, but it was only used for the Helm chart generation. In the next tutorial, you will see the local workflow process as well.<\/p>\n<h2>Draft development tutorial<\/h2>\n<p>There are many options to <a href=\"https:\/\/github.com\/azure\/draft#install-the-draft-binary\">install Draft<\/a> either as a standalone binary or using a package depending on your development environment. In this tutorial, Draft installation will be completed using the standalone library for Linux. The installation steps are:<\/p>\n<ol>\n<li>Download the <a href=\"https:\/\/github.com\/Azure\/draft\/releases\">latest version<\/a> of Draft<\/li>\n<li>Unpack it and place it to your <code>$PATH<\/code><\/li>\n<li>Verify draft executable and version<\/li>\n<\/ol>\n<p>Example installation:<\/p>\n<pre>wget https:\/\/azuredraft.blob.core.windows.net\/draft\/draft-v0.16.0-linux-amd64.tar.gz\ntar -zxvf draft-v0.16.0-linux-amd64.tar.gz\nsudo mv linux-amd64\/draft \/usr\/local\/bin\/draft\ndraft version\n<\/pre>\n<p>After successful installation of Draft, you need to initialize it by executing the following command:<\/p>\n<pre>draft init\n<\/pre>\n<p>You need to run this command only once (the first time you install draft).<\/p>\n<h3>Application Configuration<\/h3>\n<p>After successful installation and configuration of Draft and its prerequisites, the next step is to deploy an application in your Kubernetes cluster. There are multiple examples in different programming languages (e.g. Python, Go, Java) provided by Draft in the <a href=\"https:\/\/github.com\/Azure\/draft\/blob\/master\/examples\">examples directory<\/a>. For this tutorial, instead of using existing samples, we have created a Java REST service based on <a href=\"https:\/\/spring.io\/projects\/spring-boot\">Spring-Boot<\/a> that returns a greeting message in JSON format. You can download the example project <a href=\"https:\/\/github.com\/pliakas\/roukou-dev-on-kubernetes\/tree\/master\/draft-tutorial\">here<\/a>.<\/p>\n<p>If you look at the source code of the project you will notice that there are no Kubernetes manifests present or Helm charts. The application does not even include a Dockerfile.<br \/>\nIn order to generate the needed files, you can use the command:<\/p>\n<pre>draft create\n<\/pre>\n<p>Draft will analyze the source code, notice that it is a Java application, and it will create for you:<\/p>\n<ol>\n<li>A Dockerfile,<\/li>\n<li>Kubernetes manifests,<\/li>\n<li>A Helm chart to package the manifests.<\/li>\n<\/ol>\n<p>You can view (and edit) the generated files on your own:<\/p>\n<pre>pliakas@zouzou:~\/Projects\/Articles\/draft-tutorial$ ls -laF\ntotal 44\ndrwxr-xr-x 5 pliakas pliakas 4096 \u039c\u03b1\u03c1   4 17:29 .\/\ndrwxr-xr-x 4 pliakas pliakas 4096 \u039c\u03b1\u03c1   3 21:27 ..\/\ndrwxr-xr-x 3 pliakas pliakas 4096 \u039c\u03b1\u03c1   4 17:22 charts\/\n-rw-r--r-- 1 pliakas pliakas  304 \u039c\u03b1\u03c1   4 17:25 Dockerfile\n-rw-r--r-- 1 pliakas pliakas   50 \u039c\u03b1\u03c1   4 17:22 .dockerignore\n-rw-r--r-- 1 pliakas pliakas   25 \u039c\u03b1\u03c1   4 17:22 .draftignore\n-rw-r--r-- 1 pliakas pliakas    0 \u039c\u03b1\u03c1   4 17:22 .draft-tasks.toml\n-rw-r--r-- 1 pliakas pliakas  222 \u039c\u03b1\u03c1   4 17:22 draft.toml\ndrwxr-xr-x 8 pliakas pliakas 4096 \u039c\u03b1\u03c1   4 17:18 .git\/\n-rw-r--r-- 1 pliakas pliakas 1640 \u039c\u03b1\u03c1   4 17:17 pom.xml\n-rw-r--r-- 1 pliakas pliakas   94 \u039c\u03b1\u03c1   3 21:27 README.md\ndrwxr-xr-x 4 pliakas pliakas 4096 \u039c\u03b1\u03c1   4 17:16 src\/\n<\/pre>\n<p>The <code>charts\/<\/code> and Dockerfile assets created by Draft default to a basic Java configuration. To align with the <code>internalPort <\/code>service value in <code>charts\/draft-tutorial\/values.yaml<\/code>, this Dockerfile exposes port 4567 from the container. The application is also using <code>openjdk11 <\/code>so modify the Dockerfile with your IDE or text editor as seen below:<\/p>\n<pre>FROM maven:3-jdk-11 as BUILD\n\nCOPY . \/usr\/src\/app\nRUN mvn --batch-mode -f \/usr\/src\/app\/pom.xml clean package\n\nFROM openjdk:11-jre-slim\nENV PORT 4567\nEXPOSE 4567\nCOPY --from=BUILD \/usr\/src\/app\/target \/opt\/target\nWORKDIR \/opt\/target\n\nCMD [\"\/bin\/bash\", \"-c\", \"find -type f -name '*.jar' | xargs java -jar\"]\n<\/pre>\n<p>The <code>draft.toml<\/code> file is a Draft specific file that provides the basic configuration about the application such as its name, the namespace it will be deployed to, and whether to deploy the application automatically when local files change.<\/p>\n<pre>[environments]\n  [environments.development]\n    name = \"draft-tutorial\"\n    namespace = \"default\"\n    wait = true\n    watch = false\n    watch-delay = 2\n    auto-connect = false\n    dockerfile = \"Dockerfile\"\n    chart = \"\"\n<\/pre>\n<p>Detailed information about the structure of the <code>draft.toml<\/code> file can be found <a href=\"https:\/\/github.com\/Azure\/draft\/blob\/master\/docs\/reference\/dep-006.md\">at the Draft reference documentation<\/a>. A <code>.draftignore<\/code> file is created for elements we want to exclude tracking when watching for code changes.<\/p>\n<p>Draft will also create a <code>.dockerignore<\/code> file to ensure the Docker context ignores files and directories that are not necessary. Feel free to edit this file further to match your application.<\/p>\n<p>The <code>.draft-tasks.toml<\/code> file allows you to configure tasks to be run before <code>draft up<\/code> (pre-uptasks), after draft up (post-up tasks), or after <code>draft delete<\/code> (cleanup tasks). This file is empty by default. It can be used as a mini CI\/CD pipeline that you can run locally when developing with Draft.<\/p>\n<h3>Application Deployment in a local Kubernetes cluster<\/h3>\n<p>After configuring the application, you can deploy it to your Kubernetes cluster with the command:<\/p>\n<pre>pliakas@zouzou:~\/Projects\/Articles\/draft-tutorial$ draft up\nDraft Up Started: 'draft-tutorial': 01D54PRB86WDFWZBGG94CEE3DA\ndraft-tutorial: Building Docker Image: SUCCESS \u2693  (136.0224s)\ndraft-tutorial: Releasing Application: SUCCESS \u2693  (2.4213s)\nInspect the logs with `draft logs 01D54PRB86WDFWZBGG94CEE3DA`\n<\/pre>\n<p>The above command will build all Docker images, then create the needed charts and deploy them to the Kubernetes cluster that is mentioned in your local kubeconfig.<\/p>\n<p>You can verify the application deployment by using your favorite kubectl commands or any type of graphical dashboard that you might have.<\/p>\n<pre>kubectl get pods\n<\/pre>\n<p>You can verify that your application works by making an http request with curl\/wget or by opening a browser and using the following endpoint.<\/p>\n<pre>curl http:\/\/\/draft\/api\/v1.0\/ \n<\/pre>\n<p>Draft can also stream the logs from the container with the connect command to your standard output.<\/p>\n<pre>draft connect\n<\/pre>\n<p>Draft provides fast re-deployment of your application for any code modification that you make. After you edit a source code file, you can re-issue the command:<\/p>\n<pre>draft up \n<\/pre>\n<p>Draft identifies that the Helm release exists and will perform a helm upgrade install of helm install, which speeds-up the redeployment procedure.<\/p>\n<p>Finally, you can terminate and remove the deployed application from the Kubernetes cluster by issuing the command:<\/p>\n<pre>draft delete\n<\/pre>\n<p>In summary, Draft is a very handy solution for local Kubernetes development which is very easy to use even in an application that doesn\u2019t have a Dockerfile.<\/p>\n<h2>Local Kubernetes development with Skaffold<\/h2>\n<p><a href=\"https:\/\/skaffold.dev\/\">Skaffold <\/a>is a tool created by Google that helps with continuous development and deployment of Kubernetes applications specifically aimed at developers.<\/p>\n<p>At the most basic level, Skaffold works similarly to Draft. It:<\/p>\n<ol>\n<li>Creates Kubernetes configuration files for your apps<\/li>\n<li>Deploys your application to a local or remote cluster<\/li>\n<li>Monitors your source code and automatically re-deploys when needed<\/li>\n<li>Steams logs from your deployed pods to your local terminal<\/li>\n<\/ol>\n<p>But Skaffold also offers several advanced features on top of this basic functionality. First of all, Skaffold provides an extensible pluggable architecture, allowing developers to choose the appropriate tools for each step involved in building and deploying their application. Skaffold also attempts to provide portability for CI integrations among different build systems, image registries and deployment tools.<\/p>\n<p>Skaffold can also interact with Docker registries by pushing your application image. Unlike Draft, Skaffold can work with plain Kubernetes manifests (using Helm as a package manager is optional).<\/p>\n<p>The figure below depicts the Skaffold workflow, including the generation of the configuration files and the deployment lifecycle in both aforementioned execution modes.<\/p>\n<figure id=\"attachment_13104\" aria-describedby=\"caption-attachment-13104\" style=\"width: 631px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/image1.png\"><img class=\"size-full wp-image-13104\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/image1.png\" alt=\"Deployments with Skaffold\" width=\"631\" height=\"481\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/image1.png 631w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/image1-300x229.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/image1-430x328.png 430w\" sizes=\"(max-width: 631px) 100vw, 631px\" \/><\/a><figcaption id=\"caption-attachment-13104\" class=\"wp-caption-text\">Deployments with Skaffold<\/figcaption><\/figure>\n<p>Skaffold can be used in two different modes:<\/p>\n<ol>\n<li>Development mode by issuing the command \u201cskaffold dev\u201d. In development mode, it monitors the changes in source code, automatically generates all appropriate Docker images and deploys the images to the Kubernetes cluster. In addition, it provides logs streaming from deployed applications.<\/li>\n<li>Deployment mode by issuing the command skaffold run. In this mode, Skaffold runs a pipeline only once and exits on any errors in the pipeline. This is useful because it can be used as a sanity check after the completion of the development of the application.<\/li>\n<\/ol>\n<p>The main features of the Scaffold are:<\/p>\n<ul>\n<li>Monitors local changes in your source code and automatically triggers build\/push deployments to local or remote Kubernetes clusters.<\/li>\n<li>It supports remote and local Docker engines and registries. (Note that using remote Docker engines may increase build times significantly.)<\/li>\n<li>Can track dependencies between applications and automatically deploy on what was changed.<\/li>\n<li>Supports existing tooling and workflows with the ability to build and deploy APIs that make each implementation composable to support various different workflows.<\/li>\n<li>Can be used from multiple different environments, such as the local developer environment or any CI since it is CI vendor independent (no need for any plugin for Kubernetes or other tools).<\/li>\n<li>Has a pluggable architecture to allow for different implementations of the stages and build profiles to switch tools depending on the case.<\/li>\n<li>Supports applications consisting of multiple components if you use Gradle or Maven.<\/li>\n<\/ul>\n<p>One of the main advantages of Skaffold is the number of integrations it provides. It has native support for:<\/p>\n<p><a href=\"https:\/\/docs.docker.com\/develop\/develop-images\/build_enhancements\/\">Buildkit<\/a><br \/>\n<a href=\"https:\/\/bazel.build\/\">Bazel <\/a><br \/>\n<a href=\"https:\/\/github.com\/GoogleContainerTools\/jib\">Jib <\/a><br \/>\n<a href=\"https:\/\/github.com\/GoogleContainerTools\/kaniko\">Kaniko<\/a><br \/>\n<a href=\"https:\/\/cloud.google.com\/\">Google cloud build<\/a><br \/>\n<a href=\"https:\/\/helm.sh\/\">Helm<\/a><br \/>\n<a href=\"https:\/\/github.com\/kubernetes-sigs\/kustomize\">Kustomize<\/a><\/p>\n<p>The<a href=\"https:\/\/skaffold.dev\/docs\/references\/yaml\/\"> skaffold.yml<\/a> file, which is the main configuration file, has several options that you can use to change the way your application is built and deployed. It is essentially a mini CI\/CD solution for local development that can also take care of testing or pushing images.<\/p>\n<h2>Skaffold development tutorial<\/h2>\n<p>In this tutorial, Skaffold installation will be completed using the standalone executable, for Linux. The installation steps are:<\/p>\n<ol>\n<li>Download the <a href=\"https:\/\/github.com\/GoogleContainerTools\/skaffold\/releases\">latest version<\/a> of Skaffold<\/li>\n<li>Unpack it and place it to your <code>$PATH<\/code><\/li>\n<li>Verify Skaffold executable and version<\/li>\n<\/ol>\n<p>Example installation:<\/p>\n<pre>wget https:\/\/github.com\/GoogleContainerTools\/skaffold\/releases\/download\/v0.24.0\/skaffold-linux-amd64\nchmod +x skaffold-linux-amd64\nsudo mv skaffold-linux-amd64 \/usr\/local\/bin\/skaffold\nskaffold version\n<\/pre>\n<h3>Application Configuration<\/h3>\n<p>For this tutorial, a Spring-Boot application will be used. It provides one endpoint that returns a simple greeting message in JSON format. You can find the example application <a href=\"https:\/\/github.com\/pliakas\/roukou-dev-on-kubernetes\/tree\/master\/skaffold-demo\">here<\/a>.<\/p>\n<p>In order to run the application, we first need to create a Dockerfile file to containerize our application. Here is an example:<\/p>\n<pre>FROM maven:3-jdk-11 as BUILD\n\nCOPY . \/usr\/src\/app\nRUN mvn --batch-mode -f \/usr\/src\/app\/pom.xml clean package\n\nFROM openjdk:11-jre-slim\nENV PORT 42050\nEXPOSE 42050\nCOPY --from=BUILD \/usr\/src\/app\/target \/opt\/target\nWORKDIR \/opt\/target\n\nCMD [\"\/bin\/bash\", \"-c\", \"find -type f -name '*.jar' | xargs java -jar\"]\n<\/pre>\n<p>In addition to the Dockerfile, we will also create a <code>k8s-app.yml<\/code> file in order to generate the Skaffold configuration file. A simple version of <code>k8s-app.yml<\/code> file is shown below:<\/p>\n<pre>apiVersion: v1\nkind: Pod\nmetadata:\n  name: skaffold-demo\nspec:\n  containers:\n  - name: skaffold-demo\n    image: roukou\/skaffold-demo\n<\/pre>\n<p>Now, the Skaffold configuration files can be generated by issuing the command:<\/p>\n<pre>skaffold init\n<\/pre>\n<p>This command will generate a <code>skaffold.yaml<\/code> file containing all needed information in order to build and deploy the application to the desired Kubernetes cluster. The generated <code>skaffold.yaml<\/code> file is:<\/p>\n<pre>apiVersion: skaffold\/v1beta6\nkind: Config\nbuild:\n  artifacts:\n  - image: roukou\/skaffold-demo\ndeploy:\n  kubectl:\n    manifests:\n    - k8s-app.yml\n<\/pre>\n<h3>Application Deployment<\/h3>\n<p>After successful creation of the configuration files, there are two options to deploy the desired application. During development time, we can use the command:<\/p>\n<pre>skaffold dev --default-repo localhost:32000\n<\/pre>\n<p>The above command will continuously deploy your application when a file is changed (speeding up development). It monitors the source code files for every change and makes fast re-deployments.<\/p>\n<p>If you want to deploy once and don\u2019t track code changes, you need the run command:<\/p>\n<pre>skaffold run --default-repo localhost:32000\n<\/pre>\n<p>After a successful deployment you can check if your application has been deployed in your Kubernetes cluster using the familiar kubectl commands:<\/p>\n<pre>kubectl get pods\n<\/pre>\n<p>You can check that the application is running by using the command:<\/p>\n<pre>curl http:\/\/\/skaffold\/api\/v1.0 \n<\/pre>\n<p>Alternatively, you can check your Kubernetes dashboard to ensure your application has been deployed as expected.<\/p>\n<p>Finally, you can remove your deployed application with the delete command:<\/p>\n<pre>skaffold delete\n<\/pre>\n<p>In summary, Skaffold is a very flexible solution that does not require Helm and is very extensive on what kind of integrations it can be used with.<\/p>\n<h2>Local Kubernetes development with Garden<\/h2>\n<p><a href=\"https:\/\/garden.io\/\">Garden <\/a> is an open-source development tool aiming to provide a development environment to develop and test applications on Kubernetes (local or remote), or to any platform that supports serverless functions.<\/p>\n<p>Garden allows developers to focus on the development cycle and provides an environment to build, deploy, and test applications faster, without spending time for configuration and deployment.<\/p>\n<p>At first glance, Garden behaves in a similar manner to Draft and Skaffold. It allows you to deploy your source code to your local cluster and sync your deployments as you change the source code. It also supports extra deployment steps such as unit testing and can take advantage of Helm charts.<\/p>\n<p>Garden introduces a new way to describe your application, called <a href=\"https:\/\/docs.garden.io\/basics\/stack-graph\">Stack Graph<\/a>. It has six main organization units: projects, providers, modules, services, tasks and tests. A project is the root of the \u201cgraph\u201d and consists of one or more modules that support multiple providers. Tasks can be used for dependencies of services. More details on stack graph can be found on a <a href=\"https:\/\/medium.com\/garden-io\/why-distributed-systems-are-hard-to-develop-and-how-to-fix-it-e5dfe9bac421\">dedicated blog post<\/a> by the Garden team.<\/p>\n<p>With the stack graph, you essentially create a dependency tree between your application components. This means that when Garden deploys your application, it knows how all the parts fit together and can deploy only what was actually changed. You can think of Garden like a Kubernetes build system that behaves similarly to Make, Maven, Rake, Gulp, etc., but groups cluster services instead of source code.<\/p>\n<p>The figure below depicts the Garden workflow, including the generation of the configuration files.<\/p>\n<figure id=\"attachment_13106\" aria-describedby=\"caption-attachment-13106\" style=\"width: 705px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/image3.png\"><img class=\"size-full wp-image-13106\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/image3.png\" alt=\"Development with Garden\" width=\"705\" height=\"571\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/image3.png 705w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/image3-300x243.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/image3-405x328.png 405w\" sizes=\"(max-width: 705px) 100vw, 705px\" \/><\/a><figcaption id=\"caption-attachment-13106\" class=\"wp-caption-text\">Development with Garden<\/figcaption><\/figure>\n<p>Garden combines build, test and deploy phases into a single command called <code>garden dev<\/code>. This provides a fast and convenient way to speed up the development feedback loop. This command will always build, test, and deploy modules in the right order so that all dependencies are respected. Furthermore, Garden is able to monitor the application source code files and automatically update any running services.<\/p>\n<p>The main features of Garden are:<\/p>\n<ul>\n<li>An integrated development and deployment framework for building, testing and deploying services efficiently.<\/li>\n<li>Support of automatic cluster re-deployment for the application when source code is changing.<\/li>\n<li>Support for multi-module and multi-services operations (tree of dependencies).<\/li>\n<li>A graphical <a href=\"https:\/\/github.com\/garden-io\/garden\/blob\/master\/docs\/dashboard.gif\">dashboard <\/a>for dependencies.<\/li>\n<li>Ability to run tasks (e.g. database migrations as part of the build flow).<\/li>\n<li>Native support for <a href=\"https:\/\/helm.sh\/\">Helm <\/a>and <a href=\"https:\/\/www.openfaas.com\/\">OpenFass <\/a>deployments<\/li>\n<li>Hot-reload feature (mostly for dynamic programming languages as well as Go and Spring Boot) where source code is sent directly to running containers.<\/li>\n<li>Streaming of container logs to your terminal.<\/li>\n<li>File watching and hot reloading of code is also available for remote clusters.<\/li>\n<\/ul>\n<p>Garden also has its own <a href=\"https:\/\/docs.garden.io\/faqs#garden-vs-skaffold\">comparison against Skaffold<\/a>. In summary, Garden aims to be a more generic solution (Kubernetes is just one deployment target, other targets such as Docker-swarm are planned).<\/p>\n<p>Notice also that unlike Draft (Microsoft) and Skaffold (Google), Garden is a company with a single product and some of the planned features are expected to be enterprise\/paid such as faster in-cluster building.<\/p>\n<h2>Garden development tutorial<\/h2>\n<p>In this tutorial, Garden installation will be completed using the standalone executable for Linux. The installation steps are:<\/p>\n<ul>\n<li>Download the <a href=\"https:\/\/github.com\/garden-io\/garden\/releases\">latest version<\/a> of Garden<\/li>\n<li>Unpack it and place it to your <code>$PATH <\/code><\/li>\n<li>Verify the executable and version<\/li>\n<\/ul>\n<p>Example installation:<\/p>\n<pre>wget https:\/\/github.com\/garden-io\/garden\/releases\/download\/v0.9.9\/garden-v0.9.9-linux-amd64.tar.gz\ntar -zxvf garden-v0.9.9-linux-amd64.tar.gz\ncp -r linux-amd64\/* .\/local\/bin\/\ngarden -version\n<\/pre>\n<h3>Application Configuration<\/h3>\n<p>For this tutorial, a spring-boot application will be used, which can be found <a href=\"https:\/\/github.com\/pliakas\/roukou-dev-on-kubernetes\/tree\/master\/garden-tutorial\">here<\/a>. It provides one endpoint that returns a simple greeting message in JSON format. A <code>garden.yml<\/code> file is needed in the parent directory of your project:<\/p>\n<pre>project:\n  name: garden-tutorial\n  environments:\n    - name: local\n      providers:\n        - name: local-kubernetes\n<\/pre>\n<p>The local-kubernetes plugin automatically detects an existing Kubernetes installation and sets the appropriate context for connecting to the local Kubernetes instance. It uses the local-kubernetes plugin by default, but you can configure it explicitly in the project-level <code>garden.yml<\/code> as follows:<\/p>\n<pre>project:\n  name: garden-tutorial\n  environments:\n    - name: local\n      providers:\n        - name: local-kubernetes\n          context: minikube\n<\/pre>\n<p>In order to run the application, we first need to create a Dockerfile file to containerize our application, similar to the previous example for Skaffold.<\/p>\n<pre>FROM maven:3.6.0-jdk-11-slim\nWORKDIR \/app\n\nCOPY pom.xml \/app\/pom.xml\nRUN mvn dependency:resolve\n\nRUN mkdir -p \/app\/target\nCOPY src \/app\/src\n# RUN mvn install\n\nENV JVM_OPTS \"-XX:+UseCGroupMemoryLimitForHeap -XX:MaxRAMFraction=1\"\nRUN mvn install\n# RUN mvn compile\nCMD [\"mvn\", \"spring-boot:run\"]\n\nEXPOSE 42052\n<\/pre>\n<p>Furthermore, inside the directory of the project module\/service an additional <code>garden.yml<\/code> file is needed. For each module in your project this configuration file is required and defines what type of module is supported (e.g. single container, Helm chart, Maven module etc). For the above module the <code>garden.yml<\/code> can be configured as follows:<\/p>\n<pre>module:\n  description: Spring Boot to demonstrate garden deployment.\n  type: container\n  name: roukou\n  hotReload:\n    sync:\n      - target: \/app\/target\n        source: target\n  services:\n    - name: roukou\n      ports:\n        - name: http\n          containerPort: 8080\n          servicePort: 8080\n      healthCheck:\n        httpGet:\n          path: \/actuator\/health\n          port: http\n      ingresses:\n        - path: \/garden\/api\/v1.0\/\n          port: http\n<\/pre>\n<p>A module may define one or more services. Services are deployed when running garden deploy or garden dev. Finally, you can verify that your configuration is correct by issuing the command:<\/p>\n<pre>garden get status\n<\/pre>\n<p>The output of the command must be similar to this:<\/p>\n<pre>providers:\n  local-kubernetes:\n    ready: false\n    needUserInput: false\n    dashboardPages: []\nservices:\n  roukou:\n    ingresses:\n      - hostname: garden-tutorial.192.168.99.100.nip.io\n        path: \/\n        port: 80\n        protocol: http\n    state: missing\n<\/pre>\n<h3>Application Deployment<\/h3>\n<p>Garden support different workflows, depending on your requirements. During development, you can use the command:<\/p>\n<pre>garden dev\n<\/pre>\n<p>And the output will be:<\/p>\n<pre>Good afternoon! Let's get your environment wired up...\n\n\u2714 roukou                    \u2192 Building roukou:v-c4d1c84056... \u2192 Done (took 0.4 sec)\n\u2714 roukou                    \u2192 Deploying version v-c4d1c84056... \u2192 Done (took 67 sec)\n    \u2139 roukou                    \u2192 Service deployed\n    \u2192 Ingress: http:\/\/garden-tutorial.192.168.99.100.nip.io\/garden\/api\/v1.0\nGarden dashboard and API server running on http:\/\/localhost:38365\n\nWaiting for code changes\n<\/pre>\n<p>To verify that your application is deployed correctly to your local Kubernetes cluster, you can see it in the Garden dashboard by opening the link <code>http:\/\/localhost:38365<\/code>. Garden provides a graph showing all the dependencies of your applications, similar to the below screenshot:<\/p>\n<figure id=\"attachment_13107\" aria-describedby=\"caption-attachment-13107\" style=\"width: 1024px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/image2.png\"><img class=\"size-large wp-image-13107\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/image2-1024x716.png\" alt=\"Garden dashboard\" width=\"1024\" height=\"716\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/image2-1024x716.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/image2-300x210.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/image2-768x537.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/image2-469x328.png 469w, https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/image2.png 1339w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/a><figcaption id=\"caption-attachment-13107\" class=\"wp-caption-text\">Garden dashboard<\/figcaption><\/figure>\n<p>You can check that your application is up and running using the command:<\/p>\n<pre>curl http:\/\/garden-tutorial.192.168.99.100.nip.io\/garden\/api\/v1.0\/\n<\/pre>\n<p>Alternatively, you can verify that the application was deployed into Kubernetes using the command:<\/p>\n<pre>kubectl get all --all-namespaces<\/pre>\n<p>Every time you are changing files, Garden is monitoring your files and re-builds &amp; re-deploys the application. You can also build and deploy the application separately by issuing the commands garden build and garden deploy accordingly. Finally, Garden supports advanced features such as <a href=\"https:\/\/docs.garden.io\/using-garden\/hot-reload\">hot deployments<\/a> without having to restart the application using the command:<\/p>\n<pre>garden deploy --hot=roukou\n<\/pre>\n<h2>Conclusions<\/h2>\n<p>In this article, we have seen 3 tools for local Kubernetes development. They are used to deploy your source code to your local cluster and can continuously re-deploy when source code changes take place.<\/p>\n<p>Draft is the best solution if you are just starting to learn about containers and Kubernetes clusters. It is the easiest to use if you have a plain application and want to auto-generate Dockefiles and Kubernetes manifests.<\/p>\n<p>Draft advantages:<\/p>\n<ul>\n<li>The most user-friendly<\/li>\n<li>Very easy to setup and use<\/li>\n<li>Language packs for most programming languages can be used to create dockerfiles and Helm charts<\/li>\n<li>Minimal and lightweight<\/li>\n<li>Created by Microsoft\/Azure<\/li>\n<\/ul>\n<p>Draft disadvantages:<\/p>\n<ul>\n<li>Tied with the Helm package manager which is not used in all companies<\/li>\n<li>Very simplistic. It just packages docker images and deploys them to a cluster. If you want any additional features you need to look to the other two options.<\/li>\n<\/ul>\n<p>If you think that Draft is very basic, then Skaffold is much more flexible and can work as a mini CI\/CD solution for local deployments. Note however that Skaffold has a strong flavor of Google (Bazel) and Java technologies (Jib\/Gradle\/Maven).<\/p>\n<p>Skaffold advantages:<\/p>\n<ul>\n<li>Flexible workflows with testers\/deployers\/push strategies<\/li>\n<li>Can also tag and push Docker images with customizable tagging<\/li>\n<li>Built-in integrations with several builders\/deployers<\/li>\n<li>Can deploy with Helm or Kustomize of plain kubectl<\/li>\n<li>Support for build profiles<\/li>\n<li>Extensible<\/li>\n<li>Created by Google<\/li>\n<\/ul>\n<p>Skaffold disadvantages:<\/p>\n<ul>\n<li>Might be overkill for simple applications<\/li>\n<li>Complex setup (compared to Draft)<\/li>\n<\/ul>\n<p>Garden is the underdog and takes a much more interesting approach by offering more than local deployments in the form of an application graph that can track dependencies and re-deploy only what is changed.<\/p>\n<p>Garden.io advantages:<\/p>\n<ul>\n<li>Create a <a href=\"https:\/\/docs.garden.io\/basics\/stack-graph\">stack graph<\/a> that explicitly describes your application dependencies<\/li>\n<li>Support for testing and custom tasks allow for a flexible deployment model<\/li>\n<li>Specific support for <a href=\"https:\/\/www.openfaas.com\/\">OpenFaas<\/a><\/li>\n<li>Pushing and tagging of images<\/li>\n<\/ul>\n<p>Garden.io disadvantages:<\/p>\n<ul>\n<li>Company is a startup. Some advanced features are Paid\/Enterprise<\/li>\n<li>Might be overkill for simple applications<\/li>\n<li>More complex setup compared to Draft\/Skaffold; there is a learning curve for new concepts.<\/li>\n<\/ul>\n<p>How do you deploy on Kubernetes as a developer to your local cluster? Let us know in the comments below.<\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"13097\"\/>","protected":false},"excerpt":{"rendered":"<p>In the previous articles of this series, we have seen local Kubernetes installations designed specifically for developers. We have looked at all the major players such as Minikube, Docker-for-desktop, and Microk8s. However, we have conveniently left out the details on how you can use a local Kubernetes cluster as a developer to test a feature &hellip; <a href=\"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/\">Read more<\/a><\/p>\n","protected":false},"author":125,"featured_media":13098,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[3120,1657,1543,6],"tags":[14,15,24,44,53,68,3067,4110,4111],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Local Development on Kubernetes: Draft vs Skaffold vs Garden<\/title>\n<meta name=\"description\" content=\"In this article, we&#039;ll review three development tools that are helping developers to work with local Kubernetes clusters.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"The ultimate guide for local development on Kubernetes: Draft vs Skaffold vs Garden.io\" \/>\n<meta property=\"og:description\" content=\"In this article, we&#039;ll review three development tools that are helping developers to work with local Kubernetes clusters.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2019-04-18T10:51:54+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-06T15:46:51+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/blog-image-all.png\" \/>\n\t<meta property=\"og:image:width\" content=\"600\" \/>\n\t<meta property=\"og:image:height\" content=\"248\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@codefresh\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Contributor\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"21 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/blog-image-all.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/blog-image-all.png\",\"width\":600,\"height\":248},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/#webpage\",\"url\":\"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/\",\"name\":\"Local Development on Kubernetes: Draft vs Skaffold vs Garden\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/#primaryimage\"},\"datePublished\":\"2019-04-18T10:51:54+00:00\",\"dateModified\":\"2022-01-06T15:46:51+00:00\",\"description\":\"In this article, we'll review three development tools that are helping developers to work with local Kubernetes clusters.\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"The ultimate guide for local development on Kubernetes: Draft vs Skaffold vs Garden.io\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/268e5c2e4740502fae6d803783a16c75\"},\"headline\":\"The ultimate guide for local development on Kubernetes: Draft vs Skaffold vs Garden.io\",\"datePublished\":\"2019-04-18T10:51:54+00:00\",\"dateModified\":\"2022-01-06T15:46:51+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/#webpage\"},\"wordCount\":3569,\"commentCount\":10,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/blog-image-all.png\",\"keywords\":[\"docker\",\"continuous integration\",\"Containers\",\"Kubernetes\",\"CI\/CD\",\"continuous delivery\",\"draft\",\"skaffold\",\"garden\"],\"articleSection\":[\"Continuous Deployment\/Delivery\",\"Kubernetes Tutorials\",\"Continuous Integration\",\"How Tos\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/268e5c2e4740502fae6d803783a16c75\",\"name\":\"Contributor\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/26bd6dd87bf70f0c1a44721c8b3abbbd?s=96&d=blank&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/26bd6dd87bf70f0c1a44721c8b3abbbd?s=96&d=blank&r=g\",\"caption\":\"Contributor\"},\"url\":\"https:\/\/codefresh.io\/author\/contributor\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Local Development on Kubernetes: Draft vs Skaffold vs Garden","description":"In this article, we'll review three development tools that are helping developers to work with local Kubernetes clusters.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/","og_locale":"en_US","og_type":"article","og_title":"The ultimate guide for local development on Kubernetes: Draft vs Skaffold vs Garden.io","og_description":"In this article, we'll review three development tools that are helping developers to work with local Kubernetes clusters.","og_url":"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2019-04-18T10:51:54+00:00","article_modified_time":"2022-01-06T15:46:51+00:00","og_image":[{"width":600,"height":248,"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/blog-image-all.png","type":"image\/png"}],"twitter_card":"summary_large_image","twitter_creator":"@codefresh","twitter_site":"@codefresh","twitter_misc":{"Written by":"Contributor","Est. reading time":"21 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/blog-image-all.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/blog-image-all.png","width":600,"height":248},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/#webpage","url":"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/","name":"Local Development on Kubernetes: Draft vs Skaffold vs Garden","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/#primaryimage"},"datePublished":"2019-04-18T10:51:54+00:00","dateModified":"2022-01-06T15:46:51+00:00","description":"In this article, we'll review three development tools that are helping developers to work with local Kubernetes clusters.","breadcrumb":{"@id":"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"The ultimate guide for local development on Kubernetes: Draft vs Skaffold vs Garden.io"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/268e5c2e4740502fae6d803783a16c75"},"headline":"The ultimate guide for local development on Kubernetes: Draft vs Skaffold vs Garden.io","datePublished":"2019-04-18T10:51:54+00:00","dateModified":"2022-01-06T15:46:51+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/#webpage"},"wordCount":3569,"commentCount":10,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2019\/04\/blog-image-all.png","keywords":["docker","continuous integration","Containers","Kubernetes","CI\/CD","continuous delivery","draft","skaffold","garden"],"articleSection":["Continuous Deployment\/Delivery","Kubernetes Tutorials","Continuous Integration","How Tos"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/268e5c2e4740502fae6d803783a16c75","name":"Contributor","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/26bd6dd87bf70f0c1a44721c8b3abbbd?s=96&d=blank&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/26bd6dd87bf70f0c1a44721c8b3abbbd?s=96&d=blank&r=g","caption":"Contributor"},"url":"https:\/\/codefresh.io\/author\/contributor\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/13097"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/125"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=13097"}],"version-history":[{"count":1,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/13097\/revisions"}],"predecessor-version":[{"id":20938,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/13097\/revisions\/20938"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/13098"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=13097"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=13097"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=13097"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}