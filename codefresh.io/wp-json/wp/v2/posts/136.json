{"id":136,"date":"2016-04-05T06:38:37","date_gmt":"2016-04-05T06:38:37","guid":{"rendered":"https:\/\/codefresh.io\/?p=136"},"modified":"2022-02-11T21:26:14","modified_gmt":"2022-02-11T21:26:14","slug":"microservice-development-workflow-otto","status":"publish","type":"post","link":"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/","title":{"rendered":"Microservice Development Workflow with Otto"},"content":{"rendered":"<p><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/otto-wide.png\" rel=\"attachment wp-att-139\"><img class=\"aligncenter wp-image-139 size-full\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/otto-wide.png\" alt=\"otto-wide\" width=\"1882\" height=\"714\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/otto-wide.png 1882w, https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/otto-wide-300x114.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/otto-wide-768x291.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/otto-wide-1024x388.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/otto-wide-628x238.png 628w\" sizes=\"(max-width: 1882px) 100vw, 1882px\" \/><\/a><\/p>\n<p>If you\u2019re reading this, chances are you\u2019re already using containers in your development.<\/p>\n<p>Or maybe just looking\u00a0into it?<\/p>\n<p>Either way, you\u2019d like to learn about best practices for managing a Dockerized microservices development environment. That\u2019s why today we\u2019re going to look at Otto &#8211; the latest offering from Hashicorp to understand if and how it can help us container hackers to be more productive.<\/p>\n<p><span style=\"font-weight: 400;\">This will be the first in a series of posts in which\u00a0we will be looking at many of\u00a0the new tools trying to simplify microservice container-based development workflow. Others in this field include the likes of <\/span><a href=\"http:\/\/www.azk.io\/\"><span style=\"font-weight: 400;\">AZK.io<\/span><\/a><span style=\"font-weight: 400;\">, <\/span><a href=\"https:\/\/mantl.io\/\"><span style=\"font-weight: 400;\">mantl.io<\/span><\/a><span style=\"font-weight: 400;\">, <\/span><a href=\"https:\/\/desktop.nanobox.io\/\"><span style=\"font-weight: 400;\">Nanobox,<\/span><\/a><span style=\"font-weight: 400;\">\u00a0<\/span><span style=\"font-weight: 400;\"><a href=\"http:\/\/wercker.com\/\">wercker<\/a>, and of course, <a href=\"https:\/\/codefresh.io\">Codefresh<\/a>.<\/span><\/p>\n<p><!--more--><\/p>\n<p><span style=\"font-weight: 400;\">Container-based development changes the way we work, creating\u00a0new possibilities and presenting new challenges. Some things become significantly easier, but as always,\u00a0complexity doesn\u2019t disappear completely \u00a0&#8211; it just moves lower down the stack. To provide maximum productivity and streamline the delivery flow from development and into production, complexity has to get hidden and abstracted away. The challenge is always the same: how to keep things simple without compromising flexibility. Ease of use comes at the expense\u00a0of control.<\/span><\/p>\n<h2><strong>Some history:<\/strong><\/h2>\n<p><span style=\"font-weight: 400;\">Before Docker exploded on the technology scene, <a href=\"https:\/\/www.vagrantup.com\">Vagrant<\/a> was the ultimate tool for building self-contained virtualized development environments. It allowed building and running\u00a0software with all the needed tools and dependencies, without installing them on your development machine. Moreover it allowed you to closely match your production servers using exactly the same configuration management tools in development &#8211; be it <\/span><a href=\"https:\/\/www.chef.io\/chef\"><span style=\"font-weight: 400;\">Chef<\/span><\/a><span style=\"font-weight: 400;\">, <\/span><a href=\"https:\/\/puppetlabs.com\/\"><span style=\"font-weight: 400;\">Puppet<\/span><\/a><span style=\"font-weight: 400;\">, <\/span><a href=\"https:\/\/www.ansible.com\/\"><span style=\"font-weight: 400;\">Ansible<\/span><\/a><span style=\"font-weight: 400;\"> or <\/span><a href=\"http:\/\/saltstack.com\/community\/\"><span style=\"font-weight: 400;\">Salt<\/span><\/a><span style=\"font-weight: 400;\">.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Vagrant did all that the way a good tool should: providing sensible defaults and giving the user a relatively easy to use configuration language for tweaking the details.\u00a0<\/span><span style=\"font-weight: 400;\">Then Docker came out, bringing with it a new paradigm and quite a few questions for the die-hard Vagrant fans: Does Docker replace or complement Vagrant? Which one is a better option? And if the two are to play nicely together, what is the best way of combining them?<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Vagrant certainly showed readiness to cooperate &#8212; version 1.6 introduced a built-in Docker virtualization provider. On the other hand, the Docker ecosystem is ever-growing, with Docker Machine and Docker Compose now providing a relatively easy way of managing your development environment (considering you\u2019re only working with containers), comparable to what Vagrant does.<\/span><\/p>\n<p>&nbsp;<\/p>\n<h2><strong>Enter Otto<a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/ottologo.png\" rel=\"attachment wp-att-138\"><img class=\"size-medium wp-image-138 alignright\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/ottologo-300x300.png\" alt=\"ottologo\" width=\"300\" height=\"300\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/ottologo-300x300.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/ottologo-150x150.png 150w, https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/ottologo-768x768.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/ottologo-328x328.png 328w, https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/ottologo.png 800w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a>:<\/strong><\/h2>\n<p><span style=\"font-weight: 400;\">But this discussion is getting old as Hashicorp has recently started working on Otto, which is proclaimed to become the successor to Vagrant. The idea is exactly as discussed earlier: hiding the complexity of microservices architecture. Otto is focused on making the applications into first-class citizens, defining a usable application dependency management mechanism and bridging the gap between development and production by providing a unified deployment workflow. <\/span><\/p>\n<p><span style=\"font-weight: 400;\">As explained on the official site &#8211; Otto is:<\/span><\/p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Built for microservices<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Focused on deployment<\/span><\/li>\n<\/ul>\n<p><span style=\"font-weight: 400;\">And specifically relevant to\u00a0this post:<\/span><\/p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Supports Docker out-of-the-box:<\/span><\/li>\n<\/ul>\n<p><span style=\"font-weight: 400;\"> \u00a0\u00a0<a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/whaleA.png\" rel=\"attachment wp-att-140\"><img class=\"alignnone size-medium wp-image-140\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/whaleA-300x80.png\" alt=\"whaleA\" width=\"300\" height=\"80\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/whaleA-300x80.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/whaleA-768x204.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/whaleA-628x167.png 628w, https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/whaleA.png 971w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a>\u00a0<\/span><\/p>\n<p><span style=\"font-weight: 400;\"><em>\u201cOtto can use Docker to download and start dependencies for development to simplify \u00a0\u00a0microservices. Applications can be containerized automatically to make deployments easier without changing the developer workflow.\u201d<\/em> (from the otto site)<\/span><\/p>\n<p><span style=\"font-weight: 400;\">The official getting started guide shows how easy it is to get up and running with a Ruby application talking to a MongoDB backend. And guess what,\u00a0MongoDB\u00a0is actually getting executed in a container.<\/span><\/p>\n<p>Let\u2019s take a quick look at how Otto magic happens:<\/p>\n<p><span style=\"font-weight: 400;\">We\u2019ll be using a simple Express.js web app with MongoDB as our example. The code source can be found on GitHub: <\/span><a href=\"https:\/\/github.com\/codefresh-io\/otto-example\"><span style=\"font-weight: 400;\">https:\/\/github.com\/codefresh-io\/otto-example<\/span><\/a><span style=\"font-weight: 400;\">\u00a0<\/span><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">$git clone https:\/\/github.com\/codefresh-io\/otto-example.git\r\n<\/pre>\n<p><span style=\"font-weight: 400;\">The first step will obviously be downloading Otto. Get it here: <\/span><a href=\"https:\/\/www.ottoproject.io\/downloads.html\"><span style=\"font-weight: 400;\">https:\/\/www.ottoproject.io\/downloads.html<\/span><\/a><span style=\"font-weight: 400;\"> . There is a binary for Mac, Linux and Windows. (We\u2019ll be running our example on a Mac, so if you\u2019re on Windows &#8211; don\u2019t forget to switch your slashes.)<\/span><\/p>\n<p><span style=\"font-weight: 400;\">The download is a single compiled <\/span><b>go<\/b><span style=\"font-weight: 400;\"> binary, which makes installation dead simple: just drop it somewhere in your path and you\u2019re ready to run.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Otto is very good at automatically detecting our app type as long as we\u2019re using a standard configuration and don\u2019t need any external dependencies.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Once you have Otto installed, the initial configuration is as easy as changing into the application directory and running:<\/span><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">> otto compile<\/pre>\n<p>This is where Otto auto-detects our application type and defines all the needed defaults.<\/p>\n<p><span style=\"font-weight: 400;\">Looking at our application directory you\u2019ll notice a <\/span><b>.otto<\/b><span style=\"font-weight: 400;\"> folder &#8211; this is where Otto stores all its data, and an <\/span><b>.ottoid<\/b><span style=\"font-weight: 400;\"> file which is the unique identifier for your app. The .ottoid file nas to be checked into version control, while .otto should not, therefore we\u2019ve added it to our .gitignore. <\/span><\/p>\n<p><span style=\"font-weight: 400;\">The next step is actually creating our development environment. Back in our application directory we execute:<\/span><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">> otto dev<\/pre>\n<p><span style=\"font-weight: 400;\">This will take significantly longer in\u00a0the first execution, as this is the phase where Otto builds the virtual environment for our development. In fact, it uses Vagrant under the hood for provisioning local virtual infrastructure, saving the developer the hassle of writing Vagrant files manually. Everything is generated on the fly with VirtualBox being the default (and currently the only supported) virtualization provider. <\/span><\/p>\n<p><span style=\"font-weight: 400;\">Once <\/span><span style=\"font-weight: 400;\">\u2018otto dev\u2019<\/span><span style=\"font-weight: 400;\"> returns a success status we will find that our VirtualBox got populated with 4 new VMs:<\/span><\/p>\n<p><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/Screen-Shot-2016-02-21-at-6.19.25-PM.png\" rel=\"attachment wp-att-137\"><img class=\"size-full wp-image-137 alignleft\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/Screen-Shot-2016-02-21-at-6.19.25-PM.png\" alt=\"Screen Shot 2016-02-21 at 6.19.25 PM\" width=\"211\" height=\"284\" \/><\/a><\/p>\n<p><span style=\"font-weight: 400;\">You\u2019ll also notice that only one VM (the <strong>dev_default_<\/strong>&#8230;) is actually running, while the other 3 are turned off. \u00a0This is because Otto works in \u2018layers\u2019, i.e., it creates base VM images when executed for the first time and then clones those when needed, to make subsequent executions very fast. <\/span><\/p>\n<p><span style=\"font-weight: 400;\">(Be careful about removing these VMs. Otto still doesn\u2019t know how to recover if any of them go missing)<\/span><\/p>\n<p><span style=\"font-weight: 400;\">We\u2019ll also see that besides Vagrant, there\u2019s another Hashicorp tool under the hood,\u00a0<a href=\"https:\/\/www.consul.io\">Consul<\/a>, the smart service discovery and configuration system. One of the output lines when running <\/span><span style=\"font-weight: 400;\">\u2018otto compile\u2019<\/span><span style=\"font-weight: 400;\"> says:<\/span><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">==> default: [otto] Configuring consul service: ottofresh<\/pre>\n<p><span style=\"font-weight: 400;\">&#8211; so Otto already gives us service discovery with zero configuration! Nice one.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Ok, so we got 4 VMs and service discovery, but what about <strong>Docker<\/strong>? <\/span><\/p>\n<p><span style=\"font-weight: 400;\">As I already mentioned &#8211; MongoDB\u00a0is running inside a container. Let\u2019s look at how this is configured:<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Basic configuration file for each Otto application, or service, is the <strong>Appfile<\/strong>. This file is found at the root directory of our project and defines very little- our application name and one dependency that points to a subfolder .\/monogdb:<\/span><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"javascript\">application {\r\n  name = \"ottofresh\"\r\n  \u00a0dependency {\r\n  \u00a0\u00a0\u00a0source = \".\/mongodb\"\r\n  \u00a0}\r\n}<\/pre>\n<p><span style=\"font-weight: 400;\">Dependencies in Otto are other services that our main service depends on. Dependency source can also be a git repository url, but to make this example simpler and faster to run I\u2019ve put the dependency definition in a subdirectory. In fact this .\/monogdb directory only holds 2 files: <\/span><\/p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">an Appfile of its own<\/span><\/li>\n<\/ul>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">and an .ottoid file<\/span><\/li>\n<\/ul>\n<p><span style=\"font-weight: 400;\">The .ottoid is a globally unique ID that is used to track the application across multiple deploys. It is required for the application to be used as a dependency.<\/span> <span style=\"font-weight: 400;\">The <strong>Appfile<\/strong> looks as follows:<\/span><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"javascript\">application {\r\n  name = \"mongodb\"\r\n  type = \"docker-external\"\r\n}\r\ncustomization {\r\n  image = \"mongo:3.0\"\r\n  run_args = \"-p 27017:27017\"\r\n}<\/pre>\n<p><span style=\"font-weight: 400;\">This defines that the \u2018mongodb\u2019 application is of type \u2018docker-external\u2019 and is to be executed in a container based on \u2018mongo:3.0\u2019 image with port mapping 27017:27017.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">And this is exactly what happens.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">If we go back to<\/span><span style=\"font-weight: 400;\"> \u2018otto dev\u2019<\/span><span style=\"font-weight: 400;\"> command output we\u2019ll see that it also says:<\/span><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">==> default: Running provisioner: docker...<\/pre>\n<p><span style=\"font-weight: 400;\">    default: Installing Docker onto machine&#8230;<\/span><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">==> default: Starting Docker containers...\r\n==> default: -- Container: mongodb\r\n\u2026\r\n==> default: [otto] Configuring consul service: mongodb\r\n<\/pre>\n<p><span style=\"font-weight: 400;\">Running \u2018otto dev ssh\u2019 inside the application directory brings us into the dev_default VM where \u2018docker ps\u2019 shows us that MongoDB\u00a0is, in fact, running inside a container:<\/span><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">vagrant@precise64:\/vagrant$ docker ps\r\n<\/span><span style=\"font-weight: 400;\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                      NAMES\r\n9bc671e8cd68        mongo:3.0           \"\/entrypoint.sh mongo\"   5 minutes ago       Up 5 minutes        0.0.0.0:27017->27017\/tcp   mongodb<\/pre>\n<p><span style=\"font-weight: 400;\">And &#8211; we can query Consul REST API\u00a0to see all the services it has registered:<\/span><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">$ curl http:\/\/localhost:8500\/v1\/catalog\/services  {\"consul\":[],\"ottofresh\":[],\"mongodb\":[]}<\/pre>\n<p><span style=\"font-weight: 400;\">Success! External dependencies can be defined to run in containers and registered\/discovered in Consul with minimal configuration. <\/span><\/p>\n<p><span style=\"font-weight: 400;\">But what about our main application? What if we want to containerize it too? <\/span><\/p>\n<p><span style=\"font-weight: 400;\">After all, Otto promised us that \u201cApplications can be containerized automatically to make deployments easier without changing the developer workflow.\u201d <\/span><\/p>\n<p><span style=\"font-weight: 400;\">If you\u2019ve cloned my example github repo &#8211; you\u2019ll see that I\u2019ve put a Dockerfile in it. Frankly, I was somehow hoping that Otto would see the Dockerfile and realize I want to dockerize my app. This still doesn\u2019t happen automatically. Moreover,currently there\u2019s no support for running your main app in a container. The only supported Docker app type is \u2018docker-external\u2019 \u00a0&#8211; whereas a ready-made image is used to bring up a dependency service.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">There are already a few change requests opened for this on Otto github, but it\u2019s not clear when this is planned to be implemented.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">This overview wouldn\u2019t be complete without saying a few words about the way Otto extends the same workflow into production. Once we\u2019re done with development and local testing, we can execute the <\/span><span style=\"font-weight: 400;\">\u2018otto infra\u2019<\/span><span style=\"font-weight: 400;\"> command that prepares the virtual infrastructure to deploy it to. Currently the only infra type supported is AWS, whereas Otto creates a VPC, subnets, proper routing tables, an Internet gateway, and more. <\/span><span style=\"font-weight: 400;\"><br \/>\n<\/span><span style=\"font-weight: 400;\">All this is done with Terraform &#8211; Hashicorp\u2019s infrastructure configuration language\/tool.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">After the infra is set up we will run the \u00a0<\/span><span style=\"font-weight: 400;\">\u2018otto build\u2019<\/span><span style=\"font-weight: 400;\"> command that uses Packer to wrap up our application.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Again, this currently only supports packaging an AWS AMI, but as we know Packer can also build Docker images (though it doesn\u2019t use Dockerfiles for that) , so we can expect to see Docker build support in future Otto releases. In fact, it\u2019s even promised on their site:<\/span><\/p>\n<p><i><span style=\"font-weight: 400;\">\u201cIn the very near future, the build step will build a container that is deployed using <\/span><\/i><a href=\"https:\/\/www.nomadproject.io\/\"><i><span style=\"font-weight: 400;\">Nomad<\/span><\/i><\/a><i><span style=\"font-weight: 400;\">.<\/span><\/i><\/p>\n<p><i><span style=\"font-weight: 400;\">When this change comes, the build and deploy steps should become much faster, creating a much tighter feedback loop to deploying applications.\u201d<\/span><\/i><\/p>\n<p><span style=\"font-weight: 400;\">Once our machine image is ready we type <\/span><span style=\"font-weight: 400;\">\u2018otto deploy\u2019<\/span><span style=\"font-weight: 400;\"> to deploy the newly built image to our infrastructure and voila &#8211; our service is up there in the cloud!<\/span><\/p>\n<h2><strong>Summary:<\/strong><\/h2>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Otto provides quite a bit of magic, using all the other great tools from Hashicorp we\u2019ve learned to use and love in the last years.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Otto does the right thing: letting developers focus on applications and not on the infrastructure they run on. <\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Otto is great when you\u2019re doing things in a standard way, but it looks like it may be hard to tweak it to do something less mainstream, as all the Vagrant files, Packer and Terraform configs are getting generated automatically.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Otto does provide great support for running dependency services in Docker containers based on ready-made images. <\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">As of now, it still doesn\u2019t provide a way of building and testing a Docker image for the main application. But it looks like support for this is coming soon, so Otto is definitely a project to watch, based on Hashicorp\u2019s impressive record of building great devops tools.<\/span><\/li>\n<\/ul>\n<p><b>Make sure to subscribe to our blog<\/b><span style=\"font-weight: 400;\"> &#8211; in the following posts we will compare Otto to\u00a0<\/span><b>additional projects<\/b><span style=\"font-weight: 400;\"> focused on the same goal of <\/span><b>making microservices development and deployment easy and efficient<\/b><span style=\"font-weight: 400;\">.<\/span><\/p>\n<p>&nbsp;<\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"136\"\/>","protected":false},"excerpt":{"rendered":"<p>If you\u2019re reading this, chances are you\u2019re already using containers in your development. Or maybe just looking\u00a0into it? Either way, you\u2019d like to learn about best practices for managing a Dockerized microservices development environment. That\u2019s why today we\u2019re going to look at Otto &#8211; the latest offering from Hashicorp to understand if and how it &hellip; <a href=\"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/\">Read more<\/a><\/p>\n","protected":false},"author":9,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[8],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Microservice Development Workflow with Otto | Codefresh<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Microservice Development Workflow with Otto\" \/>\n<meta property=\"og:description\" content=\"If you\u2019re reading this, chances are you\u2019re already using containers in your development. Or maybe just looking\u00a0into it? Either way, you\u2019d like to learn about best practices for managing a Dockerized microservices development environment. That\u2019s why today we\u2019re going to look at Otto &#8211; the latest offering from Hashicorp to understand if and how it &hellip; Read more\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2016-04-05T06:38:37+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-02-11T21:26:14+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/otto-wide.png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@antweiss\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Anton Weiss\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"10 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/otto-wide.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/otto-wide.png\",\"width\":1882,\"height\":714},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/#webpage\",\"url\":\"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/\",\"name\":\"Microservice Development Workflow with Otto | Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/#primaryimage\"},\"datePublished\":\"2016-04-05T06:38:37+00:00\",\"dateModified\":\"2022-02-11T21:26:14+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Microservice Development Workflow with Otto\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/93d9834241a4b1b862a21e1d9a42a39f\"},\"headline\":\"Microservice Development Workflow with Otto\",\"datePublished\":\"2016-04-05T06:38:37+00:00\",\"dateModified\":\"2022-02-11T21:26:14+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/#webpage\"},\"wordCount\":1823,\"commentCount\":2,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/otto-wide.png\",\"articleSection\":[\"Docker Tutorials\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/93d9834241a4b1b862a21e1d9a42a39f\",\"name\":\"Anton Weiss\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/74279e1c79e1997c40057ee2c54a6454?s=96&d=blank&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/74279e1c79e1997c40057ee2c54a6454?s=96&d=blank&r=g\",\"caption\":\"Anton Weiss\"},\"description\":\"Ant(on) Weiss is a DevOps Evangelist and Enabler. He's been architecting software delivery processes at large and small companies for the last 15 years. Today he's the CEO and Principal Consultant at Otomato. When not evangelising for Codefresh, he's deeply involved with technical training and public speaking.\",\"sameAs\":[\"http:\/\/antweiss.com\",\"https:\/\/twitter.com\/antweiss\"],\"url\":\"https:\/\/codefresh.io\/author\/anton\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Microservice Development Workflow with Otto | Codefresh","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/","og_locale":"en_US","og_type":"article","og_title":"Microservice Development Workflow with Otto","og_description":"If you\u2019re reading this, chances are you\u2019re already using containers in your development. Or maybe just looking\u00a0into it? Either way, you\u2019d like to learn about best practices for managing a Dockerized microservices development environment. That\u2019s why today we\u2019re going to look at Otto &#8211; the latest offering from Hashicorp to understand if and how it &hellip; Read more","og_url":"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2016-04-05T06:38:37+00:00","article_modified_time":"2022-02-11T21:26:14+00:00","og_image":[{"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/otto-wide.png"}],"twitter_card":"summary_large_image","twitter_creator":"@antweiss","twitter_site":"@codefresh","twitter_misc":{"Written by":"Anton Weiss","Est. reading time":"10 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/otto-wide.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/otto-wide.png","width":1882,"height":714},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/#webpage","url":"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/","name":"Microservice Development Workflow with Otto | Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/#primaryimage"},"datePublished":"2016-04-05T06:38:37+00:00","dateModified":"2022-02-11T21:26:14+00:00","breadcrumb":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Microservice Development Workflow with Otto"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/93d9834241a4b1b862a21e1d9a42a39f"},"headline":"Microservice Development Workflow with Otto","datePublished":"2016-04-05T06:38:37+00:00","dateModified":"2022-02-11T21:26:14+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/#webpage"},"wordCount":1823,"commentCount":2,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/03\/otto-wide.png","articleSection":["Docker Tutorials"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/docker-tutorial\/microservice-development-workflow-otto\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/93d9834241a4b1b862a21e1d9a42a39f","name":"Anton Weiss","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/74279e1c79e1997c40057ee2c54a6454?s=96&d=blank&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/74279e1c79e1997c40057ee2c54a6454?s=96&d=blank&r=g","caption":"Anton Weiss"},"description":"Ant(on) Weiss is a DevOps Evangelist and Enabler. He's been architecting software delivery processes at large and small companies for the last 15 years. Today he's the CEO and Principal Consultant at Otomato. When not evangelising for Codefresh, he's deeply involved with technical training and public speaking.","sameAs":["http:\/\/antweiss.com","https:\/\/twitter.com\/antweiss"],"url":"https:\/\/codefresh.io\/author\/anton\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/136"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/9"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=136"}],"version-history":[{"count":1,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/136\/revisions"}],"predecessor-version":[{"id":21482,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/136\/revisions\/21482"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=136"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=136"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=136"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}