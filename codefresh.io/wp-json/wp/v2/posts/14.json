{"id":14,"date":"2015-04-17T14:03:35","date_gmt":"2015-04-17T14:03:35","guid":{"rendered":"https:\/\/codefresh.io\/2015\/04\/17\/up-and-running-with-io-js-and-docker\/"},"modified":"2022-02-11T18:11:59","modified_gmt":"2022-02-11T18:11:59","slug":"up-and-running-with-io-js-and-docker","status":"publish","type":"post","link":"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/","title":{"rendered":"Up and running with io.js and Docker"},"content":{"rendered":"<p>This is a quick post for getting up and running with <a href=\"https:\/\/iojs.org\/en\/index.html\">io.js<\/a>\u00a0and a single, simple Dockerfile using Docker 1.6, which was <a href=\"http:\/\/blog.docker.com\/2015\/04\/docker-release-1-6\/\">just released<\/a>. It is not an exhaustive post on using either io.js or Docker.<\/p>\n<h2>Install Docker<\/h2>\n<p>Go get Docker and install it from <a href=\"http:\/\/docs.docker.com\/installation\/\">here<\/a>.<\/p>\n<p>Verify that Docker 1.6 is running:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">$ docker -v\r\nDocker version 1.6.0, build 4749651<\/pre>\n<h2>Get the iojs image<\/h2>\n<p>Now go get the official iojs image:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">$ docker pull iojs<\/pre>\n<p>This will download the latest <a href=\"https:\/\/registry.hub.docker.com\/_\/iojs\/\">iojs image<\/a> from the official iojs repo on Docker Hub.<\/p>\n<p>An image is used by Docker to launch a process in a container. An image is comprised of all the bits that provide an operating system environment for running a process. When the process runs, it runs in a &#8220;container&#8221; completely isolated from any other process as if it were running in its own machine.<\/p>\n<p>You can verify that the image has been downloaded successfully by entering:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">$ docker images\r\nREPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE\r\niojs latest 90f5055d3cce 9 days ago 700.6 MB<\/pre>\n<p>You can verify that no containers are currently running by entering:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">$ docker ps\r\nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES<\/pre>\n<p>(Note that the column header names wrap, and so do any container entries, based on the width of your terminal)<\/p>\n<p>If you have already been using Docker, you may see a few containers listed, but you shouldn&#8217;t see any with the image name &#8216;iojs&#8217; yet.<\/p>\n<h2>Run a container<\/h2>\n<p>The iojs image was built to run the iojs command if you don&#8217;t explicitly specify a different command to run. Like node, the iojs command creates a <a href=\"https:\/\/iojs.org\/api\/repl.html\">REPL<\/a> for entering JavaScript commands<\/p>\n<p>You can test it like this:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">$ docker run --rm -it iojs\r\n><\/pre>\n<p>The REPL just waits for you to enter JavaScript. You can enter <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">&lt;Ctrl-c&gt;<\/code>\u00a0twice to exit the REPL.<\/p>\n<p>What did we do? We told docker to start a container based on the iojs image. The default command for the iojs image is <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">iojs<\/code>, so it started a REPL and waited for JavaScript to be entered.<\/p>\n<p>The reason it waited is because of the <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">-it<\/code> options. The <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">i<\/code> option keeps STDIN open for the process, and the <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">t<\/code> option allocates a pseudo-TTY. The combination is what allows us to interact with the REPL as if we had started it directly in a terminal instead of inside of a container.<\/p>\n<p>When trying things out, you will create a lot of containers. It&#8217;s a good idea to use the <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">-rm<\/code> option to automatically delete the container when you stop it to keep things tidy.<\/p>\n<h4>Override the default command<\/h4>\n<p>When we tell Docker to start a container from the iojs image, we can explicitly provide a command to override the default one. The following will run bash instead of<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">$ docker run --rm -it iojs bash\r\nroot@2ee47e2148ec:\/#<\/pre>\n<p>This will put you at a bash prompt in the container. You can check the version of iojs you&#8217;re running:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\"># iojs -v\r\nv1.6.4<\/pre>\n<p>Since node is symlinked to iojs when iojs is installed, you can also just enter:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\"># node -v\r\nv1.6.4<\/pre>\n<p>As you can see, the current iojs image runs iojs v.1.6.4.<\/p>\n<p>The docker-iojs team tracks the latest <a href=\"https:\/\/iojs.org\/en\/index.html\">io.js<\/a> versions and updates the official iojs image for Docker as quickly as they can.<\/p>\n<p>The io.js team releases new versions fairly rapidly and the newest version is now 1.7.1. The docker-iojs team supports three different iojs images (explained later). They move pretty quickly to update the iojs Dockerfiles (used to build images) with a <a href=\"https:\/\/github.com\/iojs\/docker-iojs\/pull\/50\">pull request<\/a>. They then submit yet another <a href=\"https:\/\/github.com\/docker-library\/official-images\/pull\/664\">pull request<\/a> with the information necessary to update the official repo and make the new images publicly available. The latest version (1.7.1) should be available within the next day or so.<\/p>\n<h2>Using the <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">iojs:onbuild<\/code> image<\/h2>\n<p>The iojs image we used above is not the only image the docker-iojs team maintains. They also maintain a <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">slim<\/code> version (not recommended except under specific circumstances) and an <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">onbuild<\/code> version that makes building derivative images easier.<\/p>\n<p>The <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">onbuild<\/code> version is based on the plain <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">iojs<\/code> version used above, but it copies your node application to the container and then runs its. Creating a derivative of this image can be as simple as referencing it and specifying the port you want to expose.<\/p>\n<p>Here&#8217;s a simple example to illustrate. Create a demo directory.<\/p>\n<p>Create a <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">package.json<\/code> file with the following:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">{\r\n\"name\": \"simple-docker-iojs-demo\",\r\n\"version\": \"1.0.0\",\r\n\"scripts\": {\r\n\"start\": \"node app.js\"\r\n}\r\n}<\/pre>\n<p>Create <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">app.js<\/code> and just print something to the console to prove it works:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">console.log('hello world!');<\/pre>\n<p>Create a <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">Dockerfile<\/code>:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">FROM iojs:onbuild<\/pre>\n<p>Now create an image:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">$ docker build -t demo-app .\r\nSending build context to Docker daemon 4.096 kB\r\nSending build context to Docker daemon\r\nStep 0 : FROM iojs:onbuild\r\n# Executing 3 build triggers\r\nTrigger 0, COPY package.json \/usr\/src\/app\/\r\nStep 0 : COPY package.json \/usr\/src\/app\/\r\n---&gt; Using cache\r\nTrigger 1, RUN npm install\r\nStep 0 : RUN npm install\r\n---&gt; Using cache\r\nTrigger 2, COPY . \/usr\/src\/app\r\nStep 0 : COPY . \/usr\/src\/app\r\n---&gt; Using cache\r\n---&gt; 9aa71d87d65d\r\nSuccessfully built 9aa71d87d65d<\/pre>\n<p>Docker will create an image based on the Dockerfile in the current directory and name it <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">demo-app<\/code>. As part of creating the image, it ran instructions from the <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">onbuild<\/code> base image that we specified in our Dockerfile that included copying the contents of the current directory to <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">\/usr\/src\/app\/<\/code> and running <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">npm install<\/code>.<\/p>\n<p>You can see what the instructions look like <a href=\"https:\/\/github.com\/iojs\/docker-iojs\/blob\/master\/1.7\/onbuild\/Dockerfile\">here<\/a>.<\/p>\n<p>Now run <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">demo-app<\/code> in a container:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">$ docker run --rm demo-app\r\nnpm info it worked if it ends with ok\r\nnpm info using npm@2.7.5\r\nnpm info using node@v1.6.4\r\nnpm info prestart simple-docker-iojs-demo@1.0.0\r\nnpm info start simple-docker-iojs-demo@1.0.0\r\n\r\n> simple-docker-iojs-demo@1.0.0 start \/usr\/src\/app\r\n> node app.js\r\n\r\nhello world!\r\nnpm info poststart simple-docker-iojs-demo@1.0.0\r\nnpm info ok<\/pre>\n<p>The iojs app is trivial, but the mechanics of how this works is the same for more complicated examples. One thing you will probably want to do is export a port for accessing your node application, which we cover in the next section.<\/p>\n<h4>Pushing your image<\/h4>\n<p>If you are happy with your application at this point, you might want to push your image to Docker Hub. You will need to create an account on Docker Hub, then login from the command line:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">$ docker login<\/pre>\n<p>Only official images (such as iojs) can have simple names. To push your own image, you will need to change the name of the image. Instead of <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">demo-app<\/code>, you will need to create the image using your login name. Mine is <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">subfuzion<\/code> so my <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">docker build<\/code> and <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">docker push<\/code> commands would look like this:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">$ docker build -t subfuzion\/demo-app .\r\n...\r\n$ docker push subfuzion\/demo-app\r\n...<\/pre>\n<h3>Exposing a port for a server<\/h3>\n<p>Modify the demo to make it an express app. Install express:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">$ npm install --save express<\/pre>\n<p>Then edit <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">app.js<\/code>:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">'use strict'\r\nconst app = require('express')();\r\nconst port = process.env.PORT || 3000;\r\n\r\napp.use('\/', function(req, res) {\r\nres.json({ message: 'hello world' });\r\n});\r\n\r\napp.listen(port);\r\nconsole.log('listening on port ' + port);<\/pre>\n<p>And update <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">Dockerfile<\/code>:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">FROM iojs:onbuild\r\nexpose 3000<\/pre>\n<p>Rebuild the image:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">$ docker build -t demo-app .<\/pre>\n<p>Now we can run it, but we want to map port 3000 inside the container to a port we can access from our system. We&#8217;ll pick port 49100:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">$ docker run --rm -p 49100:3000 demo-app<\/pre>\n<p>Now we can access the app via port 49100, which will be mapped to port 3000 in the container.<\/p>\n<p>If you&#8217;re using boot2docker on a Mac, the port is actually mapped to the Docker host virtual machine. To determine the IP address, enter this at the command line:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">$ echo $(boot2docker ip)\r\n192.168.59.103<\/pre>\n<p>You should be able to test <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">http:\/\/192.168.59.103:49100\/<\/code> in your browser.<\/p>\n<p>The app looks for the environment variable PORT to be set, otherwise it defaults to 3000. We could specify an alternate port via the environment from the command line like this:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">$ docker run --rm -p 49100:8080 -e \"PORT=8080\" demo-app<\/pre>\n<p>You will still access the app using the external port 49100, but it is now mapped to port 8080, which is what the app is listening to since the environment variable PORT was set.<\/p>\n<h2>Next time<\/h2>\n<p>We will cover the networking aspects in a bit more detail, show how you can mount the source instead of copying during development, and begin to cover the topic of orchestration, starting with a simple mongo dependency.<\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"14\"\/>","protected":false},"excerpt":{"rendered":"<p>This is a quick post for getting up and running with io.js\u00a0and a single, simple Dockerfile using Docker 1.6, which was just released. It is not an exhaustive post on using either io.js or Docker. Install Docker Go get Docker and install it from here. Verify that Docker 1.6 is running: $ docker -v Docker &hellip; <a href=\"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/\">Read more<\/a><\/p>\n","protected":false},"author":5,"featured_media":93,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[8],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Up and running with io.js and Docker | Codefresh<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Up and running with io.js and Docker\" \/>\n<meta property=\"og:description\" content=\"This is a quick post for getting up and running with io.js\u00a0and a single, simple Dockerfile using Docker 1.6, which was just released. It is not an exhaustive post on using either io.js or Docker. Install Docker Go get Docker and install it from here. Verify that Docker 1.6 is running: $ docker -v Docker &hellip; Read more\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2015-04-17T14:03:35+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-02-11T18:11:59+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2015\/04\/io-docker.png\" \/>\n\t<meta property=\"og:image:width\" content=\"1600\" \/>\n\t<meta property=\"og:image:height\" content=\"500\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@razieltabib\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Raziel Tabib\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"7 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2015\/04\/io-docker.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2015\/04\/io-docker.png\",\"width\":1600,\"height\":500},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/#webpage\",\"url\":\"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/\",\"name\":\"Up and running with io.js and Docker | Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/#primaryimage\"},\"datePublished\":\"2015-04-17T14:03:35+00:00\",\"dateModified\":\"2022-02-11T18:11:59+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Up and running with io.js and Docker\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/7f1e186af5b21641f0f3fe5e8e4281c1\"},\"headline\":\"Up and running with io.js and Docker\",\"datePublished\":\"2015-04-17T14:03:35+00:00\",\"dateModified\":\"2022-02-11T18:11:59+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/#webpage\"},\"wordCount\":1078,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2015\/04\/io-docker.png\",\"articleSection\":[\"Docker Tutorials\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/7f1e186af5b21641f0f3fe5e8e4281c1\",\"name\":\"Raziel Tabib\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/dace30247c8ac4ddb9e90b0d20d382f1?s=96&d=blank&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/dace30247c8ac4ddb9e90b0d20d382f1?s=96&d=blank&r=g\",\"caption\":\"Raziel Tabib\"},\"description\":\"Co-Founder and CEO, Codefresh\",\"sameAs\":[\"https:\/\/twitter.com\/razieltabib\"],\"url\":\"https:\/\/codefresh.io\/author\/raziel-tabib\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Up and running with io.js and Docker | Codefresh","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/","og_locale":"en_US","og_type":"article","og_title":"Up and running with io.js and Docker","og_description":"This is a quick post for getting up and running with io.js\u00a0and a single, simple Dockerfile using Docker 1.6, which was just released. It is not an exhaustive post on using either io.js or Docker. Install Docker Go get Docker and install it from here. Verify that Docker 1.6 is running: $ docker -v Docker &hellip; Read more","og_url":"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2015-04-17T14:03:35+00:00","article_modified_time":"2022-02-11T18:11:59+00:00","og_image":[{"width":1600,"height":500,"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2015\/04\/io-docker.png","type":"image\/png"}],"twitter_card":"summary_large_image","twitter_creator":"@razieltabib","twitter_site":"@codefresh","twitter_misc":{"Written by":"Raziel Tabib","Est. reading time":"7 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2015\/04\/io-docker.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2015\/04\/io-docker.png","width":1600,"height":500},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/#webpage","url":"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/","name":"Up and running with io.js and Docker | Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/#primaryimage"},"datePublished":"2015-04-17T14:03:35+00:00","dateModified":"2022-02-11T18:11:59+00:00","breadcrumb":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Up and running with io.js and Docker"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/7f1e186af5b21641f0f3fe5e8e4281c1"},"headline":"Up and running with io.js and Docker","datePublished":"2015-04-17T14:03:35+00:00","dateModified":"2022-02-11T18:11:59+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/#webpage"},"wordCount":1078,"commentCount":0,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2015\/04\/io-docker.png","articleSection":["Docker Tutorials"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/docker-tutorial\/up-and-running-with-io-js-and-docker\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/7f1e186af5b21641f0f3fe5e8e4281c1","name":"Raziel Tabib","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/dace30247c8ac4ddb9e90b0d20d382f1?s=96&d=blank&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/dace30247c8ac4ddb9e90b0d20d382f1?s=96&d=blank&r=g","caption":"Raziel Tabib"},"description":"Co-Founder and CEO, Codefresh","sameAs":["https:\/\/twitter.com\/razieltabib"],"url":"https:\/\/codefresh.io\/author\/raziel-tabib\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/14"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/5"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=14"}],"version-history":[{"count":4,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/14\/revisions"}],"predecessor-version":[{"id":21472,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/14\/revisions\/21472"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/93"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=14"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=14"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=14"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}