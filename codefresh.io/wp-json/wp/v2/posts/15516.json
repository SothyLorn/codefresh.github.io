{"id":15516,"date":"2020-04-27T03:03:02","date_gmt":"2020-04-27T11:03:02","guid":{"rendered":"http:\/\/codefresh.io\/?p=15516"},"modified":"2021-12-07T04:09:15","modified_gmt":"2021-12-07T04:09:15","slug":"infrequent-deployments-release-trains-and-lengthy-sprints","status":"publish","type":"post","link":"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/","title":{"rendered":"The Pain of Infrequent Deployments, Release Trains and Lengthy Sprints"},"content":{"rendered":"<p>One of the most critical metrics when it comes to the software delivery process is deployment frequency, which measures how often releases are happening in production. While in theory all organizations should strive to deploy as often as possible, in practice the benefits for frequent deployments are often overlooked or buried under endless technical debates.<\/p>\n<p>In this article we will turn things around a bit. Instead of talking about the benefits of frequent deployments we will focus on the pains of NOT deploying as often as possible. Deploying monthly or trying to deploy only when an arbitrary day arrives (often the end of a sprint or a \u201crelease train\u201d) is a practice associated with several pains and issues which unfortunately most people take for granted or think that this is the way software is supposed to be released.<\/p>\n<h2>The dark ages: Deploying every month or few months (release trains)<\/h2>\n<p>This is the traditional way of shipping software and is followed even today by several companies who are either conservative on adopting new technologies, or are simply accustomed to the pains of infrequent releases. Some illustrative points that reveal your organization is still in the dark ages are the following:<\/p>\n<ul>\n<li>Your organization deploys to production every 1-3 months<\/li>\n<li>Deployments are big-bang events where multiple teams are involved<\/li>\n<li>Code changes must pass from multiple rounds of approval<\/li>\n<li>There are extensive \u201ccode freeze periods\u201d or critical dates when \u201ccutting a release\u201d<\/li>\n<li>Several departments work overtime during a release and this is considered normal<\/li>\n<li>Production Rollbacks are lengthy and complex processes<\/li>\n<li>Your internal Wiki has dedicated pages with checklists for deployments<\/li>\n<li>Test and staging environments are static and pre-booked for specific teams<\/li>\n<li>There are well defined hand-off periods between developers, testers and system administrators which delay the deployment process even further<\/li>\n<\/ul>\n<p>While organizations that deploy like this might look disciplined and cautious to the outside observer, the sad truth is that most people have roller coaster feelings in the course of a software release and this makes the whole process very stressful.<\/p>\n<figure id=\"attachment_15519\" aria-describedby=\"caption-attachment-15519\" style=\"width: 1024px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/release-trains.png\"><img class=\"size-full wp-image-15519\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/release-trains.png\" alt=\"\" width=\"1024\" height=\"511\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/release-trains.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/release-trains-300x150.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/release-trains-768x383.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/release-trains-20x10.png 20w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/a><figcaption id=\"caption-attachment-15519\" class=\"wp-caption-text\">Infrequent releases cause overtime<\/figcaption><\/figure>\n<p>The start of a release train\/cycle\/sprint starts with enthusiasm and great anticipation by all teams. Teams and their project\/product managers are planning new features and making promises regarding the delivery date. Developers start implementation confident that this release will be better than the previous one. However, once teams hit the time period one or two weeks before the deadline of merging\/code freeze, several discouraging patterns emerge:<\/p>\n<ol>\n<li>A feature is pushed to the next release train because there is simply not enough time to implement\/test\/integrate it. This often results in various features on hold for several more iterations, leaving them in multiple different testing stages<\/li>\n<li>A feature is deemed \u201cimportant\u201d enough and MUST be part of the release train. Developers and particularly testers work overtime (often cutting corners) to get it released into production.<\/li>\n<\/ol>\n<p>This paradigm has three major disadvantages. First of all it makes all production releases a stressful event where people are pressed to deliver a specific feature for no particular reason other than the fact that a delivery date was \u201cpromised\u201d in the beginning of the release train.<\/p>\n<p>While most organizations like to think that the dates of releases are important milestones and have to be religiously followed, in practice the decision regarding a specific date was taken in a completely different time period (often months before) with insufficient information of the risks and effort associated with a feature.<\/p>\n<p>But the biggest disadvantage (and the one is that is most damaging to the moral of all teams) is the self-fulfilling prophecy of bad deployments.<\/p>\n<figure id=\"attachment_15521\" aria-describedby=\"caption-attachment-15521\" style=\"width: 1024px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/cycle.png\"><img class=\"size-full wp-image-15521\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/cycle.png\" alt=\"\" width=\"1024\" height=\"797\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/cycle.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/cycle-300x233.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/cycle-768x598.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/cycle-20x16.png 20w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/a><figcaption id=\"caption-attachment-15521\" class=\"wp-caption-text\">The vicious circle of infrequent deployments<\/figcaption><\/figure>\n<p>This is an endless cycle:<\/p>\n<ol>\n<li>Releases happen very infrequently<\/li>\n<li>When they do happen several things can go wrong (often caused by the differences between the production environment versus the staging environments)<\/li>\n<li>The idea that production deployments should happen infrequently is further reinforced by the bad experience of past failed releases<\/li>\n<li>More manual checks and approval steps are added that stand as roadblocks to frequent deployments<\/li>\n<\/ol>\n<p>This cycle is then evolving on its own and touches all aspects of the software delivery process in a negative way. Some of its manifestations are:<\/p>\n<ul>\n<li>Precaution: Developers do not get access to production machines. Actual result: developers don\u2019t know how production looks and cannot match their staging systems<\/li>\n<li>Precaution: Test environments are statically created and must be prepared in advance in order to \u201cmatch\u201d production. Actual result: developers are blocked until the test environment is ready pushing further back the feature implementation<\/li>\n<li>Precaution: Endless layers of approval steps that try to predict bad deployments. Actual result, development time is wasted on pull requests that are queued and by the time they reach production might need more fixes to match the current state<\/li>\n<li>Precaution: Big checklists with the steps needed for a production release have to be followed manually by developers\/operators. Actual result, the presence of manual steps needed for a release is a big reason why a release might fail<\/li>\n<li>Precaution: Developers, Testers and operators communicate strictly via ticket assignments. Actual result: teams are siloed and unaware of they can improve the workflow of their neighbor<\/li>\n<\/ul>\n<p>The last important point of infrequent releases is the fact that they set the pace for the whole organization and can limit your teams, especially in the presence of particularly experienced people.<\/p>\n<p>For example if your organization has decided that it will deploy to production every three months, then even if tomorrow you hire the best developers\/testers\/operators in your area and they are 4x as productive, you put an artificial brake on them and still force them to release every three months.<\/p>\n<p>This is a waste of human talent and in several cases some people will simply leave the company and try to find another one with less bureaucracy and more freedom on how deployments are performed.<\/p>\n<p>In summary, this deployment workflow is detrimental to the morale of your teams and makes every production release a very stressful event for all involved stakeholders.<\/p>\n<h2>The Renaissance: Deploying at the end of the sprint (weekly or biweekly)<\/h2>\n<p>The previous paradigm of monthly releases is now being challenged by the weekly (or biweekly) deployment scheduled. This is often seen as the agile evolution of a company and is based on short-lived feature branches and the dynamic creation of test environments as they are needed.<\/p>\n<p>The appearance of cloud services that can scale as needed, as well as the containerization of services along with their dependencies has boosted the popularity of this paradigm.<\/p>\n<p>You know that you work in such company if:<\/p>\n<ul>\n<li>Your organization deploys to production at the end of the sprint (every one or two weeks)<\/li>\n<li>Sprints are organized so that complex\/risky features do not occur in the same sprint<\/li>\n<li>Developers have self-serve access to test environments<\/li>\n<li>Rollbacks are performed manually but are relatively fast<\/li>\n<li>Cloud services are preferred when scalability and resource spikes can affect infrastructure provisioning (compared to static on-prem deployments)<\/li>\n<\/ul>\n<p>Obviously, releasing every week or every other week is a certain improvement over the dark ages delivery methods. Because releases are happening often, they need to be automated as much as possible. Certain approval steps might be used for the final deployment (i.e. just before it reaches production) but the bulk of the deployment process should be fully automated.<\/p>\n<p>Developers can create test environments on demand and deploy their features in an isolated manner. The test environments should be very close to the production one (but with much less resources assigned). This means that developers are not blocked by waiting for infrastructure to be created. Tickets between developers and operators are only for defects and not for the creation of test environments.<\/p>\n<p>The appearance of microservices as the new deployment unit, along with containers in the form of Docker and schedulers in the form of Kubernetes has further helped with isolation and easy deployment of web services moving away from the \u201cbig-bang\u201d releases of the past.<\/p>\n<p>The end-result is that developers are no longer blocked by stalled Pull Requests, lengthy deployment processes and too much bureaucracy with the creation of test environments. Also because the sprint period is much shorter, there isn\u2019t that much pressure on following release dates.<\/p>\n<p>Test engineers are the big winners here as well, because rather than facing a very stressful period (right before the end of the release train), they can instead split their workload during the whole sprint.<\/p>\n<p>But here is the catch!<\/p>\n<p>In order to reach this level of operational maturity several things must be in place for developers such as:<\/p>\n<ul>\n<li>A platform that offers self-service creation of test environments<\/li>\n<li>A way to see what is deployed on test environments and if it is passing required tests<\/li>\n<li>A way to clean-up test environments that are no longer used<\/li>\n<li>A way to easily spin up new project infrastructure when a new microservice is added to an existing application<\/li>\n<li>A way to manage build nodes in a dynamic environment covering the need of different developer teams (often using different programming languages and tools)<\/li>\n<li>Dashboards for monitoring build infrastructure, artifact management, cluster status, deployment metrics etc.<\/li>\n<\/ul>\n<p>In most cases system administrators\/operators are the ones who are tasked with all these prerequisites.<\/p>\n<p>This means that any company that wishes to deploy weekly and adopt microservices, will need to continuously invest on operator personnel simply to scale along with the developer teams. The end result is that while on the surface, developers are happy and feel productive, operators often feel like firefighters who must respond to incidents while still trying to create helper tools for the development teams.<\/p>\n<p>To understand if your organization suffers from this pattern you need to understand some internal metrics (which are not always measured officially) such as:<\/p>\n<ul>\n<li>How much time people spend managing build nodes (and especially upgrading their tools)<\/li>\n<li>How much time is spent on creating\/managing\/removing test environments<\/li>\n<li>How much time is needed to create a brand new project and all its associated infrastructure (git repository, pipelines, deployment environments, manifests, dbs etc)<\/li>\n<li>How easy is for developers to bring a completely new tool or programming language into an existing project<\/li>\n<\/ul>\n<p>In summary, deploying weekly or biweekly allows for developers to be productive, but requires a well oiled operator\/system team that needs to be disciplined and automate all repetitive infrastructure scenarios that will allow developers to keep the weekly schedule.<\/p>\n<h2>The Industrial Revolution: Deploying on demand (i.e. right now)<\/h2>\n<p>Achieving the weekly release cycle is an important feat on its own. A lot of companies unfortunately think that this is the end goal, without realizing that this is only a stepping stone to true deployment nirvana (i.e. deployment of any feature on demand where it is ready).<\/p>\n<p>Here are the characteristics of this approach<\/p>\n<ul>\n<li>There are no specific \u201csprint release\u201d dates. Individual features are deployed in production as they are finished (completely unrelated to any other features)<\/li>\n<li>Sprints are centered around business needs and do not have any real technical impact (i.e. the end of a sprint is nothing special)<\/li>\n<li>Failed deployments are detected before production rollouts (i.e. in canaries)<\/li>\n<li>Rollbacks are happening automatically<\/li>\n<li>Deployments and releases are not always happening at the same time (usage of feature toggles)<\/li>\n<li>Developers, testers and system administrators work in tandem for the duration of the sprint<\/li>\n<\/ul>\n<p>Sending a feature to production as soon as it is ready (on its own) is a very big advantage that cannot be overstated.<\/p>\n<p>First of all this means that features get to production right away giving value to the company as fast as possible. In the case of biweekly releases a feature that needs 3 weeks for implementation, will actually be deployed in 4 weeks (increasing its lead time by 33%).<\/p>\n<p>But the biggest advantage of deploying outside of sprints is the isolation of risky features. Let\u2019s say that a company is releasing bi-weekly and there are 3 \u201crisky\u201d features in the current sprint right now.<\/p>\n<p>Unfortunately these 3 features are of large size and each one will take the duration of the sprint to be implemented (i.e. 2 weeks). This means that even if your testing strategy is perfect and features A, B, and C are well tested on their own, in practice all of them will land in the mainline branch at the exact same time period.<\/p>\n<figure id=\"attachment_16646\" aria-describedby=\"caption-attachment-16646\" style=\"width: 1024px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/deploy-end-of-sprint.png\"><img class=\"size-full wp-image-16646\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/deploy-end-of-sprint.png\" alt=\"Releasing 3 risky features all at once\" width=\"1024\" height=\"449\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/deploy-end-of-sprint.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/deploy-end-of-sprint-300x132.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/deploy-end-of-sprint-768x337.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/deploy-end-of-sprint-20x9.png 20w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/a><figcaption id=\"caption-attachment-16646\" class=\"wp-caption-text\">Releasing 3 risky features all at once<\/figcaption><\/figure>\n<p>Any seasoned developer knows that just because features A, B and C work fine on their own, their late integration in the main branch can cause problems due to the way programming dependencies work. For example feature B and C might create significant issues when deployed together.<\/p>\n<p>If you only deploy at the end of sprints, this means that your development\/testing team has only a very small time frame (some hours) to evaluate the behavior of all features in production. And by then, it might be too late. For example if there is an issue when all 3 features are sent into production and feature C is reverted, there is no guarantee that features A and B will not have an issue on their own (after the removal of C).<\/p>\n<p>Now let&#8217;s take the same scenario of 3 features that each take 2 weeks to implement. If your company deploys on demand, you have the flexibility to split the risk of each feature by deploying them further apart from each other.<\/p>\n<figure id=\"attachment_16647\" aria-describedby=\"caption-attachment-16647\" style=\"width: 1024px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/deploy-on-demand.png\"><img class=\"size-large wp-image-16647\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/deploy-on-demand-1024x404.png\" alt=\"Releasing on-demand lowers the risk\" width=\"1024\" height=\"404\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/deploy-on-demand-1024x404.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/deploy-on-demand-300x118.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/deploy-on-demand-768x303.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/deploy-on-demand-20x8.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/deploy-on-demand.png 1132w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/a><figcaption id=\"caption-attachment-16647\" class=\"wp-caption-text\">Releasing on-demand lowers the risk<\/figcaption><\/figure>\n<p>The end result is the same (all 3 features are in the mainline branch) but the risk is now much lower. First of all each feature is merged incrementally so it is much easier to evaluate its impact on a release. Test engineers have a much easier time to test, because:<\/p>\n<ul>\n<li>They can test for the duration of the sprint rather than at the end of it<\/li>\n<li>They only need to evaluate each feature against the mainline, rather than all 3 features at once.<\/li>\n<\/ul>\n<p>It should also be evident that now you have days between each feature deployment (instead of hours) which means seeing the true impact is easier if you have more metrics on it without any other interference..<\/p>\n<p>In summary releasing in production as frequently as possible actually <strong>decreases <\/strong>the risk of failed deployments.<\/p>\n<p>Now you know what is our vision here at Codefresh! When you are ready to leave the dark ages behind and follow us through Renaissance to the industrial revolution (and beyond) <a href=\"https:\/\/codefresh.io\/request-a-demo\/\">we can tell you all about it<\/a>.<\/p>\n<p>Join us for Part 3 of our <a href=\"https:\/\/hs.codefresh.io\/the-pain-of-infrequent-deployments?utm_campaign=Pain%20of%20Infrequent%20Deployments&amp;utm_source=Blog%20Post&amp;utm_medium=Email%2FBlog%20Post&amp;utm_content=Register%20for%20Webinar\">3-Part Webinar series<\/a> on January 20, 2021, as we cover ending your deployment headaches, solving deployment challenges with Codefresh and Argo.<\/p>\n<p>Missed the first 2 sessions? Check them out now: <a href=\"https:\/\/bit.ly\/3y3ip4O\">Part 1<\/a> and <a href=\"https:\/\/bit.ly\/3ExuW2M\">Part 2<\/a><\/p>\n<p>Blog picture by <a href=\"https:\/\/unsplash.com\/photos\/40v45Lk3o8Y\">Unsplash<\/a>.<\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"15516\"\/>","protected":false},"excerpt":{"rendered":"<p>One of the most critical metrics when it comes to the software delivery process is deployment frequency, which measures how often releases are happening in production. While in theory all organizations should strive to deploy as often as possible, in practice the benefits for frequent deployments are often overlooked or buried under endless technical debates. &hellip; <a href=\"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/\">Read more<\/a><\/p>\n","protected":false},"author":62,"featured_media":20537,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[3120,1543],"tags":[15,52,53,68,5079,5080],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>The Pain of Infrequent Deployments, Release Trains and Lengthy Sprints | Codefresh<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"The Pain of Infrequent Deployments, Release Trains and Lengthy Sprints\" \/>\n<meta property=\"og:description\" content=\"One of the most critical metrics when it comes to the software delivery process is deployment frequency, which measures how often releases are happening in production. While in theory all organizations should strive to deploy as often as possible, in practice the benefits for frequent deployments are often overlooked or buried under endless technical debates. &hellip; Read more\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2020-04-27T11:03:02+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-12-07T04:09:15+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/cargo-train-jakub-nawrot-9v1cuPQ5hKM-unsplash-scaled.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"2560\" \/>\n\t<meta property=\"og:image:height\" content=\"1917\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@codefresh\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Kostis Kapelonis\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"12 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/cargo-train-jakub-nawrot-9v1cuPQ5hKM-unsplash-scaled.jpg\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/cargo-train-jakub-nawrot-9v1cuPQ5hKM-unsplash-scaled.jpg\",\"width\":2560,\"height\":1917},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/#webpage\",\"url\":\"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/\",\"name\":\"The Pain of Infrequent Deployments, Release Trains and Lengthy Sprints | Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/#primaryimage\"},\"datePublished\":\"2020-04-27T11:03:02+00:00\",\"dateModified\":\"2021-12-07T04:09:15+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"The Pain of Infrequent Deployments, Release Trains and Lengthy Sprints\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87\"},\"headline\":\"The Pain of Infrequent Deployments, Release Trains and Lengthy Sprints\",\"datePublished\":\"2020-04-27T11:03:02+00:00\",\"dateModified\":\"2021-12-07T04:09:15+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/#webpage\"},\"wordCount\":2493,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/cargo-train-jakub-nawrot-9v1cuPQ5hKM-unsplash-scaled.jpg\",\"keywords\":[\"continuous integration\",\"devops\",\"CI\/CD\",\"continuous delivery\",\"sprint\",\"release-train\"],\"articleSection\":[\"Continuous Deployment\/Delivery\",\"Continuous Integration\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87\",\"name\":\"Kostis Kapelonis\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png\",\"caption\":\"Kostis Kapelonis\"},\"description\":\"Kostis is a software engineer\/technical-writer dual class character. He lives and breathes automation, good testing practices and stress-free deployments with GitOps.\",\"url\":\"https:\/\/codefresh.io\/author\/kostiscodefresh-io\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"The Pain of Infrequent Deployments, Release Trains and Lengthy Sprints | Codefresh","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/","og_locale":"en_US","og_type":"article","og_title":"The Pain of Infrequent Deployments, Release Trains and Lengthy Sprints","og_description":"One of the most critical metrics when it comes to the software delivery process is deployment frequency, which measures how often releases are happening in production. While in theory all organizations should strive to deploy as often as possible, in practice the benefits for frequent deployments are often overlooked or buried under endless technical debates. &hellip; Read more","og_url":"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2020-04-27T11:03:02+00:00","article_modified_time":"2021-12-07T04:09:15+00:00","og_image":[{"width":2560,"height":1917,"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/cargo-train-jakub-nawrot-9v1cuPQ5hKM-unsplash-scaled.jpg","type":"image\/jpeg"}],"twitter_card":"summary_large_image","twitter_creator":"@codefresh","twitter_site":"@codefresh","twitter_misc":{"Written by":"Kostis Kapelonis","Est. reading time":"12 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/cargo-train-jakub-nawrot-9v1cuPQ5hKM-unsplash-scaled.jpg","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/cargo-train-jakub-nawrot-9v1cuPQ5hKM-unsplash-scaled.jpg","width":2560,"height":1917},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/#webpage","url":"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/","name":"The Pain of Infrequent Deployments, Release Trains and Lengthy Sprints | Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/#primaryimage"},"datePublished":"2020-04-27T11:03:02+00:00","dateModified":"2021-12-07T04:09:15+00:00","breadcrumb":{"@id":"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"The Pain of Infrequent Deployments, Release Trains and Lengthy Sprints"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87"},"headline":"The Pain of Infrequent Deployments, Release Trains and Lengthy Sprints","datePublished":"2020-04-27T11:03:02+00:00","dateModified":"2021-12-07T04:09:15+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/#webpage"},"wordCount":2493,"commentCount":0,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/04\/cargo-train-jakub-nawrot-9v1cuPQ5hKM-unsplash-scaled.jpg","keywords":["continuous integration","devops","CI\/CD","continuous delivery","sprint","release-train"],"articleSection":["Continuous Deployment\/Delivery","Continuous Integration"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/continuous-deployment\/infrequent-deployments-release-trains-and-lengthy-sprints\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87","name":"Kostis Kapelonis","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png","caption":"Kostis Kapelonis"},"description":"Kostis is a software engineer\/technical-writer dual class character. He lives and breathes automation, good testing practices and stress-free deployments with GitOps.","url":"https:\/\/codefresh.io\/author\/kostiscodefresh-io\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/15516"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/62"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=15516"}],"version-history":[{"count":5,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/15516\/revisions"}],"predecessor-version":[{"id":20717,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/15516\/revisions\/20717"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/20537"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=15516"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=15516"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=15516"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}