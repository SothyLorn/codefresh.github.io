{"id":1646,"date":"2017-02-23T19:32:21","date_gmt":"2017-02-23T19:32:21","guid":{"rendered":"https:\/\/codefresh.io\/?p=1646"},"modified":"2022-02-11T21:54:19","modified_gmt":"2022-02-11T21:54:19","slug":"kubernetes-snowboarding-everything-intro-kubernetes","status":"publish","type":"post","link":"https:\/\/codefresh.io\/docker-tutorial\/kubernetes-snowboarding-everything-intro-kubernetes\/","title":{"rendered":"Intro to Kubernetes, setting up your first app and why it&#8217;s just like snowboarding"},"content":{"rendered":"<p>So, as I was\u00a0further educating myself on the different orchestration solutions available (Kubernetes, Mesos, Swarm) I realized it would\u00a0be useful to share my experience and simplify (as much as it can be simplified) the path for whomever wants\u00a0to kick the tires and learn. Here&#8217;s a\u00a0good head start for working with Kubernetes AKA\u00a0K8s.<\/p>\n<p><strong>Prerequisite<\/strong> , You should already\u00a0by\u00a0familiar with the concept of containers\/docker, if you&#8217;re new to docker checkout\u00a0our <a href=\"https:\/\/codefresh.io\/container-academy\/\">container academy for an intro to Docker<\/a>.<\/p>\n<h2>So why snowboarding?<\/h2>\n<p>If you&#8217;ve tried snowboarding you probably remember the first few days on the slopes. Unlike skiing, where beginners\u00a0can usually avoid falling too often, snowboarders are more likely to plant their faces directly into snow at least a few dozens times their first day. \u00a0But this quite changes fast if you keep snowboarding\u00a0for at least one\u00a0or two more days. Once you get a few face plants under your belt\u00a0snowboarding becomes much easier, faster to learn and\u00a0above all fun! My experience with Kubernetes was very similar. The\u00a0first few days, I was\u00a0puzzled I wasn&#8217;t quite sure I understood\u00a0all the different components, how to use them, and even more why I need them. Then, as I started to play around I ended up not only understanding the moving parts but also realizing just why Kubernetes is so powerful.<\/p>\n<p>My intention in this blog is to make the very first few days with Kubernetes as easy as possible. Once you get the basics you can easily start\u00a0benefiting from a platform that allows you to deploy microservices smoothly,\u00a0scale your application, and rollout changes on the fly&#8230;.<\/p>\n<h2>What we will cover in this blog?<\/h2>\n<ul>\n<li>The\u00a03 basic\u00a0entities you must\u00a0know to run a simple micro-services application on kubernetes.<\/li>\n<li>Then, we will setup a local Kubernetes cluster that you can easily work with on your own Mac (most of these instructions will transfer to Linux or Windows).<\/li>\n<li>Lastly, we will run a simple app called Demochat built with\u00a0two microservices: a Node.js webserver and MongoDB.<\/li>\n<\/ul>\n<p>By the end of this blog, you will know how to run and scale an application that is composed of two services on Kubernetes.<\/p>\n<h2>Entities you must know<\/h2>\n<h3>Pods<\/h3>\n<p>A pod is the smallest deployable entity in Kubernetes\u00a0and it is important to understand the main principles around pods<\/p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Containers <strong>always<\/strong> run inside a Pod.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">A pod usually has 1 container but can have more.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Containers in the same pod are <strong>guaranteed<\/strong> to be located on the same machine and share resources<\/span><\/li>\n<\/ul>\n<p><strong>Why you might want to run more than one container in a pod<\/strong><\/p>\n<p>If you have containers that are tightly coupled and share a lot of I\/O then you may want them on the same machine and allow them to share resources.<\/p>\n<p><img class=\"aligncenter wp-image-1861 size-full\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/pod-diagram.png\" width=\"383\" height=\"285\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/pod-diagram.png 383w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/pod-diagram-300x223.png 300w\" sizes=\"(max-width: 383px) 100vw, 383px\" \/><\/p>\n<h3>Deployment<\/h3>\n<p>Here is when the fun begin, while you can obviously run Pods manually, monitor them, stop them etc&#8230; you don&#8217;t really want to do that. Deployment is a key object in Kubernetes that simplifies these operations for you. The simple way to think of Deployment is as an entity that manages Pods, either a single Pod or a replica set (set of instances <strong>of the same Pod configuration<\/strong>).<\/p>\n<p>It is also key to understand the relationship between Pods and Deployments. Say for example, your application has\u00a0two microservices: a web server and an api server. You will need\u00a0to define a Pod and Deployment <strong>for each<\/strong> microservice. In the Pod you will define which image to run and in the Deployment you will define how many instances of this Pod you will want to have at any given point\u00a0(for scalability, load balancing, etc&#8230;).<\/p>\n<p>The Deployment object will then<\/p>\n<ul>\n<li>Create the pod (or multiple instance of it) for your microservice<\/li>\n<li>Monitor these pods to make sure they are up and and healthy. If one fails, the Deployment object will create a new\u00a0pod to take it&#8217;s place.<\/li>\n<\/ul>\n<p>After the creation of the Deployment object. You can then<\/p>\n<ul>\n<li>Further scale up or down your pods.<\/li>\n<li>Rollout new changes to the pods (say you want to run a newer image of your microservice in your pods)<\/li>\n<li>Rollback changes\u00a0from pods<\/li>\n<\/ul>\n<p>In the illustration below you can see two deployment objects. One for each microservice (a web server and an api server). Each deployment object is managing 3 instances of the same pods. The pod instances can span more than one node (for scalability and reliability).<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p><img class=\"aligncenter wp-image-1862 size-full\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/deployment-1.png\" width=\"766\" height=\"368\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/deployment-1.png 766w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/deployment-1-300x144.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/deployment-1-628x302.png 628w\" sizes=\"(max-width: 766px) 100vw, 766px\" \/><\/p>\n<h3>Services<\/h3>\n<p>Services allow you to expose your microservices (that run in pods) both internally and externally between the other running pods.<\/p>\n<p>The service object exposes a consistent IP and port for the\u00a0microservice. \u00a0Any call to that IP will be rouited\u00a0to one of the microservice&#8217;s running Pods.<\/p>\n<p>The benefit of services is that while each and every pod is assigned an IP, Pods can be shut down (due to failure or rollout of new changes) and the pod&#8217;s ip will no longer be available. Meanwhile the service IP and port will not change and always accessible to the\u00a0other\u00a0pods in your cluster.<\/p>\n<p>By default, the DNS service of Kubernetes exposes the service name to all pods so they can refer to it simply by its name. We will see this in action in the \u00a0Demochat application.<\/p>\n<p><img class=\"aligncenter wp-image-1938 size-full\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/service.jpg\" width=\"911\" height=\"571\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/service.jpg 911w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/service-300x188.jpg 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/service-768x481.jpg 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/service-523x328.jpg 523w\" sizes=\"(max-width: 911px) 100vw, 911px\" \/><\/p>\n<h2>Setup Kubernetes locally<\/h2>\n<p>We will use <a href=\"https:\/\/kubernetes.io\/docs\/getting-started-guides\/minikube\/\">minikube<\/a> to work with kubernetes cluster locally.<\/p>\n<p><strong>Disclaimer<\/strong>: These guidelines have been tested on <strong>OS X<\/strong>. If you are following these on Windows it might be slightly different<\/p>\n<h3>Installation<\/h3>\n<p>There are the 3 component you need to have installed.<\/p>\n<ul>\n<li>Download &amp; Install the latest <a href=\"https:\/\/www.docker.com\/products\/docker-toolbox\">Docker Toolbox<\/a>\u00a0(this is not the same thing as just installing Docker)<\/li>\n<li>Install Kubectl (command line tool for kubernetes) by running the following<\/li>\n<\/ul>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">curl -Lo kubectl https:\/\/storage.googleapis.com\/kubernetes-release\/release\/v1.5.2\/bin\/darwin\/amd64\/kubectl &amp;&amp; chmod +x kubectl &amp;&amp; sudo mv kubectl \/usr\/local\/bin\/<\/pre>\n<ul>\n<li>Download &amp;\u00a0install <a href=\"https:\/\/www.virtualbox.org\/wiki\/Downloads\">VirtualBox<\/a>\u00a0for OS X. Direct link to the binaries\u00a0<a href=\"http:\/\/download.virtualbox.org\/virtualbox\/5.1.14\/VirtualBox-5.1.14-112924-OSX.dmg\">here<\/a>\u00a0(minikube relies on some of the drivers)<\/li>\n<li>Install Minikube<\/li>\n<\/ul>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">curl -Lo minikube https:\/\/storage.googleapis.com\/minikube\/releases\/v0.16.0\/minikube-darwin-amd64 &amp;&amp; chmod +x minikube &amp;&amp; sudo mv minikube \/usr\/local\/bin\/<\/pre>\n<p style=\"padding-left: 30px;\">you can find the latest installation guide for minikube <a href=\"https:\/\/github.com\/kubernetes\/minikube\/releases\">here<\/a><\/p>\n<h3>Test your environment<\/h3>\n<p>Start minikube (might take a min or two) by running &#8220;<em>minikube start&#8221;<\/em><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">bash-3.2$ minikube start\r\nStarting local Kubernetes cluster...\r\nKubectl is now configured to use the cluster.\r\nbash-3.2$<\/pre>\n<p>Run &#8220;<em>kubectl get nodes<\/em>&#8221; to test that minikube setup successfully<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">bash-3.2$ kubectl get nodes\r\nNAME       STATUS    AGE\r\nminikube   Ready     6d<\/pre>\n<p>To work directly with the Docker deamon on the minikube cluster run<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">bash-3.2$ eval $(minikube docker-env)\r\nbash-3.2$<\/pre>\n<h3>Running demochat on our local minikube cluster<\/h3>\n<p>The Demochat application requires two services to run<\/p>\n<ul>\n<li>MongoDB<\/li>\n<li>Demochat webserver that is implemented in Node and can be found <a href=\"https:\/\/github.com\/containers101\/demochat\">here<\/a><\/li>\n<\/ul>\n<p>First let&#8217;s pull the docker image<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">docker pull containers101\/demochat:2.0<\/pre>\n<p>and then<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">docker pull mongo:latest<\/pre>\n<p>Now, once we have the images locally let&#8217;s run a pod to deploy\u00a0the MongoDB service. While you can use the <em>kubectl create<\/em> command to create pods and deployment, in this example we will simply use the <em>kubectl run<\/em> command which will result in creating a pod and deployment to manage this pod.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">bash-3.2$ kubectl run mongo --image=mongo:latest --port=27017\r\ndeployment \"mongo\" created<\/pre>\n<p>This will\u00a0create a pod for our MongoDB, based on <em>mongo:latest<\/em> using port 27017\u00a0and add it to a deployment named &#8220;mongo&#8221;.<\/p>\n<p>Lets verify we have mongo running the way we want.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">bash-3.2$ kubectl get deployments\r\nNAME      DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE\r\nmongo     1         1         1            1           4m<\/pre>\n<p>Now lets see the running pods.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">bash-3.2$ kubectl get pods\r\nNAME                    READY     STATUS    RESTARTS   AGE\r\nmongo-261340442-44gg1   1\/1       Running   0          5m<\/pre>\n<p>Even though we have our service, it&#8217;s not yet exposed and available to other pods. For that we will use the <em>kubectl expose<\/em> command which will create a service.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">bash-3.2$ kubectl expose deployment mongo\r\nservice \"mongo\" exposed<\/pre>\n<p>We can view our running services<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">bash-3.2$ kubectl get services\r\nNAME         CLUSTER-IP   EXTERNAL-IP   PORT(S)     AGE\r\nkubernetes   10.0.0.1     &lt;none&gt;        443\/TCP     7d\r\nmongo        10.0.0.99    &lt;none&gt;        27017\/TCP   1m<\/pre>\n<p>By default the service is listening on the port\u00a0specified by our pod (in this case 27017). We could define it differently using the &#8211;port flag and then redirect to the pod&#8217;s port using &#8211;target-port but for now this is good and we will keep it simple \ud83d\ude09<\/p>\n<p>The mongo service we just created is now discoverable for any future pod by either using the alias &#8216;mongo&#8217; (this happens automatically with the\u00a0DNS plugin for Kubernetes which is on by default) or by using the environment variable that will be set for any future pod.<\/p>\n<p>In our example the demochat web server microservice will use the alias to connect to the mongo service.<\/p>\n<p>You can see it referenced\u00a0in our\u00a0<a href=\"https:\/\/github.com\/containers101\/demochat\/blob\/c7ffa861fd6323dc5497b4001c84cbfbe906b4cd\/defaults.yml\">code<\/a>\u00a0for\u00a0the demochat web server microservice<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">...\r\n33 database:\r\n34  uri: mongodb:\/\/mongo:27017\/hp_mongo\r\n...<\/pre>\n<p>Now let&#8217;s run a pod and deployment for the demochat web-server microservice. Here we&#8217;ll specify port 5000.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">bash-3.2$ kubectl run demochat --image=containers101\/demochat:2.0 --port=5000\r\ndeployment \"demochat\" created<\/pre>\n<p>We can use <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">kubectl get deployment<\/code>\u00a0 and <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">kubectl get pods<\/code>\u00a0 again to see that we\u00a0both our pods running.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">bash-3.2$ kubectl get deployment\r\nNAME       DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE\r\ndemochat   1         1         1            1           7s\r\nmongo      1         1         1            1           2h\r\nbash-3.2$ kubectl get pods\r\nNAME                       READY     STATUS    RESTARTS   AGE\r\ndemochat-586007959-mj0pp   1\/1       Running   0          12s\r\nmongo-261340442-44gg1      1\/1       Running   0          2h<\/pre>\n<p>Great! now we have our application running. The last step\u00a0is to expose our web server microservice and try it out. Run <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">kubectl expose --type=NodePort<\/code>\u00a0. The new flag\u00a0tells minikube to assign a port for each node we add and map it back.<\/p>\n<p><strong>Disclaimer<\/strong>: if you run this example on GKE (Google Container Engine) or on any cloud based Kubernetes and you want to expose it to the internet you will use <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">--type=LoadBalancer<\/code>\u00a0. However, in our example we are running it locally on our minikube cluster so we use the<em>\u00a0<code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">--type=NodePort<\/code>\u00a0 <\/em><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">bash-3.2$ kubectl expose deployment demochat --type=NodePort\r\nservice \"demochat\" exposed<\/pre>\n<p>Lets see all of our services our up and running<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">bash-3.2$ kubectl get services\r\nNAME         CLUSTER-IP   EXTERNAL-IP   PORT(S)          AGE\r\ndemochat     10.0.0.9     &lt;nodes&gt;       5000:31793\/TCP   9s\r\nkubernetes   10.0.0.1     &lt;none&gt;        443\/TCP          7d\r\nmongo        10.0.0.99    &lt;none&gt;        27017\/TCP        23m<\/pre>\n<p>Take note of the port assigned to demochat. In my example it&#8217;s been\u00a0assigned port 31793 but it will be different every time you run it. This port is\u00a0maps to port 5000 on\u00a0the pod (as we configured previously).<\/p>\n<p>To\u00a0access our application through the browser we need to figure out the minikube host IP and add the assigned port. \u00a0We will use the minikube ip command to retrieve the IP.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">bash-3.2$ minikube ip\r\n192.168.99.101<\/pre>\n<p>and now we can open a browser and put the IP and port \u00a0(in the example above it came up as 192.168.99.101:(the port set for your application).<\/p>\n<p><img class=\"aligncenter wp-image-1894\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/demochat-300x205.png\" width=\"500\" height=\"341\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/demochat-300x205.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/demochat-768x524.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/demochat-481x328.png 481w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/demochat.png 947w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>&nbsp;<\/p>\n<p>Super!\u00a0Our application is running!<\/p>\n<p>Lets practice one more thing before shutting it down.<\/p>\n<h3>Scaling a microservice<\/h3>\n<p>Lets see how we can scale our web server microservice and run replicas. We\u00a0will run two pods with our demochat web server microservice. To do that we will update the deployment and let it know it needs to keep two pods of this service\u00a0running. If for some reason one of the pods will fails, the deployment object will\u00a0automatically add a new one.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">bash-3.2$ kubectl scale --replicas=2 deployment\/demochat\r\ndeployment \"demochat\" scaled<\/pre>\n<p>Now lets run <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">kubectl get pods<\/code>\u00a0\u00a0again<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">bash-3.2$ kubectl get pods\r\nNAME                       READY     STATUS    RESTARTS   AGE\r\ndemochat-586007959-c0hkv   1\/1       Running   0          12s\r\ndemochat-586007959-mj0pp   1\/1       Running   0          2h\r\nmongo-261340442-44gg1      1\/1       Running   0          5h<\/pre>\n<p>We can see there are 2 pods of demochat running now. From now on, the demochat service we created will load balance the\u00a0calls\u00a0between these two pods.<\/p>\n<h4>Turning our application down<\/h4>\n<p>To shut down the application we can simply use the <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">kubectl delete<\/code>\u00a0\u00a0command<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">bash-3.2$ kubectl delete services,deployments demochat mongo\r\nservice \"demochat\" deleted\r\nservice \"mongo\" deleted\r\ndeployment \"demochat\" deleted\r\ndeployment \"mongo\" deleted<\/pre>\n<p>Now we can see that there are no mongo or demochat services, deployments or pods running. When you start using this in production you&#8217;ll use\u00a0a yaml file to save everything so you can put it up and pull it down. We&#8217;ll cover that in another blog post.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">bash-3.2$ kubectl get pods\r\nNo resources found.\r\nbash-3.2$ kubectl get deployments\r\nNo resources found.\r\nbash-3.2$ kubectl get services\r\nNAME         CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE\r\nkubernetes   10.0.0.1     &lt;none&gt;        443\/TCP   7d<\/pre>\n<p>Thats it for today, I&#8217;ll be writing a few more guides soon. I hope you found it useful. Please feel free to leave comments or questions here and I will try to answer.<\/p>\n<p>Here are some resources to learn more on these entities (keep in mind the Kubernetes documentation is constantly being\u00a0updated\/restructures\/moved so these links might need to get updated every now and then)<\/p>\n<h3>Additional resources<\/h3>\n<ul>\n<li>More about <a href=\"https:\/\/kubernetes.io\/docs\/user-guide\/deployments\/\">Deployments<\/a><\/li>\n<li>More about <a href=\"https:\/\/kubernetes.io\/docs\/user-guide\/pods\/\">Pods<\/a><\/li>\n<li>More about <a href=\"https:\/\/kubernetes.io\/docs\/user-guide\/services\/\">Services<\/a><\/li>\n<\/ul>\n<h3>Whats next?<\/h3>\n<p>In the next blog we will cover how to rollout and rollback\u00a0changes to microservices, manage secrets and more&#8230;<\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"1646\"\/>","protected":false},"excerpt":{"rendered":"<p>So, as I was\u00a0further educating myself on the different orchestration solutions available (Kubernetes, Mesos, Swarm) I realized it would\u00a0be useful to share my experience and simplify (as much as it can be simplified) the path for whomever wants\u00a0to kick the tires and learn. Here&#8217;s a\u00a0good head start for working with Kubernetes AKA\u00a0K8s. Prerequisite , You &hellip; <a href=\"https:\/\/codefresh.io\/docker-tutorial\/kubernetes-snowboarding-everything-intro-kubernetes\/\">Read more<\/a><\/p>\n","protected":false},"author":5,"featured_media":1915,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[8],"tags":[14,24,44],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Intro to Kubernetes, setting up your first app and why it&#039;s just like snowboarding | Codefresh<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Intro to Kubernetes, setting up your first app and why it&#039;s just like snowboarding\" \/>\n<meta property=\"og:description\" content=\"So, as I was\u00a0further educating myself on the different orchestration solutions available (Kubernetes, Mesos, Swarm) I realized it would\u00a0be useful to share my experience and simplify (as much as it can be simplified) the path for whomever wants\u00a0to kick the tires and learn. Here&#8217;s a\u00a0good head start for working with Kubernetes AKA\u00a0K8s. Prerequisite , You &hellip; Read more\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2017-02-23T19:32:21+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-02-11T21:54:19+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Intro-to-Kubernetes-blog-b-2.png\" \/>\n\t<meta property=\"og:image:width\" content=\"1534\" \/>\n\t<meta property=\"og:image:height\" content=\"401\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@razieltabib\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Raziel Tabib\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"11 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Intro-to-Kubernetes-blog-b-2.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Intro-to-Kubernetes-blog-b-2.png\",\"width\":1534,\"height\":401},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/#webpage\",\"url\":\"https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/\",\"name\":\"Intro to Kubernetes, setting up your first app and why it's just like snowboarding | Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/#primaryimage\"},\"datePublished\":\"2017-02-23T19:32:21+00:00\",\"dateModified\":\"2022-02-11T21:54:19+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Intro to Kubernetes, setting up your first app and why it&#8217;s just like snowboarding\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/7f1e186af5b21641f0f3fe5e8e4281c1\"},\"headline\":\"Intro to Kubernetes, setting up your first app and why it&#8217;s just like snowboarding\",\"datePublished\":\"2017-02-23T19:32:21+00:00\",\"dateModified\":\"2022-02-11T21:54:19+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/#webpage\"},\"wordCount\":1822,\"commentCount\":8,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Intro-to-Kubernetes-blog-b-2.png\",\"keywords\":[\"docker\",\"Containers\",\"Kubernetes\"],\"articleSection\":[\"Docker Tutorials\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/7f1e186af5b21641f0f3fe5e8e4281c1\",\"name\":\"Raziel Tabib\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/dace30247c8ac4ddb9e90b0d20d382f1?s=96&d=blank&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/dace30247c8ac4ddb9e90b0d20d382f1?s=96&d=blank&r=g\",\"caption\":\"Raziel Tabib\"},\"description\":\"Co-Founder and CEO, Codefresh\",\"sameAs\":[\"https:\/\/twitter.com\/razieltabib\"],\"url\":\"https:\/\/codefresh.io\/author\/raziel-tabib\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Intro to Kubernetes, setting up your first app and why it's just like snowboarding | Codefresh","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/","og_locale":"en_US","og_type":"article","og_title":"Intro to Kubernetes, setting up your first app and why it's just like snowboarding","og_description":"So, as I was\u00a0further educating myself on the different orchestration solutions available (Kubernetes, Mesos, Swarm) I realized it would\u00a0be useful to share my experience and simplify (as much as it can be simplified) the path for whomever wants\u00a0to kick the tires and learn. Here&#8217;s a\u00a0good head start for working with Kubernetes AKA\u00a0K8s. Prerequisite , You &hellip; Read more","og_url":"https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2017-02-23T19:32:21+00:00","article_modified_time":"2022-02-11T21:54:19+00:00","og_image":[{"width":1534,"height":401,"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Intro-to-Kubernetes-blog-b-2.png","type":"image\/png"}],"twitter_card":"summary_large_image","twitter_creator":"@razieltabib","twitter_site":"@codefresh","twitter_misc":{"Written by":"Raziel Tabib","Est. reading time":"11 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Intro-to-Kubernetes-blog-b-2.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Intro-to-Kubernetes-blog-b-2.png","width":1534,"height":401},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/#webpage","url":"https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/","name":"Intro to Kubernetes, setting up your first app and why it's just like snowboarding | Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/#primaryimage"},"datePublished":"2017-02-23T19:32:21+00:00","dateModified":"2022-02-11T21:54:19+00:00","breadcrumb":{"@id":"https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Intro to Kubernetes, setting up your first app and why it&#8217;s just like snowboarding"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/7f1e186af5b21641f0f3fe5e8e4281c1"},"headline":"Intro to Kubernetes, setting up your first app and why it&#8217;s just like snowboarding","datePublished":"2017-02-23T19:32:21+00:00","dateModified":"2022-02-11T21:54:19+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/#webpage"},"wordCount":1822,"commentCount":8,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Intro-to-Kubernetes-blog-b-2.png","keywords":["docker","Containers","Kubernetes"],"articleSection":["Docker Tutorials"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/kubernetes-guides\/intro-minikube-kubernetes-entities\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/7f1e186af5b21641f0f3fe5e8e4281c1","name":"Raziel Tabib","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/dace30247c8ac4ddb9e90b0d20d382f1?s=96&d=blank&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/dace30247c8ac4ddb9e90b0d20d382f1?s=96&d=blank&r=g","caption":"Raziel Tabib"},"description":"Co-Founder and CEO, Codefresh","sameAs":["https:\/\/twitter.com\/razieltabib"],"url":"https:\/\/codefresh.io\/author\/raziel-tabib\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/1646"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/5"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=1646"}],"version-history":[{"count":1,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/1646\/revisions"}],"predecessor-version":[{"id":21491,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/1646\/revisions\/21491"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/1915"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=1646"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=1646"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=1646"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}