{"id":1647,"date":"2017-02-13T18:17:51","date_gmt":"2017-02-13T18:17:51","guid":{"rendered":"https:\/\/codefresh.io\/?p=1647"},"modified":"2022-02-11T18:27:58","modified_gmt":"2022-02-11T18:27:58","slug":"guide-automate-tests-docker-microservice-driven-applications","status":"publish","type":"post","link":"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/","title":{"rendered":"[Guide] How to automate tests for Docker and microservice driven applications"},"content":{"rendered":"<p>In today&#8217;s post I&#8217;ll show you how easy it is to setup your first multi-service application and write tests against it. This guide should take 15-20 minutes to follow and you&#8217;ll have your first tests up and running. This will include<\/p>\n<ul>\n<li>Application setup using Docker Compose<\/li>\n<li>Setting up the tests to run every time a commit is made to our repo<\/li>\n<li>Sharing the environment with others to get user feedback<\/li>\n<\/ul>\n<p><!--more--><\/p>\n<h2>Setting up our demo application<\/h2>\n<p>We&#8217;re going to use an application called <a href=\"https:\/\/github.com\/codefreshdemo\/demochat\" target=\"_blank\" rel=\"noopener\">Demochat<\/a>\u00a0that provides a web based chat room. For the sake of time we&#8217;ll only have two services on our application but testing a <a href=\"https:\/\/github.com\/containers101\/voting-app\">5 service application<\/a> is just as easy. Demochat\u00a0uses a node.js frontend and a mongodb database. For this project we&#8217;re going to use Codefresh to setup the testing because it&#8217;s very straight forward. Even if you don&#8217;t plan on using Codefresh, this is still a great way to see how all these pieces work together.<\/p>\n<p>First, use your Github or Bitbucket account to\u00a0<a href=\"https:\/\/g.codefresh.io\/signup\">create a Codefresh account<\/a>, don&#8217;t worry it&#8217;s free. Answer the setup questions then click &#8220;Add Service&#8221;<\/p>\n<p><img class=\"aligncenter size-medium wp-image-1648\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Add-Docker-Service-300x233.png\" alt=\"\" width=\"300\" height=\"233\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Add-Docker-Service-300x233.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Add-Docker-Service-768x597.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Add-Docker-Service-1024x796.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Add-Docker-Service-422x328.png 422w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Add-Docker-Service.png 1152w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/p>\n<p>Click the &#8220;Add by URL&#8221; radio and paste in the Demochat repo,<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">https:\/\/github.com\/codefreshdemo\/demochat<\/pre>\n<p>Then, hit next and select &#8220;My repo has a Dockerfile&#8221; and click next, the path will be correct by default. It will look something like this:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">FROM node:0.10-slim\r\n\r\nRUN npm install -g mocha\r\n\r\nRUN npm install -g istanbul\r\n\r\nRUN npm install -g gulp\r\n\r\nRUN npm install -g debug\r\n\r\nCOPY .\/package.json \/src\/package.json\r\n\r\nRUN cd \/src &amp;&amp; npm install\r\n\r\nCOPY  .\/ \/src\r\n\r\nWORKDIR \/src\r\n\r\n#ENV DEBUG=*\r\n\r\nCMD [\"npm\", \"start\"]<\/pre>\n<p>Click &#8220;Create&#8221;, then &#8220;Build&#8221;. Congrats! Now, every time a\u00a0commit is made on the master branch to that repo it will automatically rebuild the service. If you want it to work off your commits, for the branch and add your fork.<\/p>\n<p>Remember our Node.js frontend can&#8217;t really do anything without Mongo so to finish\u00a0our app\u00a0click on &#8220;Compositions&#8221; and &#8220;Add Composition&#8221;.<\/p>\n<p><img class=\"aligncenter size-medium wp-image-1650\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Add-Docker-Composition-300x214.png\" alt=\"\" width=\"300\" height=\"214\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Add-Docker-Composition-300x214.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Add-Docker-Composition-768x548.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Add-Docker-Composition-1024x731.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Add-Docker-Composition-459x328.png 459w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Add-Docker-Composition.png 1392w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/p>\n<p>Name it &#8220;Demochat&#8221; and click &#8220;Add Service&#8221; and then select the service we just added &#8220;Demochat&#8221;.<br \/>\n<img class=\"aligncenter size-medium wp-image-1694\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Add-service-to-composition-300x169.png\" alt=\"\" width=\"300\" height=\"169\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Add-service-to-composition-300x169.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Add-service-to-composition-581x328.png 581w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Add-service-to-composition.png 661w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/p>\n<p>For this service, the last thing we need to do is add a port. Click the three dots next to the service name and select &#8220;Add Port&#8221;, set it to 5000.<\/p>\n<p><img class=\"aligncenter size-medium wp-image-1654\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Set-port-for-node-docker-300x297.png\" alt=\"\" width=\"300\" height=\"297\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Set-port-for-node-docker-300x297.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Set-port-for-node-docker-150x150.png 150w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Set-port-for-node-docker-768x761.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Set-port-for-node-docker-331x328.png 331w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Set-port-for-node-docker.png 866w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/p>\n<p>Now we&#8217;re ready to add our Mongo database. It uses a prebuilt image, click &#8220;Add Service&#8221; and type &#8220;mongo&#8221; into the Pre-built image field.\u00a0<img class=\"aligncenter size-medium wp-image-1653\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Mongo-Docker-Image-300x169.png\" alt=\"\" width=\"300\" height=\"169\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Mongo-Docker-Image-300x169.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Mongo-Docker-Image-768x434.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Mongo-Docker-Image-1024x578.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Mongo-Docker-Image-581x328.png 581w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Mongo-Docker-Image.png 1286w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/p>\n<p>On the right hand side you can see the composition file that&#8217;s been created. You could copy and paste this into a docker-compose.yml. It should look like this, feel free to edit it if you&#8217;d rather skip the GUI<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\">version: '2'\r\nservices:\r\n  demochat:\r\n    image: 'codefreshdemo\/demochat:master'\r\n    ports:\r\n      - 5000\r\n  mongo:\r\n    image: mongo<\/pre>\n<p>Finally we&#8217;re done, save it and click the little rocket looking icon to launch the app. We now have a fully running and testable application. The build should take around 45 seconds the first time and will give you a url where you can see the app in action.<\/p>\n<p><img class=\"aligncenter size-medium wp-image-1655\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Build-success-300x154.png\" alt=\"\" width=\"300\" height=\"154\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Build-success-300x154.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Build-success-768x395.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Build-success-1024x526.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Build-success-628x323.png 628w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Build-success.png 1900w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/p>\n<p><img class=\"aligncenter size-medium wp-image-1656\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Screen-Shot-2017-02-07-at-12.51.03-PM-300x191.png\" alt=\"\" width=\"300\" height=\"191\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Screen-Shot-2017-02-07-at-12.51.03-PM-300x191.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Screen-Shot-2017-02-07-at-12.51.03-PM-768x489.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Screen-Shot-2017-02-07-at-12.51.03-PM-1024x653.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Screen-Shot-2017-02-07-at-12.51.03-PM-515x328.png 515w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/p>\n<h2>Setting up tests for our\u00a0microservices<\/h2>\n<p>Your application is made up of two services, one Node.js and one Mongo. We can test an individual service or we can test them together. This gives us a lot of options for what and how we can test. Each of these tests will run locally to our container.<\/p>\n<p>Go back to the &#8220;Services&#8221; page and click on the little gear icon for your Demochat service. This will take you to the pipeline configuration where you can setup different tests. Under &#8220;Unit Test Script&#8221; add the following code<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">npm start &amp;\r\nnpm test\r\ncurl http:\/\/localhost:5000 \r\necho \"TEST PASSED\"\r\n<\/pre>\n<p>Npm start will get our application running so we can start testing it<\/p>\n<p>The npm test line will make sure we have all the needed packages and run the tests that come with each of those packages. Since this is a node application it will also run any tests we setup in the app\/tests folder, we&#8217;ll come back to this in a minute.<\/p>\n<p>The curl command is going to check to see if our application is running. If curl fails the tests script will also fail with whatever error code curl throws. You could grep certain text from the page too if you wanted to see certain output or write a simple bash script against it.<\/p>\n<p>If we tested this service in isolation, without the Mongo the application\u00a0won&#8217;t be running with the services it depends on. So check the box that says &#8220;Run tests with composition&#8221; and select the composition we made. Your whole\u00a0setup should look like this.<\/p>\n<p><img class=\"aligncenter size-medium wp-image-1720\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Adding-unit-tests-300x82.png\" alt=\"\" width=\"300\" height=\"82\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Adding-unit-tests-300x82.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Adding-unit-tests-768x210.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Adding-unit-tests-1024x280.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Adding-unit-tests-628x172.png 628w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Adding-unit-tests.png 1400w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/p>\n<p>This is the key to testing microservices, running\u00a0and testing them together.<\/p>\n<p>You can see how you could setup\u00a0arbitrary commands and code here to test your application. If this were a php app, you could do a\u00a0<span class=\"lang:default decode:true crayon-inline \">php myscript.php<\/span>\u00a0. Same for other apps. In this case, we&#8217;ve used npm&#8217;s native testing setup\u00a0to extend the tests. They could be executed here aswell.<\/p>\n<h4>More about\u00a0npm test<\/h4>\n<p>As I said, npm test will run\u00a0the tests that come with each\u00a0package as well as any tests you&#8217;ve setup in app\/tests.\u00a0In this app we have three scripts, feel free to check them out to see <a href=\"https:\/\/github.com\/codefreshdemo\/demochat\/tree\/master\/app\/tests\">what they do and how they do it<\/a>.<\/p>\n<p>Click build, and you&#8217;ll see how the composition is setup and tested. Down in the &#8220;Running Unit Tests&#8221; box you can see the different\u00a0messages of the tests running. If you go back and disable the composition and then try to build it the tests will fail because our Mongo service will not be present.<\/p>\n<h2>Why we test microservices together this way<\/h2>\n<p>When\u00a0people first started writing microservices there was a theory that you should be able to test them on their own but this hid that a microservice may seem to function by itself but fall down when put in the context of the application. Testing the microservice in the context of the entire composition gives you\u00a0a much more reliable measure of how well the microservice will work. In this example we only used a single composition for testing but we could add a Selenium service if we wanted to do some testing that way. There really is no better way to run <a href=\"https:\/\/codefresh.io\">Docker testing<\/a> that with Codefresh.<\/p>\n<p>Go write some tests, share your questions in the comments, and good luck.<\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"1647\"\/>","protected":false},"excerpt":{"rendered":"<p>In today&#8217;s post I&#8217;ll show you how easy it is to setup your first multi-service application and write tests against it. This guide should take 15-20 minutes to follow and you&#8217;ll have your first tests up and running. This will include Application setup using Docker Compose Setting up the tests to run every time a &hellip; <a href=\"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/\">Read more<\/a><\/p>\n","protected":false},"author":27,"featured_media":1853,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[8],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>[Guide] How to automate tests for Docker and microservice driven applications | Codefresh<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"[Guide] How to automate tests for Docker and microservice driven applications\" \/>\n<meta property=\"og:description\" content=\"In today&#8217;s post I&#8217;ll show you how easy it is to setup your first multi-service application and write tests against it. This guide should take 15-20 minutes to follow and you&#8217;ll have your first tests up and running. This will include Application setup using Docker Compose Setting up the tests to run every time a &hellip; Read more\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2017-02-13T18:17:51+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-02-11T18:27:58+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/docker-automation.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1192\" \/>\n\t<meta property=\"og:image:height\" content=\"449\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@todaywasawesome\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Dan Garfield\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/docker-automation.jpg\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/docker-automation.jpg\",\"width\":1192,\"height\":449},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/#webpage\",\"url\":\"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/\",\"name\":\"[Guide] How to automate tests for Docker and microservice driven applications | Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/#primaryimage\"},\"datePublished\":\"2017-02-13T18:17:51+00:00\",\"dateModified\":\"2022-02-11T18:27:58+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"[Guide] How to automate tests for Docker and microservice driven applications\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/17aca6389be0f81b999f1b138a0b44a4\"},\"headline\":\"[Guide] How to automate tests for Docker and microservice driven applications\",\"datePublished\":\"2017-02-13T18:17:51+00:00\",\"dateModified\":\"2022-02-11T18:27:58+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/#webpage\"},\"wordCount\":1009,\"commentCount\":3,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/docker-automation.jpg\",\"articleSection\":[\"Docker Tutorials\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/17aca6389be0f81b999f1b138a0b44a4\",\"name\":\"Dan Garfield\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/d4a38809809980ed49dc7e696a8e3938?s=96&d=blank&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/d4a38809809980ed49dc7e696a8e3938?s=96&d=blank&r=g\",\"caption\":\"Dan Garfield\"},\"description\":\"Dan is the Co-Founder and Chief Open Source Officer at Codefresh. His work in open source includes being an Argo Maintainer, and co-chair of the GitOps Working Group. As a technology leader with a background in full-stack engineering, evangelism, and communications, he led Codefresh's go-to-market strategy and now leads open source strategy. You can follow him at twitter.com\/todaywasawesome\",\"sameAs\":[\"https:\/\/twitter.com\/todaywasawesome\"],\"url\":\"https:\/\/codefresh.io\/author\/dang\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"[Guide] How to automate tests for Docker and microservice driven applications | Codefresh","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/","og_locale":"en_US","og_type":"article","og_title":"[Guide] How to automate tests for Docker and microservice driven applications","og_description":"In today&#8217;s post I&#8217;ll show you how easy it is to setup your first multi-service application and write tests against it. This guide should take 15-20 minutes to follow and you&#8217;ll have your first tests up and running. This will include Application setup using Docker Compose Setting up the tests to run every time a &hellip; Read more","og_url":"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2017-02-13T18:17:51+00:00","article_modified_time":"2022-02-11T18:27:58+00:00","og_image":[{"width":1192,"height":449,"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/docker-automation.jpg","type":"image\/jpeg"}],"twitter_card":"summary_large_image","twitter_creator":"@todaywasawesome","twitter_site":"@codefresh","twitter_misc":{"Written by":"Dan Garfield","Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/docker-automation.jpg","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/docker-automation.jpg","width":1192,"height":449},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/#webpage","url":"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/","name":"[Guide] How to automate tests for Docker and microservice driven applications | Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/#primaryimage"},"datePublished":"2017-02-13T18:17:51+00:00","dateModified":"2022-02-11T18:27:58+00:00","breadcrumb":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"[Guide] How to automate tests for Docker and microservice driven applications"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/17aca6389be0f81b999f1b138a0b44a4"},"headline":"[Guide] How to automate tests for Docker and microservice driven applications","datePublished":"2017-02-13T18:17:51+00:00","dateModified":"2022-02-11T18:27:58+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/#webpage"},"wordCount":1009,"commentCount":3,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/docker-automation.jpg","articleSection":["Docker Tutorials"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/docker-tutorial\/guide-automate-tests-docker-microservice-driven-applications\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/17aca6389be0f81b999f1b138a0b44a4","name":"Dan Garfield","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/d4a38809809980ed49dc7e696a8e3938?s=96&d=blank&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/d4a38809809980ed49dc7e696a8e3938?s=96&d=blank&r=g","caption":"Dan Garfield"},"description":"Dan is the Co-Founder and Chief Open Source Officer at Codefresh. His work in open source includes being an Argo Maintainer, and co-chair of the GitOps Working Group. As a technology leader with a background in full-stack engineering, evangelism, and communications, he led Codefresh's go-to-market strategy and now leads open source strategy. You can follow him at twitter.com\/todaywasawesome","sameAs":["https:\/\/twitter.com\/todaywasawesome"],"url":"https:\/\/codefresh.io\/author\/dang\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/1647"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/27"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=1647"}],"version-history":[{"count":1,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/1647\/revisions"}],"predecessor-version":[{"id":21475,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/1647\/revisions\/21475"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/1853"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=1647"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=1647"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=1647"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}