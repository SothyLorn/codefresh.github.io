{"id":16482,"date":"2020-07-05T20:21:17","date_gmt":"2020-07-06T04:21:17","guid":{"rendered":"http:\/\/live-codefresh.pantheonsite.io\/?p=16482"},"modified":"2022-01-06T15:51:24","modified_gmt":"2022-01-06T15:51:24","slug":"run-apply-codefresh-helmfile-step-step-guide","status":"publish","type":"post","link":"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/","title":{"rendered":"How to Run and Apply a Codefresh Helmfile: a Step-by-Step Guide"},"content":{"rendered":"<p><strong><em>Editors note: We did a webinar on this very topic. Scroll to the bottom of this post or <a href=\"https:\/\/codefresh.io\/events\/simplify-code-helmfile\/\">click here<\/a> to view the webinar.<\/em><\/strong><\/p>\n<p>If you\u2019re looking to deploy your services to Kubernetes, Helm works great. However, once you start deploying to multiple environments, developing code as a team, or automating in a CI\/CD pipeline, you start to run into limitations with Helm.<\/p>\n<p>Codefresh Pipelines using Helmfile has the power and flexibility to address these issues and many others. It\u2019s also one of the best ways to organize your Helm code and values.<\/p>\n<p>The nice thing is that Helmfile just manages Helm, and it works with Helm 2 &amp; 3.. You are not locked in &#8211; you can still run plain old Helm with some powerful Go\/Sprig Templating exposed.<\/p>\n<p>Utilizing Helmfiles is more streamlined, which allows teams to develop Helm Charts together using clean and reusable Codefresh Pipelines.<\/p>\n<p>In this tutorial, we\u2019re going to walk through a deploy starting from a completely clean GKE install. For our example project, I\u2019ll be using a monolithic git repository, however, Helmfile works great with a repository per Helm Chart as well.<\/p>\n<h4>Getting Started<\/h4>\n<p>Before you can complete the steps to run and apply a Codefresh Helmfile, you will need the following:<\/p>\n<ul>\n<li>GKE Cluster (I used 1.15.11-gke.11)<\/li>\n<li>IAM<\/li>\n<li>Kubectl, Helm, Helmfile<\/li>\n<\/ul>\n<p><span style=\"font-weight: 400;\">It\u2019s worth noting that some basic knowledge of K8s and Helm is a prerequisite.\u00a0 If you aren\u2019t familiar with them already, there\u2019s a lot of great resources out there already.\u00a0 Including some Codefresh Webinars.\u00a0 Windows is going to run into some issues around the plugins if using Powershell \/ windows native shells..\u00a0 I\u2019d recommend using Windows Subsystem Linux (WSL), which should get you past any Windows issues.\u00a0 If you encounter problems, post below in the comments.<\/span><\/p>\n<h4><span style=\"font-weight: 400;\">What is Helmfile?<\/span><\/h4>\n<p><span style=\"font-weight: 400;\">Helm is great in that (1) it gives us the power of dependency management, i.e. our Chart can depend on other Charts and (2) allows templating of yaml files.\u00a0 Helmfile allows us to have dependencies between separate Helm installs.\u00a0 This way we can install multiple helm charts with 1 command, but Helmfile is actually using Helm to install multiple Charts.\u00a0\u00a0<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Helmfile also allows us to template values.yaml.\u00a0 In standard Helm Charts this isn\u2019t allowed.\u00a0 Helm wants the yaml file to be declarative.\u00a0 Declarative languages work great for ensuring that a system is going to get to the final state we want without worrying about imperative coding type issues.\u00a0 But maintaining a bunch of static values.yaml files is messy and not DRY.\u00a0 Which is why often with Declarative Languages you end up using imperative programming in front of the declarative tool\/language.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Helmfile allows you to manage any number of Helm charts. Here\u2019s an example of some of the things Helmfile can help you accomplish:<\/span><\/p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Setup Helm repos<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Automate commands to run before\/after Helm via Hooks<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Preview changes before deployment, similar to Terraform Plan<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Install dependencies as a separate Helm deploy with one command<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Manage the order of your Helm chart dependencies<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Golang\/Sprig Templating values.yaml, and helm parameters<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Manage secrets as part of a Helm deploy<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Run a script or acquire data from another source<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Use of Environment Variables in Templating<\/span><\/li>\n<\/ul>\n<p><span style=\"font-weight: 400;\">Most importantly, Helmfile prevents vendor lock-in and allows for Golang Templating free from restrictions.<\/span><\/p>\n<h4><span style=\"font-weight: 400;\">Step 1 &#8211; Create the GKE Cluster<\/span><\/h4>\n<p><span style=\"font-weight: 400;\">First, I logged into my Google account for cloud.<\/span><\/p>\n<pre class=\"lang:default decode:true\">$ gcloud auth login\nYour browser has been opened to visit:\n\n    https:\/\/accounts.google.com\/o\/oauth2\/auth?code_challenge=V4w93Tg2vSgt3dgrppcoXk7TtNpHHiiOH3vNZobkpHk&prompt=select_account&code_challenge_method=S256&access_type=offline&redirect_uri=http%3A%2F%2Flocalhost%3A8085%2F&response_type=code&client_id=32555940559.apps.googleusercontent.com&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcloud-platform+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fappengine.admin+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcompute+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Faccounts.reauth\n\n\nWARNING: `gcloud auth login` no longer writes application default credentials.\nIf you need to use ADC, see:\n  gcloud auth application-default --help\n\nYou are now logged in as [braden.wright.it@gmail.com].\nYour current project is [site-impact-infra].  You can change this setting by running:\n  $ gcloud config set project PROJECT_ID\n$ gcloud container clusters get-credentials cluster-1 --zone us-central1-c --project rlt-sandbox\nFetching cluster endpoint and auth data.\nkubeconfig entry generated for cluster-1.<\/pre>\n<p><span style=\"font-weight: 400;\">For creating your GKE cluster, use the following directions (below) as an example. If you want more detail regarding this step, you can follow or looking at\u00a0<\/span><a style=\"transition-property: all;\" href=\"https:\/\/cloud.google.com\/kubernetes-engine\/docs\/quickstart#create_cluster\"><span style=\"font-weight: 400;\">Google Cloud\u2019s Quickstart page here<\/span><\/a><span style=\"font-weight: 400;\">.<\/span><\/p>\n<pre class=\"lang:default decode:true\">$ gcloud container clusters create demo-cluster --cluster-version 1.15.11-gke.13\nWARNING: Currently VPC-native is not the default mode during cluster creation. In the future, this will become the default mode and can be disabled using `--no-enable-ip-alias` flag. Use `--[no-]enable-ip-alias` flag to suppress this warning.\nWARNING: Newly created clusters and node-pools will have node auto-upgrade enabled by default. This can be disabled using the `--no-enable-autoupgrade` flag.\nWARNING: Starting in 1.12, default node pools in new clusters will have their legacy Compute Engine instance metadata endpoints disabled by default. To create a cluster with legacy instance metadata endpoints disabled in the default node pool, run `clusters create` with the flag `--metadata disable-legacy-endpoints=true`.\nWARNING: Your Pod address range (`--cluster-ipv4-cidr`) can accommodate at most 1008 node(s). \nThis will enable the autorepair feature for nodes. Please see https:\/\/cloud.google.com\/kubernetes-engine\/docs\/node-auto-repair for more information on node autorepairs.\nCreating cluster demo-cluster in europe-west1-b... Cluster is being health-checked (master is healthy)...done.                                                                                                               \nCreated [https:\/\/container.googleapis.com\/v1\/projects\/site-impact-infra\/zones\/europe-west1-b\/clusters\/demo-cluster].\nTo inspect the contents of your cluster, go to: https:\/\/console.cloud.google.com\/kubernetes\/workload_\/gcloud\/europe-west1-b\/demo-cluster?project=site-impact-infra\nkubeconfig entry generated for demo-cluster.\nNAME          LOCATION        MASTER_VERSION  MASTER_IP       MACHINE_TYPE   NODE_VERSION    NUM_NODES  STATUS\ndemo-cluster  europe-west1-b  1.15.11-gke.13  35.195.222.178  n1-standard-1  1.15.11-gke.13  3          RUNNING\n\n\nUpdates are available for some Cloud SDK components.  To install them,\nplease run:\n  $ gcloud components update\n\n\n\nTo take a quick anonymous survey, run:\n  $ gcloud survey\n\n$ gcloud container clusters get-credentials demo-cluster\nFetching cluster endpoint and auth data.\nkubeconfig entry generated for demo-cluster.<\/pre>\n<h4><span style=\"font-weight: 400;\">Example Application:<\/span><\/h4>\n<p><span style=\"font-weight: 400;\">In order to demonstrate a real-world example, we will be deploying a simple Hello World Application to Kubernetes.\u00a0 The Hello World application is simply an Nginx site.\u00a0 However, we want Hello World exposed via Traefik Ingress to the public internet,\u00a0 Along with installing an Ingress we also want to create 1 namespace for Hello World and 1 for Traefik.\u00a0 We will deploy our application to multiple environments with the option to configure DNS &amp; SSL.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">In Part 1, we will cover deploying Hello World, but we won\u2019t get to Ingress, DNS, SSL, or Multiple Environment Support in Part 1.\u00a0 Later parts of the blog will continue to build until we have a more complete real-world example deploying Hello World to a completely new Kubernetes cluster.\u00a0<\/span><\/p>\n<h4><span style=\"font-weight: 400;\">Step 2: Set Up Helm Repos<\/span><\/h4>\n<p><span style=\"font-weight: 400;\">As of Helm 2, no Chart Repositories come pre-configured.\u00a0 Helm Chart Repositories are expected to be set up before running Helm, but Helm doesn\u2019t give you a way to manage them.\u00a0 It becomes something that either is in Documentation or may be automated with a custom script.\u00a0 With Helmfile you can declaratively set up your Helm Repos.\u00a0 Helmfile will run commands to manage those Repositories before trying to install the Helm Chart.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">In this step, we will set up the \u201cstable\u201d Helm Repository, which contains the Traefik chart we are going to use for Ingress.\u00a0 Then with the \u201cstable\u201d repository being setup, we can successfully install the Traefik Chart.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">As you can see when you currently attempting to install \u201cmytraefik\u201d the repository is missing<\/span><\/p>\n<pre class=\"lang:default decode:true \">$ helm upgrade --install mytraefik stable\/traefik\nError: failed to download \"stable\/traefik\" (hint: running `helm repo update` may help)<\/pre>\n<p><span style=\"font-weight: 400;\">Helmfile allows setting up of all different types of Helm Repositories including public and private with credentials, using GitHub as a Chart Repository, etc.\u00a0 Here we will just set up the public stable chart repository.<\/span><\/p>\n<pre class=\"lang:default decode:true \">cat &lt;&lt; EOF &gt; helmfile.yaml \nrepositories:\n- name: stable\n  url: https:\/\/kubernetes-charts.storage.googleapis.com\n\nreleases:\n- name: mytraefik\n  namespace: default\n  chart: stable\/traefik\n  labels:\n    name: traefik-public\n  version: 1.86.2\nEOF<\/pre>\n<p><span style=\"font-weight: 400;\">Then apply Helmfile.<\/span><\/p>\n<pre class=\"lang:yaml decode:true\">$ helmfile apply\nAdding repo stable https:\/\/kubernetes-charts.storage.googleapis.com\n\"stable\" has been added to your repositories\n\nUpdating repo\nHang tight while we grab the latest from your chart repositories...\n...Successfully got an update from the \"stable\" chart repository\nUpdate Complete. \u2388 Happy Helming!\u2388 \n\n&lt;REDACTED&gt;\n\nUpgrading release=mytraefik, chart=stable\/traefik\nRelease \"mytraefik\" does not exist. Installing it now.\nNAME: mytraefik\nLAST DEPLOYED: Thu May  7 11:38:01 2020\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\nNOTES:\n1. Get Traefik's load balancer IP\/hostname:\n\n     NOTE: It may take a few minutes for this to become available.\n\n     You can watch the status by running:\n\n         $ kubectl get svc mytraefik --namespace default -w\n\n     Once 'EXTERNAL-IP' is no longer '&lt;pending&gt;':\n\n         $ kubectl describe svc mytraefik --namespace default | grep Ingress | awk '{print $3}'\n\n2. Configure DNS records corresponding to Kubernetes ingress resources to point to the load balancer IP\/hostname found in step 1\n\nListing releases matching ^mytraefik$\nmytraefik   default     1           2020-05-07 11:38:01.914973 -0500 CDT    deployed    traefik-1.86.2  1.7.20     \n\n\nUPDATED RELEASES:\nNAME        CHART            VERSION\nmytraefik   stable\/traefik    1.86.2<\/pre>\n<p><span style=\"font-weight: 400;\">Now that Helmfile has installed the proper charts, it\u2019s time to run Helm Hooks.<\/span><\/p>\n<h4><span style=\"font-weight: 400;\">Step 3: Run Helm Hooks<\/span><\/h4>\n<p><span style=\"font-weight: 400;\">Another issue that is common to come across is wanting to run a command before or after Helmfile.\u00a0 For example, maybe you want to run Terraform before Helmfile, or in this example, we will create a missing namespace before running Helm.\u00a0 Helmfile Hooks can be trigger by the following Events:<\/span><\/p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Prepare: <\/span><span style=\"font-weight: 400;\">events are triggered after each release in your Helmfile is loaded from YAML, before execution.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Presync: <\/span><span style=\"font-weight: 400;\">events are triggered before each release is applied to the remote cluster. This is the ideal event to execute any commands that may mutate the cluster state as it will not be run for read-only operations like <\/span><span style=\"font-weight: 400;\">lint<\/span><span style=\"font-weight: 400;\">, <\/span><span style=\"font-weight: 400;\">diff,<\/span><span style=\"font-weight: 400;\"> or <\/span><span style=\"font-weight: 400;\">template<\/span><span style=\"font-weight: 400;\">.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Postsync: <\/span><span style=\"font-weight: 400;\">events are triggered after each release is applied to the remote cluster. This is the ideal event to execute any commands that may mutate the cluster state as it will not be run for read-only operations like <\/span><span style=\"font-weight: 400;\">lint<\/span><span style=\"font-weight: 400;\">, <\/span><span style=\"font-weight: 400;\">diff,<\/span><span style=\"font-weight: 400;\"> or <\/span><span style=\"font-weight: 400;\">template<\/span><span style=\"font-weight: 400;\">.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Cleanup: <\/span><span style=\"font-weight: 400;\">events are triggered after each release is processed.<\/span><\/li>\n<\/ul>\n<p><span style=\"font-weight: 400;\">You can find more details on <\/span><a href=\"https:\/\/github.com\/roboll\/helmfile#hooks\"><span style=\"font-weight: 400;\">GitHub about Helm Hooks<\/span><\/a><span style=\"font-weight: 400;\"> this aren\u2019t to be confused with <\/span><a href=\"https:\/\/helm.sh\/docs\/topics\/charts_hooks\/\"><span style=\"font-weight: 400;\">Helm Chart Hooks<\/span><\/a><span style=\"font-weight: 400;\"> which are similar but actually part of a Helm chart and limited to working with K8s resources.\u00a0 Helm chart hooks don\u2019t allow you to do things like run Terraform or a custom script you\u2019ve created so using Helmfile Hooks and Helm Chart Hooks are complementary and do not overlap<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Alright, let\u2019s use the \u201cPrepare\u201d event to execute a script that will create a namespace if it\u2019s missing.\u00a0 This was a feature of Helm 2, but has been removed from Helm 3.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">First, use Helm to create a Helm Chart for\u00a0 \u201chelloworld\u201d service.<\/span><\/p>\n<pre class=\"lang:default decode:true\">$ mkdir -p helm\/charts\n$ cd helm\/charts\/\n$ helm create myapp\nCreating myapp\n$ tree .\n.\n\u2514\u2500\u2500 myapp\n    \u251c\u2500\u2500 Chart.yaml\n    \u251c\u2500\u2500 charts\n    \u251c\u2500\u2500 templates\n    \u2502   \u251c\u2500\u2500 NOTES.txt\n    \u2502   \u251c\u2500\u2500 _helpers.tpl\n    \u2502   \u251c\u2500\u2500 deployment.yaml\n    \u2502   \u251c\u2500\u2500 ingress.yaml\n    \u2502   \u251c\u2500\u2500 service.yaml\n    \u2502   \u251c\u2500\u2500 serviceaccount.yaml\n    \u2502   \u2514\u2500\u2500 tests\n    \u2502       \u2514\u2500\u2500 test-connection.yaml\n    \u2514\u2500\u2500 values.yaml\n\n4 directories, 9 files<\/pre>\n<pre class=\"lang:default decode:true \">$ helm upgrade --install myapp .\/myapp --namespace mynamespace\nRelease \"myapp\" does not exist. Installing it now.\nError: create: failed to create: namespaces \"mynamespace\" not found<\/pre>\n<p><span style=\"font-weight: 400;\">You\u2019ll notice that the Namespace doesn\u2019t exist, and as a result, the command failed.\u00a0 So our next step is to use a hook and Helmfile to make sure the namespace is created before we proceed with the install.<\/span><\/p>\n<pre class=\"lang:default decode:true \">$ cd ..\n$ mkdir -p helmfile\/myapp\n$ cd charts\/helmfile\/myapp\/\n$ cat &lt;&lt;EOF &gt; helmfile.yaml\nreleases:\n- name: myapp                   \n  namespace: mynamespace\n  chart: ..\/..\/charts\/myapp     \n  version: 0.1.0\n  hooks:\n  - events: [\"prepare\"]         \n    showlogs: true\n    command: \"..\/..\/scripts\/create_namespace.sh\"\n    args: [\"mynamespace\"]\nEOF<\/pre>\n<pre class=\"lang:default decode:true \">$ cd ..\/..\/..\n$ mkdir scripts\n$ cat &lt;&lt;EOF &gt; scripts\/create_namespace.sh \n#!\/bin\/bash\n\nNS=\\$1\n \nkubectl get namespace \\$NS 2&gt; \/dev\/null\nexit_status=\\$?\n\nif [ \\$exit_status -eq 0 ]; then\n  echo \"Namespace \\$NS Already exists\"\nelse\n  echo \"Missing Namespace \\$NS creating now\"\n  kubectl create namespace \\$NS\nfi\nEOF\n$ chmod +x scripts\/create_namespace.sh<\/pre>\n<p><span style=\"font-weight: 400;\">At this point, you should have the following setup below:<\/span><\/p>\n<pre class=\"lang:default decode:true\">$ tree \n.\n\u251c\u2500\u2500 charts\n\u2502   \u2514\u2500\u2500 myapp\n\u2502       \u251c\u2500\u2500 Chart.yaml\n\u2502       \u251c\u2500\u2500 charts\n\u2502       \u251c\u2500\u2500 templates\n\u2502       \u2502   \u251c\u2500\u2500 NOTES.txt\n\u2502       \u2502   \u251c\u2500\u2500 _helpers.tpl\n\u2502       \u2502   \u251c\u2500\u2500 deployment.yaml\n\u2502       \u2502   \u251c\u2500\u2500 ingress.yaml\n\u2502       \u2502   \u251c\u2500\u2500 service.yaml\n\u2502       \u2502   \u251c\u2500\u2500 serviceaccount.yaml\n\u2502       \u2502   \u2514\u2500\u2500 tests\n\u2502       \u2502       \u2514\u2500\u2500 test-connection.yaml\n\u2502       \u2514\u2500\u2500 values.yaml\n\u251c\u2500\u2500 helmfile\n\u2502   \u2514\u2500\u2500 myapp\n\u2502       \u2514\u2500\u2500 helmfile.yaml\n\u2514\u2500\u2500 scripts\n    \u2514\u2500\u2500 create_namespace.sh<\/pre>\n<p><span style=\"font-weight: 400;\">Finally, we can apply Helmfile.<\/span><\/p>\n<pre class=\"lang:default decode:true \">$ cd helmfile\/myapp\/\n$ helmfile apply\nBuilding dependency release=myapp, chart=..\/..\/charts\/myapp\nhelmfile.yaml: basePath=.\n\nhook[prepare] logs | Missing Namespace mynamespace creating now\nhook[prepare] logs | namespace\/mynamespace created\nhook[prepare] logs | \n\n&lt;REDACTED&gt;\n\nUpgrading release=myapp, chart=..\/..\/charts\/myapp\nRelease \"myapp\" does not exist. Installing it now.\nNAME: myapp\nLAST DEPLOYED: Thu May  7 12:30:51 2020\nNAMESPACE: mynamespace\nSTATUS: deployed\nREVISION: 1\nNOTES:\n1. Get the application URL by running these commands:\n  export POD_NAME=$(kubectl get pods --namespace mynamespace -l \"app.kubernetes.io\/name=myapp,app.kubernetes.io\/instance=myapp\" -o jsonpath=\"{.items[0].metadata.name}\")\n  echo \"Visit http:\/\/127.0.0.1:8080 to use your application\"\n  kubectl --namespace mynamespace port-forward $POD_NAME 8080:80\n\nListing releases matching ^myapp$\nmyapp   mynamespace 1           2020-05-07 12:30:51.919429 -0500 CDT    deployed    myapp-0.1.0 1.16.0     \n\n\nUPDATED RELEASES:\nNAME    CHART                VERSION\nmyapp   ..\/..\/charts\/myapp     0.1.0<\/pre>\n<p><span style=\"font-weight: 400;\">Near the top, we can see our logs confirming that we successfully created a namespace. Additionally, we were able to install our helm chart into the newly-formed namespace.<\/span><\/p>\n<h4><span style=\"font-weight: 400;\">Helmfile Diff<\/span><\/h4>\n<p><span style=\"font-weight: 400;\">Helm is great for applying changes and knowing that things will eventually be consistent.\u00a0 One issue though is that it\u2019s a Black Box.\u00a0 Like Terraform Plan it would be great to see the difference and what changes a Helm chart install will have on the system.\u00a0 Luckily Helmfile leverages the Helm Diff plugin to make this happen.\u00a0 If you\u2019ve been following along, you\u2019ve been seeing REDACTED sections, this contained the Diff output.\u00a0 In order to use it on the command line simply run \u201chelmfile diff\u201d, a diff is also run when \u201chelmfile apply\u201d is run, but unlike a Terraform apply it will not ask you if you want to proceed or not, it simply proceeds with the apply.\u00a0 So be careful when running \u201chelmfile apply\u201d.\u00a0 Because we want to ensure that helmfile diff is always run and looked at before running helmfile apply, and we want others to be able to run deploys and get insight into other deploys, let\u2019s also set up a Codefresh Pipeline now.\u00a0 First, we need to get our K8s cluster and Helmfile setup to run in Codefresh.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">***Note: currently there is an <\/span><a href=\"https:\/\/github.com\/databus23\/helm-diff\/issues\/176\"><span style=\"font-weight: 400;\">open issue regarding a 3 way Diff that\u2019s supported in Helm 3<\/span><\/a><span style=\"font-weight: 400;\">.\u00a0 Unfortunately, the Helm Diff plugin has not been updated to support a 3 way Diff.\u00a0 This means if manual changes have been made to your cluster, the diff will not see those changes.\u00a0<\/span><\/p>\n<h4><span style=\"font-weight: 400;\">Step 4: Configure Codefresh to See GKE Cluster<\/span><\/h4>\n<p><span style=\"font-weight: 400;\">We need to add our GKE cluster we previously set up into Codefresh. This allows us to create a pipeline that will deploy to the GKE cluster that we integrated into Codefresh.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">To begin, click \u201cKubernetes\u201d on the left panel. Then click \u201cADD CLUSTER\u201d in the upper right.<\/span><\/p>\n<p><img class=\"alignnone wp-image-16545\" src=\"https:\/\/live-codefresh.pantheonsite.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.34.50-PM-300x80.png\" alt=\"\" width=\"982\" height=\"262\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.34.50-PM-300x80.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.34.50-PM-1024x273.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.34.50-PM-768x205.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.34.50-PM-1536x410.png 1536w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.34.50-PM-2048x546.png 2048w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.34.50-PM-20x5.png 20w\" sizes=\"(max-width: 982px) 100vw, 982px\" \/><\/p>\n<p><span style=\"font-weight: 400;\">Add a cluster to \u201cCustom Providers.\u201d<\/span><\/p>\n<p><span style=\"font-weight: 400;\">If you need more assistance during this part of the process, check out the <\/span><a href=\"https:\/\/codefresh.io\/docs\/docs\/deploy-to-kubernetes\/add-kubernetes-cluster\/#get-cluster-configuration-manually\"><span style=\"font-weight: 400;\">Codefresh tutorial here<\/span><\/a><span style=\"font-weight: 400;\"> to add your cluster.<\/span><\/p>\n<p><img class=\"alignnone wp-image-16548\" src=\"https:\/\/live-codefresh.pantheonsite.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.35.09-PM-300x153.png\" alt=\"\" width=\"1035\" height=\"528\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.35.09-PM-300x153.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.35.09-PM-1024x521.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.35.09-PM-768x391.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.35.09-PM-1536x782.png 1536w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.35.09-PM-2048x1043.png 2048w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.35.09-PM-20x10.png 20w\" sizes=\"(max-width: 1035px) 100vw, 1035px\" \/><\/p>\n<p><span style=\"font-weight: 400;\">Unless you want to manually update your codefresh.yaml, make sure to name your cluster \u201ccodefresh-helmfile-demo\u201d.\u00a0 This is because Codefresh automatically sets up kube context for you by injecting a kube config file.\u00a0 Your kube context is based on your cluster name.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Click \u201cTEST CONNECTION,\u201d and if successful, click \u201cSAVE.\u201d<\/span><\/p>\n<h4><span style=\"font-weight: 400;\">Step 5: Create a Codefresh Pipeline<\/span><\/h4>\n<p><span style=\"font-weight: 400;\">Now that we have our Kubernetes cluster setup and integrated with Codefresh, and we have a working Helmfile to deploy Hello World, let\u2019s build a Codefresh CI\/CD pipeline.\u00a0 Our Pipeline will:\u00a0<\/span><\/p>\n<ol>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Clone Git Repository<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Run Helmfile Diff to show what a deploy of Hello World will change<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Pause for User Confirmation before deploying<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Run Helmfile Apply to deploy Hellow World<\/span><\/li>\n<\/ol>\n<p><span style=\"font-weight: 400;\">When we are done we will have a Pipeline like:<\/span><\/p>\n<p><img class=\"alignnone wp-image-16549\" src=\"https:\/\/live-codefresh.pantheonsite.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.35.18-PM-300x90.png\" alt=\"\" width=\"1057\" height=\"317\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.35.18-PM-300x90.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.35.18-PM-20x6.png 20w\" sizes=\"(max-width: 1057px) 100vw, 1057px\" \/><\/p>\n<p><span style=\"font-weight: 400;\">Next step is to Create a New Codefresh Pipeline<\/span><\/p>\n<p><img class=\"alignnone wp-image-16550\" src=\"https:\/\/live-codefresh.pantheonsite.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.35.46-PM-300x240.png\" alt=\"\" width=\"1055\" height=\"844\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.35.46-PM-300x240.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.35.46-PM-1024x818.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.35.46-PM-768x614.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.35.46-PM-1536x1228.png 1536w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.35.46-PM-20x16.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.35.46-PM.png 1574w\" sizes=\"(max-width: 1055px) 100vw, 1055px\" \/><\/p>\n<p><span style=\"font-weight: 400;\">To access your pipeline from Git Repo, update the Helmfile with (in this case) \u201c.\/code-01\/codefresh.yml\u201d. See below.<\/span><\/p>\n<p><img class=\"alignnone wp-image-16551\" src=\"https:\/\/live-codefresh.pantheonsite.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.35.58-PM-300x263.png\" alt=\"\" width=\"947\" height=\"830\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.35.58-PM-300x263.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.35.58-PM-1024x899.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.35.58-PM-768x674.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.35.58-PM-20x18.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-26-at-3.35.58-PM.png 1406w\" sizes=\"(max-width: 947px) 100vw, 947px\" \/><\/p>\n<p><span style=\"font-weight: 400;\">See below for a copy of the codefresh.yaml.<\/span><\/p>\n<pre class=\"lang:default decode:true \">$ cat code-01\/codefresh.yml \n# More examples of Codefresh YAML can be found at\n# https:\/\/codefresh.io\/docs\/docs\/yaml-examples\/examples\/\n\nversion: \"1.0\"\n# Stages can help you organize your steps in stages\n\nstages:\n  - \"clone\"\n  - \"dryrun\"\n  - \"approve\"\n  - \"deploy\"\n\nsteps:\n  clone:\n    title: \"Cloning repository\"\n    type: \"git-clone\"\n    repo: \"rootleveltech\/codefresh-helmfile-webinar\"\n    # CF_BRANCH value is auto set when pipeline is triggered\n    # Learn more at codefresh.io\/docs\/docs\/codefresh-yaml\/variables\/\n    revision: \"${{CF_BRANCH}}\"\n    git: \"github-1\"\n    stage: \"clone\"\n\n  dryrun:\n    title: \"Dry Run\"\n    type: freestyle\n    image: bradenwright\/cfstep-helmfile:0.111.0-customized\n    working_directory: \"${{clone}}\"\n    environment:\n      - COMMANDS=diff\n    commands:\n      - kubectl config use-context $KUBE_CONTEXT\n      - cd \/codefresh\/volume\/codefresh-helmfile-webinar\/$CODE_DIR\/helm\/helmfile\/$SERVICE\n      - python3 \/helmfile.py\n    stage: \"dryrun\"\n\n  ask_for_permission:\n    title: Deploy?\n    type: pending-approval\n    stage: \"approve\"\n\n  deploy:\n    title: \"Deploy\"\n    type: freestyle\n    image: bradenwright\/cfstep-helmfile:0.111.0-customized\n    working_directory: \"${{clone}}\"\n    environment:\n      - COMMANDS=apply\n    commands:\n      - kubectl config use-context $KUBE_CONTEXT\n      - cd \/codefresh\/volume\/codefresh-helmfile-webinar\/$CODE_DIR\/helm\/helmfile\/$SERVICE\n      - python3 \/helmfile.py\n    stage: \"deploy\"\n    when:\n      steps:\n        - name: ask_for_permission\n          on:\n            - approved<\/pre>\n<p><span style=\"font-weight: 400;\">The next step is to add a few variables. Your build will determine the number of variables you\u2019ll need.\u00a0 We will cover details of Docker image bradenwright\/cfstep-helmfile in later parts of the blog.\u00a0 For purposes of this step, the cfstep-helmfile which Codefresh has available would work as well.\u00a0 Since changes aren\u2019t relevant to this post, I\u2019ll cover in detail later.<\/span><\/p>\n<p><img class=\"alignnone wp-image-16597\" src=\"https:\/\/live-codefresh.pantheonsite.io\/wp-content\/uploads\/2020\/07\/Screen-Shot-2020-07-05-at-9.43.09-PM-300x206.png\" alt=\"\" width=\"1060\" height=\"727\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/07\/Screen-Shot-2020-07-05-at-9.43.09-PM-300x206.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/07\/Screen-Shot-2020-07-05-at-9.43.09-PM-768x527.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/07\/Screen-Shot-2020-07-05-at-9.43.09-PM-20x14.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/07\/Screen-Shot-2020-07-05-at-9.43.09-PM.png 885w\" sizes=\"(max-width: 1060px) 100vw, 1060px\" \/><\/p>\n<p>&nbsp;<\/p>\n<p><span style=\"font-weight: 400;\">Now you will be able to run your build. Simply click \u201cRun\u201d using the following defaults:<\/span><\/p>\n<p><img class=\"alignnone wp-image-16598\" src=\"https:\/\/live-codefresh.pantheonsite.io\/wp-content\/uploads\/2020\/07\/Screen-Shot-2020-07-05-at-9.43.23-PM-300x169.png\" alt=\"\" width=\"1087\" height=\"612\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/07\/Screen-Shot-2020-07-05-at-9.43.23-PM-300x169.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/07\/Screen-Shot-2020-07-05-at-9.43.23-PM-768x433.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/07\/Screen-Shot-2020-07-05-at-9.43.23-PM-20x11.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/07\/Screen-Shot-2020-07-05-at-9.43.23-PM.png 884w\" sizes=\"(max-width: 1087px) 100vw, 1087px\" \/><\/p>\n<p><span style=\"font-weight: 400;\">Within Codefresh, you should see that the pipeline stops to wait for approval. Meanwhile, the output from the Dry Run step will show what\u2019s going to change if\/when the Pipeline is \u201cAPPROVED\u201d and deployed.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">In this example, you can see the Deployment for Myapp is going to change if approved.<\/span><\/p>\n<p><img class=\"alignnone wp-image-16599\" src=\"https:\/\/live-codefresh.pantheonsite.io\/wp-content\/uploads\/2020\/07\/Screen-Shot-2020-07-05-at-9.43.32-PM-300x153.png\" alt=\"\" width=\"1085\" height=\"553\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/07\/Screen-Shot-2020-07-05-at-9.43.32-PM-300x153.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/07\/Screen-Shot-2020-07-05-at-9.43.32-PM-20x10.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/07\/Screen-Shot-2020-07-05-at-9.43.32-PM.png 890w\" sizes=\"(max-width: 1085px) 100vw, 1085px\" \/><\/p>\n<p><span style=\"font-weight: 400;\">Everything looks great!\u00a0<\/span><\/p>\n<p><img class=\"alignnone wp-image-16600\" src=\"https:\/\/live-codefresh.pantheonsite.io\/wp-content\/uploads\/2020\/07\/Screen-Shot-2020-07-05-at-9.43.39-PM-300x91.png\" alt=\"\" width=\"1092\" height=\"331\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/07\/Screen-Shot-2020-07-05-at-9.43.39-PM-300x91.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/07\/Screen-Shot-2020-07-05-at-9.43.39-PM-768x232.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/07\/Screen-Shot-2020-07-05-at-9.43.39-PM-20x6.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/07\/Screen-Shot-2020-07-05-at-9.43.39-PM.png 885w\" sizes=\"(max-width: 1092px) 100vw, 1092px\" \/><\/p>\n<p><span style=\"font-weight: 400;\">Congratulations! You\u2019ve successfully run and applied your Codefresh Helmfile.<\/span><\/p>\n<p><em><strong>We also recorded a webinar on this very topic. Watch it now:<\/strong><\/em><\/p>\n<p><iframe title=\"Simplify your Code with Helmfile\" width=\"500\" height=\"281\" src=\"https:\/\/www.youtube.com\/embed\/jl13ixzteWs?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe><\/p>\n<p>&nbsp;<\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"16482\"\/>","protected":false},"excerpt":{"rendered":"<p>Editors note: We did a webinar on this very topic. Scroll to the bottom of this post or click here to view the webinar. If you\u2019re looking to deploy your services to Kubernetes, Helm works great. However, once you start deploying to multiple environments, developing code as a team, or automating in a CI\/CD pipeline, &hellip; <a href=\"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/\">Read more<\/a><\/p>\n","protected":false},"author":78,"featured_media":16613,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[2367,6],"tags":[5288],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Codefresh Helmfile Tutorial: a Step-by-Step Guide<\/title>\n<meta name=\"description\" content=\"Codefresh Pipelines using Helmfile has many benefits. In this tutorial, we\u2019re going to walk through a deploy starting from a completely clean GKE install.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"How to Run and Apply a Codefresh Helmfile: a Step-by-Step Guide\" \/>\n<meta property=\"og:description\" content=\"Codefresh Pipelines using Helmfile has many benefits. In this tutorial, we\u2019re going to walk through a deploy starting from a completely clean GKE install.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2020-07-06T04:21:17+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-06T15:51:24+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/07\/CF-Banner-1128x191-05.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"2256\" \/>\n\t<meta property=\"og:image:height\" content=\"382\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@codefresh\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Braden Wright\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"15 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/07\/CF-Banner-1128x191-05.jpg\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/07\/CF-Banner-1128x191-05.jpg\",\"width\":2256,\"height\":382},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/#webpage\",\"url\":\"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/\",\"name\":\"Codefresh Helmfile Tutorial: a Step-by-Step Guide\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/#primaryimage\"},\"datePublished\":\"2020-07-06T04:21:17+00:00\",\"dateModified\":\"2022-01-06T15:51:24+00:00\",\"description\":\"Codefresh Pipelines using Helmfile has many benefits. In this tutorial, we\u2019re going to walk through a deploy starting from a completely clean GKE install.\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"How to Run and Apply a Codefresh Helmfile: a Step-by-Step Guide\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/e867f4b70710a806203143e0816e7ea7\"},\"headline\":\"How to Run and Apply a Codefresh Helmfile: a Step-by-Step Guide\",\"datePublished\":\"2020-07-06T04:21:17+00:00\",\"dateModified\":\"2022-01-06T15:51:24+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/#webpage\"},\"wordCount\":1928,\"commentCount\":4,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/07\/CF-Banner-1128x191-05.jpg\",\"keywords\":[\"Helmfile\"],\"articleSection\":[\"Helm Tutorials\",\"How Tos\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/e867f4b70710a806203143e0816e7ea7\",\"name\":\"Braden Wright\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/187a7d11ad9c1a782b6f36261fe5bb7b?s=96&d=blank&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/187a7d11ad9c1a782b6f36261fe5bb7b?s=96&d=blank&r=g\",\"caption\":\"Braden Wright\"},\"description\":\"Braden is a Staff Cloud Architect at Rootlevel Technology, a Codefresh partner.\",\"url\":\"https:\/\/codefresh.io\/author\/braden-wright\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Codefresh Helmfile Tutorial: a Step-by-Step Guide","description":"Codefresh Pipelines using Helmfile has many benefits. In this tutorial, we\u2019re going to walk through a deploy starting from a completely clean GKE install.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/","og_locale":"en_US","og_type":"article","og_title":"How to Run and Apply a Codefresh Helmfile: a Step-by-Step Guide","og_description":"Codefresh Pipelines using Helmfile has many benefits. In this tutorial, we\u2019re going to walk through a deploy starting from a completely clean GKE install.","og_url":"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2020-07-06T04:21:17+00:00","article_modified_time":"2022-01-06T15:51:24+00:00","og_image":[{"width":2256,"height":382,"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/07\/CF-Banner-1128x191-05.jpg","type":"image\/jpeg"}],"twitter_card":"summary_large_image","twitter_creator":"@codefresh","twitter_site":"@codefresh","twitter_misc":{"Written by":"Braden Wright","Est. reading time":"15 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/07\/CF-Banner-1128x191-05.jpg","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/07\/CF-Banner-1128x191-05.jpg","width":2256,"height":382},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/#webpage","url":"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/","name":"Codefresh Helmfile Tutorial: a Step-by-Step Guide","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/#primaryimage"},"datePublished":"2020-07-06T04:21:17+00:00","dateModified":"2022-01-06T15:51:24+00:00","description":"Codefresh Pipelines using Helmfile has many benefits. In this tutorial, we\u2019re going to walk through a deploy starting from a completely clean GKE install.","breadcrumb":{"@id":"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"How to Run and Apply a Codefresh Helmfile: a Step-by-Step Guide"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/e867f4b70710a806203143e0816e7ea7"},"headline":"How to Run and Apply a Codefresh Helmfile: a Step-by-Step Guide","datePublished":"2020-07-06T04:21:17+00:00","dateModified":"2022-01-06T15:51:24+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/#webpage"},"wordCount":1928,"commentCount":4,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/07\/CF-Banner-1128x191-05.jpg","keywords":["Helmfile"],"articleSection":["Helm Tutorials","How Tos"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/helm-tutorial\/run-apply-codefresh-helmfile-step-step-guide\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/e867f4b70710a806203143e0816e7ea7","name":"Braden Wright","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/187a7d11ad9c1a782b6f36261fe5bb7b?s=96&d=blank&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/187a7d11ad9c1a782b6f36261fe5bb7b?s=96&d=blank&r=g","caption":"Braden Wright"},"description":"Braden is a Staff Cloud Architect at Rootlevel Technology, a Codefresh partner.","url":"https:\/\/codefresh.io\/author\/braden-wright\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/16482"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/78"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=16482"}],"version-history":[{"count":1,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/16482\/revisions"}],"predecessor-version":[{"id":20944,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/16482\/revisions\/20944"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/16613"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=16482"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=16482"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=16482"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}