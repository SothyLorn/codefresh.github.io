{"id":17892,"date":"2020-11-03T08:26:59","date_gmt":"2020-11-03T16:26:59","guid":{"rendered":"https:\/\/codefresh.io\/?p=17892"},"modified":"2022-01-06T15:44:37","modified_gmt":"2022-01-06T15:44:37","slug":"lerna-monorepo","status":"publish","type":"post","link":"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/","title":{"rendered":"Managing Your Typescript Monorepo With Lerna and Codefresh"},"content":{"rendered":"<p>Managing dependencies across multiple repositories and implementing updates to multiple repositories at the same time can be a time consuming and error-prone task. Thus, organizations have taken the approach of managing multiple projects in the same repository, called a Monorepo. The benefits of using a Monorepo become clear with the right tooling. One of those tools is Lerna, which can be used to manage Node-based Monorepos.<\/p>\n<p>This post will cover the following:<\/p>\n<ul>\n<li>An overview of Monorepos, examples, and benefits;<\/li>\n<li>What is Lerna and how it can help developers manage their Monorepo;<\/li>\n<li>A tutorial, in which we show you how you can create and manage your Monorepo with Lerna.<\/li>\n<\/ul>\n<h3>What is a Monorepo?<\/h3>\n<p>Independently versioned packages are great for sharing code on small scale. However, depending on the number of dependencies of the project, it becomes more difficult to track versions across packages. To make it easier, companies pack multiple projects into one Git repository. This hybrid approach is called a Monorepo. In short, Monorepos allow us to keep multiple projects in the same repository.<\/p>\n<p>Several companies have set-up their repositories as Monorepos, some of the most well-known cases are Facebook and Google, but also organizations such as Babel, React, Angular, Ember, and many more, use Monorepos.<\/p>\n<p>The benefits and drawbacks of using a Monorepo <a href=\"http:\/\/danluu.com\/monorepo\/\">have been explored extensively<\/a>. Thus, we will merely provide an overview. Monorepos allow us to:<\/p>\n<ul>\n<li>Enhance our tooling: Monorepos are often easier to navigate than having to understand and configure the relationship between dependencies. In the case that dependencies have to be changed across the project to accommodate a specific package, those changes can be made at once, together with the changes to the specific package.<\/li>\n<li>Simplify the organization of code among teams; instead of having to split up repositories depending on the team structure, we can organize our repository based on team-specific projects.<\/li>\n<li>Simplify dependencies between multiple projects (more on this later).<\/li>\n<li>Reach higher productivity: It is easier to onboard new developers to the repository since they do not have to be taught the relationship between dependencies.<\/li>\n<\/ul>\n<p>Some of the downsides may include that a Monorepository looks more intimidating due to its size. Additionally, you cannot necessarily use the same tools and processes that you would be using on monolithic repositories. For example, Google has developed several custom tools to better manage their workflows.<\/p>\n<p>This tutorial will look at an open-source tool that allows users to better manage, and navigate between projects within a Node.js-based Monorepo: Lerna.<\/p>\n<p>Find out more about <a href=\"https:\/\/codefresh.io\/continuous-integration\/using-codefresh-with-mono-repos\/\">the differences between Monolithic, Multi-repos, and Monorepos<\/a>.<\/p>\n<h3>What is Lerna?<\/h3>\n<p>Lerna is a tool to manage Monorepos with Git and npm, which automatically ties together all package versions used across your repository.<\/p>\n<p>Assume that you have multiple typescript projects in different repositories that have common dependencies. If you want to update one dependency across all projects it will likely require you to run the same commands as many times as you have projects with the same dependencies that have to be updated. Here is where Lerna can become useful.<\/p>\n<p>By using Lerna, you can execute the same command across your projects. Meaning, all projects can share the same build, test, and release process, making your repository easier to manage. Updates, tests, or deployments, can be run on the entire project to verify that all repositories are working together properly.<\/p>\n<p>Additionally, Lerna allows you to link dependencies between projects. Thus, if project A is dependent on project B, you could have shared dependencies and test both projects in combination without affecting other projects that might not have direct dependencies.<\/p>\n<p>Using Lerna, every project within your Monorepo will have its own package.json file to manage its dependencies. Since Lerna does not give you the option to automatically link one project to another, we are going to utilize <a href=\"https:\/\/classic.yarnpkg.com\/en\/docs\/workspaces\/\">yarn workspaces<\/a>. Once we install dependencies, dependencies between projects will be automatically linked, making it easier to import those into respective projects.<\/p>\n<h3>Tutorial: Using Lerna in your project<\/h3>\n<p>Now that we know what Lerna can be used for theoretically, let\u2019s have a look at how we can use Lerna in our Monorepo. In the end, we will have a working Monorepo that holds both, a Typescript and a React App. Those will have some shared dependencies and some specific to each project. Note that you could also create a Monorepo that does not have shared dependencies between projects. The main advantages of Monorepos are to handle related projects.<\/p>\n<p>As prerequisites please have <a href=\"https:\/\/classic.yarnpkg.com\/en\/docs\/install\/\">yarn<\/a> and <a href=\"https:\/\/www.npmjs.com\/package\/npx\">npx<\/a> installed.<\/p>\n<p>You can find our Monorepo in the<a href=\"https:\/\/github.com\/anais-codefresh\/lerna-example\"> following repository<\/a>. However, following the instructions provided in the tutorial should suffice. Once you cloned the repository, you can run<\/p>\n<pre>yarn boot\n<\/pre>\n<figure id=\"attachment_17893\" aria-describedby=\"caption-attachment-17893\" style=\"width: 300px\" class=\"wp-caption aligncenter\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/lerna-boot.png\"><img class=\"size-medium wp-image-17893\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/lerna-boot-300x70.png\" alt=\"yarn-boot\" width=\"300\" height=\"70\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/lerna-boot-300x70.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/lerna-boot-1024x238.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/lerna-boot-768x178.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/lerna-boot-20x5.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/lerna-boot.png 1280w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><figcaption id=\"caption-attachment-17893\" class=\"wp-caption-text\">Run yarn boot to install dependencies<\/figcaption><\/figure>\n<p>This script will call \u201cyarn global add lerna &amp;&amp; lerna bootstrap\u201d. First, we need Lerna to install all of our dependencies with the \u201c<a href=\"https:\/\/github.com\/lerna\/lerna\/tree\/master\/commands\/bootstrap#readme\">lerna bootstrap<\/a>\u201d command. This tutorial will look at multiple commands that can be used across your Monorepo. So let\u2019s get started!<\/p>\n<p><b>Setting up our Monorepo<\/b><\/p>\n<p>We will start from an empty repository. First, we have to install Lerna:<\/p>\n<pre>yarn global add lerna\n<\/pre>\n<p>Note that you might have to run with \u2018sudo\u2019. Verify your installation by running:<\/p>\n<pre>lerna --version\n<\/pre>\n<p>Now, we create our repository that will become our Monorepo and change into this repository:<\/p>\n<pre>mkdir lerna-example\n\ncd lerna-example\n<\/pre>\n<p>To set-up the project folder with Lerna, we are going to use the following command:<\/p>\n<pre>lerna init\n<\/pre>\n<p>This will create a Lerna configuration file and a package folder, as well as the package.json and lerna.json file, used to manage dependencies. Your project tree should look like the following now:<\/p>\n<figure id=\"attachment_17894\" aria-describedby=\"caption-attachment-17894\" style=\"width: 300px\" class=\"wp-caption aligncenter\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/lerna-structure.png\"><img class=\"size-medium wp-image-17894\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/lerna-structure-300x81.png\" alt=\"Lerna file structure\" width=\"300\" height=\"81\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/lerna-structure-300x81.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/lerna-structure-20x5.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/lerna-structure.png 366w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><figcaption id=\"caption-attachment-17894\" class=\"wp-caption-text\">Lerna file structure<\/figcaption><\/figure>\n<p>At this point, we want to make some changes to our package.json and our <a href=\"https:\/\/github.com\/anais-codefresh\/lerna-example\/blob\/master\/lerna.json\">lerna.json file<\/a>. Within lerna.json, please add the following lines:<\/p>\n<pre class=\"\"> \"npmClient\": \"yarn\",\n \"useWorkspaces\": true,\n \"version\": \"independent\"\n<\/pre>\n<p>First, we tell Lerna that we want to use yarn as our npm client, next, we want to use workspaces and then we set the version to be independent. Let\u2019s have a look at what this means. Lerna gives you two options, <a href=\"https:\/\/github.com\/lerna\/lerna#how-it-works\">to use versioning in \u2019independent\u2019 or \u2019fixed\u2019 mode<\/a>.<\/p>\n<p>Independent mode allows you to publish specific versions for each package. Once you publish your Monorepo, Lerna will update the releases that changed to their new version. In comparison, fixed mode operates all packages on the same version. If you update one dependency, it will be updated across your Monorepo. Which mode you are going to choose ultimately depends on the type of projects that you want to manage with your Monorepo. While the independent mode provides you with higher flexibility in managing your dependencies, the fixed mode makes it easier to manage dependencies between similar projects.<\/p>\n<p>Next, we are going to change the <a href=\"https:\/\/github.com\/anais-codefresh\/lerna-example\/blob\/master\/package.json\">package.json file<\/a> to make sure it knows which folders are used within the workspace. Add the following lines:<\/p>\n<pre>\"workspaces\": [\n   \"packages\/*\"\n],\n<\/pre>\n<p><b>Create Typescript Project<\/b><\/p>\n<p>Next, we want to add all typescript dependencies needed to run our project. We can treat it as a shared dependency, so go ahead and run:<\/p>\n<pre>lerna add typescript<\/pre>\n<p>This will install your dependency in the root package.json.<\/p>\n<p>To set-up our typescript project, we are going to use the <a href=\"https:\/\/github.com\/lerna\/lerna\/tree\/master\/commands\/create#readme\">Lerna create command<\/a>. Run:<\/p>\n<pre>lerna create<\/pre>\n<p>In our case, we will name it <a href=\"https:\/\/github.com\/anais-codefresh\/lerna-example\/tree\/master\/packages\/typescript-package\">typescript-project<\/a>.<\/p>\n<p>Within the project\u2019s root folder, create your <a href=\"https:\/\/github.com\/anais-codefresh\/lerna-example\/blob\/master\/tsconfig.json\">tsconfig.json<\/a> file<\/p>\n<pre>{\n   \"compilerOptions\": {\n     \"module\": \"commonjs\",\n     \"declaration\": true,\n     \"noImplicitAny\": false,\n     \"removeComments\": true,\n     \"noLib\": false,\n     \"emitDecoratorMetadata\": true,\n     \"experimentalDecorators\": true,\n     \"target\": \"es6\",\n     \"sourceMap\": true,\n     \"lib\": [\n       \"es6\"\n     ]\n   },\n   \"exclude\": [\n     \"node_modules\",\n     \"**\/*.spec.ts\"\n   ]\n  }\n<\/pre>\n<p>Additionally, the typescript project will need its own<a href=\"https:\/\/github.com\/anais-codefresh\/lerna-example\/blob\/master\/packages\/typescript-package\/tsconfig.json\"> tsconfig.json<\/a>:<\/p>\n<pre>{\n   \"compilerOptions\": {\n     \"module\": \"commonjs\",\n     \"declaration\": true,\n     \"noImplicitAny\": false,\n     \"removeComments\": true,\n     \"noLib\": false,\n     \"emitDecoratorMetadata\": true,\n     \"experimentalDecorators\": true,\n     \"target\": \"es6\",\n     \"sourceMap\": true,\n     \"lib\": [\n       \"es6\"\n     ]\n   },\n   \"exclude\": [\n     \"node_modules\",\n     \"**\/*.spec.ts\"\n   ]\n  }\n<\/pre>\n<p>For now, we merely changed the js boilerplate file that came with the Lerna create command into a <a href=\"https:\/\/github.com\/anais-codefresh\/lerna-example\/blob\/master\/packages\/typescript-package\/src\/typescript-package.ts\">ts file<\/a> and moved it inside an src folder. However, feel free to add your own ts code and related tests. Your project structure should now look similar to the one displayed below.<\/p>\n<figure id=\"attachment_17895\" aria-describedby=\"caption-attachment-17895\" style=\"width: 300px\" class=\"wp-caption aligncenter\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/lerna-example-project-structure.png\"><img class=\"size-medium wp-image-17895\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/lerna-example-project-structure-300x273.png\" alt=\"lerna-example-project-structure\" width=\"300\" height=\"273\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/lerna-example-project-structure-300x273.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/lerna-example-project-structure-20x18.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/lerna-example-project-structure.png 362w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><figcaption id=\"caption-attachment-17895\" class=\"wp-caption-text\">Project structure of our Lerna example repo<\/figcaption><\/figure>\n<p>To make sure everything is correctly set-up, we can add a tsc script inside the <a href=\"https:\/\/github.com\/anais-codefresh\/lerna-example\/blob\/master\/packages\/typescript-package\/package.json\">package.json<\/a> of our typescript-package:<\/p>\n<pre>\"scripts\": {\n   \"start\" : \"tsc\",\n<\/pre>\n<p>Run the following command to execute your typescript files:<\/p>\n<pre>lerna run start<\/pre>\n<p>You should see the following success message:<\/p>\n<figure id=\"attachment_17896\" aria-describedby=\"caption-attachment-17896\" style=\"width: 300px\" class=\"wp-caption aligncenter\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/success-message.png\"><img class=\"size-medium wp-image-17896\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/success-message-300x88.png\" alt=\"success-message\" width=\"300\" height=\"88\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/success-message-300x88.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/success-message-20x6.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/success-message.png 552w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><figcaption id=\"caption-attachment-17896\" class=\"wp-caption-text\">Console output after running &#8220;lerna run start&#8221;<\/figcaption><\/figure>\n<p><b>Create React Project<\/b><\/p>\n<p>Let\u2019s set-up our React app. For this, we are going to use <a href=\"https:\/\/create-react-app.dev\/docs\/adding-typescript\/\">create-react-app<\/a>. First, change into the packages folder and then run the following:<\/p>\n<pre>cd packages\n\nyarn create react-app  --template typescript\n<\/pre>\n<p>Replace the package name with the name that you want to give to your react project. In our case, we named it react-package.<\/p>\n<p>You should now see the<a href=\"https:\/\/github.com\/anais-codefresh\/lerna-example\/tree\/master\/packages\/react-package\"> boilerplate react app<\/a> within the packages folder. Changing into the react package and running the app will open up the app in localhost:<\/p>\n<pre>cd react-package\n\nyarn start\n<\/pre>\n<p>Note that this installed typescript again. However, the boilerplate typescript react uses an older version of typescript. While we have the following version in our <a href=\"https:\/\/github.com\/anais-codefresh\/lerna-example\/blob\/master\/packages\/react-package\/package.json\">package.json<\/a> in our react-package:<\/p>\n<pre>\"typescript\": \"~3.7.2\"<\/pre>\n<p>We have a later version in\u00a0 our root <a href=\"https:\/\/github.com\/anais-codefresh\/lerna-example\/blob\/master\/package.json\">package.json<\/a> file:<\/p>\n<pre>\"typescript\": \"^4.0.3\"<\/pre>\n<p>This is one of the features of using Monorepos; we can let every package use its own dependencies. Along those lines, we could move the newer typescript version into the package.json of our typescript-package. However, if we want to set-up a new typescript project, we would then have to ensure that it has its own typescript dependency. Thus, we will leave it the way it is for now.<\/p>\n<p><b>Make one package depend on the other<\/b><\/p>\n<p>You might want to access data in your react project from your typescript project. First, edit your <a href=\"https:\/\/github.com\/anais-codefresh\/lerna-example\/blob\/master\/packages\/typescript-package\/src\/typescript-package.ts\">typescript-package.ts<\/a> file inside typescript-package\/src.<\/p>\n<p>Once done we have to tell Lerna that our react-package depends on our typescript package. This can be done with the following command:<\/p>\n<pre>lerna add typescript-package --scope=react-package<\/pre>\n<p>Make sure to replace the package names in accordance with your project.<\/p>\n<p>Then add the package in your App.jsx or that part of your React application in which you want to use the typescript-package. In our case, we are going to add the following in our <a href=\"https:\/\/github.com\/anais-codefresh\/lerna-example\/blob\/master\/packages\/react-package\/src\/App.tsx\">App.tsx<\/a> file:<\/p>\n<pre>const name = require('typescript-package');<\/pre>\n<p>Next, we are going to use the function from the typescript-package file in our App.jsx file and display it in our React App.<\/p>\n<pre>const variable = name(\"Hanna\", \"Baum\");<\/pre>\n<p>And<\/p>\n<h2>{variable}<\/h2>\n<pre><\/pre>\n<p>When you now run the React App, you will see the output in your Browser:<\/p>\n<figure id=\"attachment_17897\" aria-describedby=\"caption-attachment-17897\" style=\"width: 300px\" class=\"wp-caption aligncenter\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/running-react-package.png\"><img class=\"size-medium wp-image-17897\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/running-react-package-300x213.png\" alt=\"running-react-package\" width=\"300\" height=\"213\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/running-react-package-300x213.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/running-react-package-1024x725.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/running-react-package-768x544.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/running-react-package-20x14.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/running-react-package.png 1108w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><figcaption id=\"caption-attachment-17897\" class=\"wp-caption-text\">Running the react-package from our Monorepo<\/figcaption><\/figure>\n<p><b>Testing<\/b><\/p>\n<p>We currently only have the testing files from the boilerplate React App set-up. However, we will want to test our Typescript app as well. Thus, we are going to add <a href=\"https:\/\/jestjs.io\/\">jest<\/a> to our <a href=\"https:\/\/github.com\/anais-codefresh\/lerna-example\/blob\/master\/packages\/typescript-package\/package.json\">package.json file<\/a> our typescript-project. In case you would want to add multiple typescript packages, you might want to add the testing-related dependencies in the root folder.<\/p>\n<pre>lerna add jest --scope=typescript-package<\/pre>\n<p>This will allow you to run the tests of your typescript project. Add the following script to your typescript-package <a href=\"https:\/\/github.com\/anais-codefresh\/lerna-example\/blob\/master\/packages\/typescript-package\/package.json\">package.json<\/a> file:<\/p>\n<pre>\"test\": \"jest\"<\/pre>\n<p><b>Adding Scripts for installing dependencies, testing, and starting your projects<\/b><\/p>\n<p>Now that we can run and test both projects, the typescript-package and the react-package, we want to execute the testing in both packages at the same time. Once we have more projects in our Monorepo, it will become more time consuming to do the testing in sequential order without having to run the same command multiple times across packages. So let\u2019s test packages in parallel. Add the following script to the <a href=\"https:\/\/github.com\/anais-codefresh\/lerna-example\/blob\/master\/package.json\">package.json<\/a> file inside your root folder:<\/p>\n<pre>\"test\": \"lerna run test --parallel\",<\/pre>\n<p>The run command runs the command in each package that contains the script. Thus, Lerna will run the test script in both, the typescript-package and the react-package. With the &#8211;parallel flag we tell Lerna to execute the command in both packages in parallel independent of their respective outputs.<\/p>\n<p>You can now call the script by running the following command in the root of your project repository:<\/p>\n<pre>yarn test<\/pre>\n<p>We will add several more scripts to execute processes across all our packages.<\/p>\n<ol>\n<li>The \u2018<a href=\"https:\/\/github.com\/lerna\/lerna\/tree\/master\/commands\/exec\">lerna exec<\/a>\u2019 command will execute the same command in all packages.\n<pre>\"start\": \"lerna exec yarn start\",<\/pre>\n<\/li>\n<li>\u201c<a href=\"https:\/\/github.com\/lerna\/lerna\/tree\/master\/commands\/bootstrap#readme\">lerna bootstrap<\/a>\u201d is used to install all dependencies and any cross-dependencies between packages. This command is needed when the process is first set-up.\n<pre>\"boot\": \"yarn global add lerna &amp;&amp; lerna bootstrap\",<\/pre>\n<\/li>\n<li>\u201c<a href=\"https:\/\/github.com\/lerna\/lerna\/tree\/master\/commands\/publish\">lerna publish<\/a>\u201d will either publish an existing package tagged in the current commit, publish a package in the latest commit where the version is not present, update an existing package, or publish an unversioned canary release of the package.\n<pre>\"release\": \"yarn install &amp;&amp; lerna publish &amp;&amp; yarn clean\",<\/pre>\n<\/li>\n<\/ol>\n<p>Read more about Lerna commands and others that you might want to use in your application in the <a href=\"https:\/\/github.com\/lerna\/lerna\">official Lerna documentation<\/a>.<\/p>\n<p><b>Commands for installing and upgrading dependencies<\/b><\/p>\n<p>As we have seen before, you can add dependencies to specific packages. Here is just a recap:<\/p>\n<ol>\n<li>Add package A as a dependency to package B:\n<pre>lerna add package-A --scope=package-B<\/pre>\n<\/li>\n<li>Separately, you could also add one external dependency to a specific package:\n<pre>lerna add external dependency --scope=package-name<\/pre>\n<\/li>\n<li>The third option is adding a dependency to all packages by including it into your package.json file in the root folder.\n<pre>lerna add package-name<\/pre>\n<\/li>\n<\/ol>\n<h3>Lerna &#8212; meet Codefresh<\/h3>\n<p>Imagine running all the commands manually every time that you want to make changes to your app. Our goal is to make this easier for you using Codefresh pipelines.<\/p>\n<p>Codefresh includes comprehensive built-in support for building Docker images and pushing them to Docker registries. Combined with dedicated Kubernetes dashboards, Codefresh is a one-stop-shop for microservice development.<\/p>\n<p>This section will show you how to set-up your Codefresh pipeline to make the best out of Lerna. At the end of this section, we will have a working Codefresh pipeline that automatically pushes changes in our Monorepo to the Docker Hub.<\/p>\n<figure id=\"attachment_17898\" aria-describedby=\"caption-attachment-17898\" style=\"width: 300px\" class=\"wp-caption aligncenter\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/codefresh-pipeline.png\"><img class=\"size-medium wp-image-17898\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/codefresh-pipeline-300x60.png\" alt=\"codefresh-pipeline\" width=\"300\" height=\"60\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/codefresh-pipeline-300x60.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/codefresh-pipeline-1024x204.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/codefresh-pipeline-768x153.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/codefresh-pipeline-1536x305.png 1536w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/codefresh-pipeline-20x4.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/codefresh-pipeline.png 1600w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><figcaption id=\"caption-attachment-17898\" class=\"wp-caption-text\">Codefresh Pipelines<\/figcaption><\/figure>\n<p>In short, this is the process:<\/p>\n<p>Codefresh will need a Dockerfile to build the Docker image of your Monorepo for your application pipeline. Thus, we are going to create the Dockerfile first.<\/p>\n<pre># Pull official base image\nFROM node:14.9.0 as build-deps\n \n# A directory within the virtualized Docker environment\n# Becomes more relevant when using Docker Compose later\nWORKDIR \/usr\/src\/app\n \n# Install lerna globally using npm\nRUN npm i lerna -g\n \n# Copy your packages\nCOPY packages\/react-package .\/packages\/react-package\nCOPY packages\/typescript-package .\/packages\/typescript-package\n \n# Copies package.json and package-lock.json to Docker environment\nCOPY package.json yarn.lock lerna.json .\/\n# Installs all node packages across packages\nRUN lerna bootstrap\n \n# Copies everything over to Docker environment\nCOPY . .\/\n \n# Installs all node packages\nRUN cd .\/packages\/react-package &amp;&amp; npm run build\n \n# the base image for this is an alpine based nginx image\nFROM nginx:1.19-alpine\n \n# copy the build folder from react to the root of nginx (www)\nCOPY --from=build-deps \/usr\/src\/app\/packages\/react-package\/build \/usr\/share\/nginx\/html\n \n# expose port 80 to the outer world\nEXPOSE 80\n \n# start nginx\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n<\/pre>\n<p>You can verify that it is working by running:<\/p>\n<pre>docker build -t  .<\/pre>\n<p>And<\/p>\n<pre>docker run -d -p 3000:80<\/pre>\n<p>Make sure to have a <a href=\"https:\/\/github.com\/anais-codefresh\/lerna-example\/blob\/master\/.dockerignore\">.dockerignore<\/a> set-up. This will allow you to optimize your Docker build. You can learn more about best practices and the importance of not ignoring dockerignore<a href=\"https:\/\/codefresh.io\/docker-tutorial\/not-ignore-dockerignore-2\/\"> from this article<\/a>.<\/p>\n<p>If you do not have a Codefresh account, go ahead and <a href=\"https:\/\/codefresh.io\/codefresh-signup\/?utm_source=Blog&amp;utm_medium=Post&amp;utm_campaign=lernamonorepo\">create one<\/a> to follow along. The free account is sufficient.<\/p>\n<p>Now that we have the account, we have to connect it to a <a href=\"https:\/\/codefresh.io\/docs\/docs\/integrations\/docker-registries\/\">Container Registry<\/a>. In our case, we are going to use the <a href=\"https:\/\/codefresh.io\/docs\/docs\/integrations\/docker-registries\/github-container-registry\/\">GitHub Container Registry<\/a>.<\/p>\n<p>For this, go to the Account Settings &#8212; then Integrations &#8212; and now select the Docker Registries like shown below:<\/p>\n<figure id=\"attachment_17899\" aria-describedby=\"caption-attachment-17899\" style=\"width: 300px\" class=\"wp-caption aligncenter\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/docker-registry.png\"><img class=\"size-medium wp-image-17899\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/docker-registry-300x138.png\" alt=\"docker-registry\" width=\"300\" height=\"138\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/docker-registry-300x138.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/docker-registry-1024x470.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/docker-registry-768x352.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/docker-registry-1536x705.png 1536w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/docker-registry-20x9.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/docker-registry.png 1600w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><figcaption id=\"caption-attachment-17899\" class=\"wp-caption-text\">Adding your Docker Registry to Codefresh<\/figcaption><\/figure>\n<p>Account Setting Configuration &#8212; Docker Registries<\/p>\n<p>Select \u201cOther Registries\u201d:<\/p>\n<figure id=\"attachment_17900\" aria-describedby=\"caption-attachment-17900\" style=\"width: 300px\" class=\"wp-caption aligncenter\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/other-registry.png\"><img class=\"size-medium wp-image-17900\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/other-registry-300x81.png\" alt=\"other-registry\" width=\"300\" height=\"81\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/other-registry-300x81.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/other-registry-1024x275.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/other-registry-768x206.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/other-registry-1536x413.png 1536w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/other-registry-20x5.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/other-registry.png 1600w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><figcaption id=\"caption-attachment-17900\" class=\"wp-caption-text\">Selecting &#8220;Other Registries&#8221; from the options<\/figcaption><\/figure>\n<p>And now configure your Docker Registry to use the Github Container Registry. The inputs are detailed in the screenshot below:<\/p>\n<figure id=\"attachment_17901\" aria-describedby=\"caption-attachment-17901\" style=\"width: 300px\" class=\"wp-caption aligncenter\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/github-container-registry.png\"><img class=\"size-medium wp-image-17901\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/github-container-registry-300x151.png\" alt=\"github-container-registry\" width=\"300\" height=\"151\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/github-container-registry-300x151.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/github-container-registry-1024x516.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/github-container-registry-768x387.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/github-container-registry-1536x775.png 1536w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/github-container-registry-20x10.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/github-container-registry.png 1600w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><figcaption id=\"caption-attachment-17901\" class=\"wp-caption-text\">Filling out the details for the GitHub Container Registry<\/figcaption><\/figure>\n<p>Note that the username is your GitHub username; the Repository Prefix details which repository do you want to reference by default.<\/p>\n<p>Next, we want to create a new Codefresh Pipeline and tell our Pipeline to use our Monorepo.<\/p>\n<p>To do so, please go to the main page, create a new Project, and then within the Project a new Pipeline. Please follow the instructions provided.<\/p>\n<p>If you are connected to GitHub, you have to select the repository that you want to use to build the pipeline. Select the repository like displayed and hit \u201ccreate\u201d:<\/p>\n<figure id=\"attachment_17902\" aria-describedby=\"caption-attachment-17902\" style=\"width: 272px\" class=\"wp-caption aligncenter\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/creating-pipeline.png\"><img class=\"size-medium wp-image-17902\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/creating-pipeline-272x300.png\" alt=\"creating-pipeline\" width=\"272\" height=\"300\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/creating-pipeline-272x300.png 272w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/creating-pipeline-18x20.png 18w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/creating-pipeline.png 714w\" sizes=\"(max-width: 272px) 100vw, 272px\" \/><\/a><figcaption id=\"caption-attachment-17902\" class=\"wp-caption-text\">Creating a Codefresh Pipeline<\/figcaption><\/figure>\n<p>Codefresh will automatically create a codefresh.yml file. This file will be used to build your pipeline.<\/p>\n<figure id=\"attachment_17903\" aria-describedby=\"caption-attachment-17903\" style=\"width: 300px\" class=\"wp-caption aligncenter\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/codefresh-yaml.png\"><img class=\"size-medium wp-image-17903\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/codefresh-yaml-300x216.png\" alt=\"codefresh-yaml\" width=\"300\" height=\"216\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/codefresh-yaml-300x216.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/codefresh-yaml-1024x737.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/codefresh-yaml-768x552.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/codefresh-yaml-20x14.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/codefresh-yaml.png 1265w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><figcaption id=\"caption-attachment-17903\" class=\"wp-caption-text\">Auto-generated Codefresh YALM<\/figcaption><\/figure>\n<p>Now hit run and you can watch your pipeline being built. The build step in your codefresh.yml file will automatically push your Docker image to the Docker Registry specified.<\/p>\n<figure id=\"attachment_17904\" aria-describedby=\"caption-attachment-17904\" style=\"width: 300px\" class=\"wp-caption aligncenter\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/codefresh-pipeline-built.png\"><img class=\"size-medium wp-image-17904\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/codefresh-pipeline-built-300x152.png\" alt=\"codefresh-pipeline-built\" width=\"300\" height=\"152\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/codefresh-pipeline-built-300x152.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/codefresh-pipeline-built-1024x518.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/codefresh-pipeline-built-768x389.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/codefresh-pipeline-built-1536x778.png 1536w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/codefresh-pipeline-built-20x10.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/codefresh-pipeline-built.png 1600w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><figcaption id=\"caption-attachment-17904\" class=\"wp-caption-text\">Watch your Codefresh Pipeline being built<\/figcaption><\/figure>\n<p>Once the build has been finished, you can view the image of your Monorepo on the GitHub Container Registry within \u201cPackages\u201d:<\/p>\n<figure id=\"attachment_17910\" aria-describedby=\"caption-attachment-17910\" style=\"width: 300px\" class=\"wp-caption aligncenter\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/github-container-registry-1.png\"><img class=\"size-medium wp-image-17910\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/github-container-registry-1-300x154.png\" alt=\"github-container-registry\" width=\"300\" height=\"154\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/github-container-registry-1-300x154.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/github-container-registry-1-768x394.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/github-container-registry-1-20x10.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/github-container-registry-1.png 942w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><figcaption id=\"caption-attachment-17910\" class=\"wp-caption-text\">View your Docker image in the GitHub Container Registry<\/figcaption><\/figure>\n<p>To learn more about the GitHub Container Registry, please have a <a href=\"https:\/\/codefresh.io\/docs\/docs\/integrations\/docker-registries\/github-container-registry\/\">look at this tutorial.<\/a><\/p>\n<h3><b>Summary<\/b><\/h3>\n<p>In this tutorial, we first provided:<\/p>\n<ul>\n<li>An overview of Monorepos and Lerna;<\/li>\n<li>A Monorepo that includes both a typescript-project and a react-project, which has as its dependency the former;<\/li>\n<li>Different Lerna commands that you can use to reference both projects and update dependencies.<\/li>\n<\/ul>\n<p>The second part of the tutorial provided a walk-through of setting up a Dockerfile and Codefresh pipeline for your Monorepo.<\/p>\n<p>We hope this tutorial was useful. If you have any questions, comments, or suggestions please comment below and <a href=\"https:\/\/community.codefresh.io\/\">feel free to reach out.<\/a><\/p>\n<p>New to Codefresh? <a href=\"https:\/\/codefresh.io\/codefresh-signup\/?utm_source=Blog&amp;utm_medium=Post&amp;utm_campaign=lernamonorepo\">Create Your Free Account today<\/a>!<\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"17892\"\/>","protected":false},"excerpt":{"rendered":"<p>Managing dependencies across multiple repositories and implementing updates to multiple repositories at the same time can be a time consuming and error-prone task. Thus, organizations have taken the approach of managing multiple projects in the same repository, called a Monorepo. The benefits of using a Monorepo become clear with the right tooling. One of those &hellip; <a href=\"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/\">Read more<\/a><\/p>\n","protected":false},"author":82,"featured_media":17913,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[8,1538,1854,6],"tags":[14,19,53,117,3226,5510,5515,5535,5536,5537],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Managing Your Typescript Monorepo With Lerna and Codefresh<\/title>\n<meta name=\"description\" content=\"In this blog, you will learn about Monorepos and its benefits, and how you can create and manage your Monorepo with Lerna.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Managing Your Typescript Monorepo With Lerna and Codefresh\" \/>\n<meta property=\"og:description\" content=\"In this blog, you will learn about Monorepos and its benefits, and how you can create and manage your Monorepo with Lerna.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2020-11-03T16:26:59+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-06T15:44:37+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/lerna-codefresh.png\" \/>\n\t<meta property=\"og:image:width\" content=\"1640\" \/>\n\t<meta property=\"og:image:height\" content=\"624\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@urlichsanais\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Anais Urlichs\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"15 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/lerna-codefresh.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/lerna-codefresh.png\",\"width\":1640,\"height\":624,\"caption\":\"lerna-codefresh\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/#webpage\",\"url\":\"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/\",\"name\":\"Managing Your Typescript Monorepo With Lerna and Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/#primaryimage\"},\"datePublished\":\"2020-11-03T16:26:59+00:00\",\"dateModified\":\"2022-01-06T15:44:37+00:00\",\"description\":\"In this blog, you will learn about Monorepos and its benefits, and how you can create and manage your Monorepo with Lerna.\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Managing Your Typescript Monorepo With Lerna and Codefresh\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/8b7465f259c87e2ad71c81f4cfbf6487\"},\"headline\":\"Managing Your Typescript Monorepo With Lerna and Codefresh\",\"datePublished\":\"2020-11-03T16:26:59+00:00\",\"dateModified\":\"2022-01-06T15:44:37+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/#webpage\"},\"wordCount\":2751,\"commentCount\":1,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/lerna-codefresh.png\",\"keywords\":[\"docker\",\"node.js\",\"CI\/CD\",\"docker pipelines\",\"monorepo\",\"codefresh pipeline\",\"tutorial\",\"lerna\",\"typescript\",\"react\"],\"articleSection\":[\"Docker Tutorials\",\"DevOps Tutorials\",\"Docker Registry\",\"How Tos\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/8b7465f259c87e2ad71c81f4cfbf6487\",\"name\":\"Anais Urlichs\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/f8e8faa1d1e7bf3f82b40b9d1f1587c4?s=96&d=blank&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/f8e8faa1d1e7bf3f82b40b9d1f1587c4?s=96&d=blank&r=g\",\"caption\":\"Anais Urlichs\"},\"description\":\"Ana\u00efs is a Developer Evangelist at Codefresh, the modern, fast, and powerful CI\/CD &amp; GitOps automation platform that streamlines your pipelines. When she is not advocating DevOps best practices, she runs her own YouTube Channel centered around Kubernetes. Before Codefresh, she worked in the blockchain space, contributing to Community Management and Developer Relations of open source projects. Her passion lies in making tools and projects more accessible to developers and community members.\",\"sameAs\":[\"https:\/\/twitter.com\/urlichsanais\"],\"url\":\"https:\/\/codefresh.io\/author\/anais-codefresh\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Managing Your Typescript Monorepo With Lerna and Codefresh","description":"In this blog, you will learn about Monorepos and its benefits, and how you can create and manage your Monorepo with Lerna.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/","og_locale":"en_US","og_type":"article","og_title":"Managing Your Typescript Monorepo With Lerna and Codefresh","og_description":"In this blog, you will learn about Monorepos and its benefits, and how you can create and manage your Monorepo with Lerna.","og_url":"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2020-11-03T16:26:59+00:00","article_modified_time":"2022-01-06T15:44:37+00:00","og_image":[{"width":1640,"height":624,"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/lerna-codefresh.png","type":"image\/png"}],"twitter_card":"summary_large_image","twitter_creator":"@urlichsanais","twitter_site":"@codefresh","twitter_misc":{"Written by":"Anais Urlichs","Est. reading time":"15 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/lerna-codefresh.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/lerna-codefresh.png","width":1640,"height":624,"caption":"lerna-codefresh"},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/#webpage","url":"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/","name":"Managing Your Typescript Monorepo With Lerna and Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/#primaryimage"},"datePublished":"2020-11-03T16:26:59+00:00","dateModified":"2022-01-06T15:44:37+00:00","description":"In this blog, you will learn about Monorepos and its benefits, and how you can create and manage your Monorepo with Lerna.","breadcrumb":{"@id":"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/howtos\/lerna-monorepo\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Managing Your Typescript Monorepo With Lerna and Codefresh"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/8b7465f259c87e2ad71c81f4cfbf6487"},"headline":"Managing Your Typescript Monorepo With Lerna and Codefresh","datePublished":"2020-11-03T16:26:59+00:00","dateModified":"2022-01-06T15:44:37+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/#webpage"},"wordCount":2751,"commentCount":1,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/howtos\/lerna-monorepo\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/11\/lerna-codefresh.png","keywords":["docker","node.js","CI\/CD","docker pipelines","monorepo","codefresh pipeline","tutorial","lerna","typescript","react"],"articleSection":["Docker Tutorials","DevOps Tutorials","Docker Registry","How Tos"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/howtos\/lerna-monorepo\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/8b7465f259c87e2ad71c81f4cfbf6487","name":"Anais Urlichs","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/f8e8faa1d1e7bf3f82b40b9d1f1587c4?s=96&d=blank&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/f8e8faa1d1e7bf3f82b40b9d1f1587c4?s=96&d=blank&r=g","caption":"Anais Urlichs"},"description":"Ana\u00efs is a Developer Evangelist at Codefresh, the modern, fast, and powerful CI\/CD &amp; GitOps automation platform that streamlines your pipelines. When she is not advocating DevOps best practices, she runs her own YouTube Channel centered around Kubernetes. Before Codefresh, she worked in the blockchain space, contributing to Community Management and Developer Relations of open source projects. Her passion lies in making tools and projects more accessible to developers and community members.","sameAs":["https:\/\/twitter.com\/urlichsanais"],"url":"https:\/\/codefresh.io\/author\/anais-codefresh\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/17892"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/82"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=17892"}],"version-history":[{"count":1,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/17892\/revisions"}],"predecessor-version":[{"id":20935,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/17892\/revisions\/20935"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/17913"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=17892"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=17892"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=17892"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}