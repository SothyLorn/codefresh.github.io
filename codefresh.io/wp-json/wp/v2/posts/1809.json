{"id":1809,"date":"2017-02-16T22:26:08","date_gmt":"2017-02-16T22:26:08","guid":{"rendered":"https:\/\/codefresh.io\/?p=1809"},"modified":"2022-03-01T17:23:43","modified_gmt":"2022-03-01T17:23:43","slug":"simulating-raspberry-pi-gpio-automated-build-testing-docker","status":"publish","type":"post","link":"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/","title":{"rendered":"Automated Docker testing everywhere, even on the Raspberry Pi"},"content":{"rendered":"<p>The Raspberry Pi is a tinker&#8217;s dream. It&#8217;s a small, cheap computer you can use to power just about anything. It&#8217;s the perfect custom IoT ingredient thanks to the GPIO (General Purpose Input\/Output) that lets you wire up external devices like LEDs, motors, etc.\u00a0As with any application, IoT applications need testing and should\u00a0have an automatic test flow to verify code as it&#8217;s changed. Problems start to arise when using the Raspberry Pi GPIO because the library used on the Pi doesn&#8217;t work with PCs. Most of the methods on the internet involve\u00a0switching libraries between the Pi and PC. While those methods are working they provide inconsistent results because different libraries have different dependencies and may behave differently depending on their hardware environment.<\/p>\n<p>This is the exact kind of problem Docker is designed to solve!<!--more--><\/p>\n<p>Running Docker on the Raspberry Pi already works well (see\u00a0<a href=\"https:\/\/www.raspberrypi.org\/blog\/docker-comes-to-raspberry-pi\/\">this blog<\/a>). Since Docker on the Pi is growing in popularity, I decided to experiment with creating a Raspberry Pi application based on Docker and to add in a\u00a0CI pipeline to automate testing.<\/p>\n<p><img class=\"size-medium wp-image-1845 alignleft\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/IMG_20170213_095354-300x300.jpg\" alt=\"\" width=\"300\" height=\"300\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/IMG_20170213_095354-300x300.jpg 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/IMG_20170213_095354-150x150.jpg 150w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/IMG_20170213_095354-768x765.jpg 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/IMG_20170213_095354-1024x1020.jpg 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/IMG_20170213_095354-329x328.jpg 329w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/>I built a simple web\u00a0application to control a simple LED (see my setup left). Here&#8217;s the code written on Node.js:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">'use strict';\r\n\r\nlet express = require('express');\r\nlet bodyParser = require('body-parser');\r\nlet Gpio = require('onoff').Gpio;\r\nlet app = express();\r\n\r\nlet led = Gpio(2, 'out');\r\n\r\napp.use(bodyParser.json());\r\n\r\napp.post('\/led', function (req, res) {\r\n    let value = parseInt(req.body.value);\r\n    led.write(value, () =&gt; {\r\n        res.send();\r\n    });\r\n});\r\n\r\napp.listen(3000, function () {\r\n    console.log('Example app listening on port 3000!')\r\n});\r\n<\/pre>\n<p>The full code for this simple application can be found on <a href=\"https:\/\/github.com\/roy-codefresh\/RaspiCiExample\">github<\/a>. The CI system I used is a custom version of our Codefresh platform that has been adjusted to build and run images on Raspberry Pi.<\/p>\n<h2>Creating And Testing a Docker Image In Codefresh<\/h2>\n<p>Once we have our code, the next\u00a0step\u00a0to fully automated CI is\u00a0to create a Docker image. We will start of course with a Dockerfile. We need to use images built specifically for the\u00a0Raspberry Pi because of the compatibility to the arm processor. The recommended Docker image for Node.js on the Raspberry Pi is <span class=\"lang:default decode:true crayon-inline\">resin\/raspberrypi-node<\/span>\u00a0. Here&#8217;s\u00a0my Dockerfile:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">FROM resin\/raspberrypi-node\r\n\r\nWORKDIR \/code\/\r\n\r\nADD .\/package.json .\/package.json\r\n\r\nRUN npm install\r\n\r\nADD .\/index.js .\/index.js\r\n\r\nCMD [\"node\", \"index.js\"]\r\n<\/pre>\n<p>Thanks to my custom Codefresh, I&#8217;m able to build this image automatically after every commit. With Codefresh I can configure all my tests (unit\/integration).<\/p>\n<p>Now that we have a image for the\u00a0raspberry pi we need a way to confirm that the image is doing what it is expected to do. The problem is that if we\u00a0run this image and make our checks we need\u00a0to use the actual GPIO of the Raspberry Pi, this can be a problem if we want to test multiple images the same time. So to run integration tests on\u00a0our image we need to simulate the GPIO.<\/p>\n<p>The GPIO in Raspbian is\u00a0controlled by writing and reading into files (found at\u00a0<span class=\"lang:default decode:true crayon-inline\">\/sys\/class\/gpio\/<\/span>). As an example,\u00a0when you want to use the GPIO on pin 2, you\u00a0write the value\u00a0<span class=\"lang:default decode:true crayon-inline\">2<\/span>\u00a0to a file named\u00a0<span class=\"lang:default decode:true crayon-inline\">export<\/span>. After doing that the Raspbian\u00a0creates a directory named <span class=\"lang:default decode:true crayon-inline\">gpio2<\/span> with files defining\u00a0the GPIO pin. Like the file\u00a0<span class=\"lang:default decode:true crayon-inline\">direction<\/span> that defines if the pin is used for output or input\u00a0and\u00a0The file\u00a0<span class=\"lang:default decode:true crayon-inline\">value<\/span>\u00a0which contain the current state of the pin\u00a0<span class=\"lang:default decode:true crayon-inline\">1<\/span>\u00a0for HIGH and\u00a0<span class=\"lang:default decode:true crayon-inline\">0<\/span>\u00a0for LOW. Those files used to\u00a0read the definition AND\u00a0writing the definition. So when you want your program to set the pin to LOW, it will write\u00a0<span class=\"lang:default decode:true crayon-inline\">out<\/span>\u00a0to the\u00a0<span class=\"lang:default decode:true crayon-inline\">direction<\/span> file and then it will write <span class=\"lang:default decode:true crayon-inline\">0<\/span> to the <span class=\"lang:default decode:true crayon-inline\">value<\/span> file.<\/p>\n<p>With that in mind,\u00a0I created a simple simulator\u00a0for the GPIO. This simulator is also a docker image and contains a script\u00a0towatch the files in the directory\u00a0<span class=\"lang:default decode:true crayon-inline\">\/gpio<\/span>\u00a0(It&#8217;s can be found on <a href=\"https:\/\/github.com\/roy-codefresh\/RaspiDockerGpioSimulator\">this github repo<\/a>). To use the simulator we need to create a volume and mount it to the simulator container on path\u00a0<span class=\"lang:default decode:true crayon-inline\">\/gpio<\/span>. We can then use it to test by\u00a0mounting the volume to path\u00a0<span class=\"lang:default decode:true crayon-inline\">\/sys\/class\/gpio\/<\/span>\u00a0in our test image. Thanks to <span class=\"lang:default decode:true crayon-inline \">docker-compose<\/span>\u00a0, setting up the\u00a0composition is easy.\u00a0Here&#8217;s what it looks like<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\">version: '2.1'\r\nservices:\r\n  led-control:\r\n    image: roycodefresh\/raspiciexample\r\n    volumes:\r\n      - gpio:\/sys\/class\/gpio\r\n    depends_on:\r\n      gpio-simulator:\r\n        condition: service_healthy\r\n  gpio-simulator:\r\n    image: roycodefresh\/raspidockergpiosimulator:master\r\n    volumes:\r\n      - gpio:\/gpio\r\nvolumes:\r\n  gpio:\r\n    driver: local\r\n<\/pre>\n<p>To help us test the setup I\u00a0added a new service, which will work with the Rest API of the simulator. This is recommended way to handle integration testing for Docker using Codefresh. Setting up our application this\u00a0way\u00a0lets us\u00a0check our image without using the real GPIO. My test is a simple HTTP request to the LED controller application and then to the simulator to see that the change have been made.\u00a0Here&#8217;s the code<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">'use strict';\r\n\r\nlet request = require('request-json');\r\nlet expect  = require('expect');\r\n\r\nlet ledControl = request.createClient('http:\/\/led-control:3000\/');\r\nlet gpioSimulator = request.createClient('http:\/\/gpio-simulator:4500\/');\r\n\r\ndescribe('LED Application', () =&gt; {\r\n\r\n    it('turn the led on', (done) =&gt; {\r\n        ledControl.post('led', { value:  1 }, err =&gt; {\r\n            if (err) {\r\n                done(err);\r\n                return;\r\n            }\r\n\r\n            gpioSimulator.get('out\/2', (err, res, value) =&gt; {\r\n                if (err) {\r\n                    done(err);\r\n                    return;\r\n                }\r\n\r\n                expect(value).toEqual(1);\r\n                done();\r\n            })\r\n        });\r\n    });\r\n    \r\n    it('turn the led off', (done) =&gt; {\r\n        ledControl.post('led', { value: 0 }, err =&gt; {\r\n            if (err) {\r\n                done(err);\r\n                return;\r\n            }\r\n\r\n            gpioSimulator.get('out\/2', (err, res, value) =&gt; {\r\n                if (err) {\r\n                    done(err);\r\n                    return;\r\n                }\r\n\r\n                expect(value).toEqual(0);\r\n                done();\r\n            })\r\n        });\r\n    });\r\n    \r\n});\r\n\r\n<\/pre>\n<p>&nbsp;<\/p>\n<p>After we have finished the integrations tests we can\u00a0deploy it to a test environment. My application is designed to change make the LED blink based on API requests so\u00a0it makes sense to test it with a service that hits that API. Here, <span class=\"lang:default decode:true crayon-inline \">docker-compose<\/span>\u00a0 is again a big help. Let&#8217;s add the service:<\/p>\n<p>&nbsp;<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\">version: '2.1'\r\nservices:\r\n  led-control:\r\n    image: 'roycodefresh\/raspiciexample:master'\r\n    privileged: true\r\n    ports:\r\n      - 3000\r\n  blinker:\r\n    image: 'roycodefresh\/raspiciexample:master'\r\n    command: \"node -e \\\"\\\r\n        let blink = 0; \\\r\n        let ledControl = require('request-json').createClient('http:\/\/led-control:3000\/'); \\\r\n        setInterval(() =&gt; { \\\r\n          blink = (blink + 1) % 2; \\\r\n          ledControl.post('led', { value: blink }, () =&gt; {}) \\\r\n        }, 500); \\\"\"<\/pre>\n<p>The environment feature in Codefresh will normally spin up new code on AWS but I&#8217;ve set it here to deploy the\u00a0blinking LED service\u00a0to my Raspberry Pi.<img class=\"size-medium wp-image-1851 aligncenter\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/IMG_20170213_124520-300x238.jpg\" alt=\"\" width=\"300\" height=\"238\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/IMG_20170213_124520-300x238.jpg 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/IMG_20170213_124520-768x608.jpg 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/IMG_20170213_124520-1024x811.jpg 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/IMG_20170213_124520-414x328.jpg 414w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/p>\n<h2>What Next?<\/h2>\n<h2>Deploying\u00a0the image<\/h2>\n<p>Since we were able to create the docker image, we can deploy it to any production environment we want. To use an actual GPIO we would need to add the flag <span class=\"lang:default decode:true crayon-inline \">&#8211;privileged<\/span>\u00a0 when we are running the image.<\/p>\n<h2>Using advanced GPIO features<\/h2>\n<p>In this example I used a simple GPIO output, the simulator I wrote only simulated that feature. Even though I didn&#8217;t simulate GPIO input, it&#8217;s pretty straightforward. There are lots of\u00a0more complex GPIO\u00a0features worth simulating such as SPI, which is used for accessing hardware registers directly.<\/p>\n<h2>Raspberry Pi on Production Codefresh<\/h2>\n<p>As I wrote above, to create this experiment i used a customized version of Codefresh. Using Codefresh to create Raspberry Pi images is not yet available but we are hoping we can\u00a0add support soon. If you are interested in experimenting with\u00a0your Raspberry Pi images on Codefresh\u00a0<a href=\"https:\/\/codefresh.io\/contact-us\/\">contact\u00a0us<\/a>, we&#8217;re looking for beta users.<\/p>\n<h2>Want to test more?<\/h2>\n<p>Try Codefresh, it&#8217;s the best way to run all <a href=\"https:\/\/codefresh.io\">Docker testing<\/a>.<\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"1809\"\/>","protected":false},"excerpt":{"rendered":"<p>The Raspberry Pi is a tinker&#8217;s dream. It&#8217;s a small, cheap computer you can use to power just about anything. It&#8217;s the perfect custom IoT ingredient thanks to the GPIO (General Purpose Input\/Output) that lets you wire up external devices like LEDs, motors, etc.\u00a0As with any application, IoT applications need testing and should\u00a0have an automatic &hellip; <a href=\"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/\">Read more<\/a><\/p>\n","protected":false},"author":36,"featured_media":2321,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[8],"tags":[14,75,76,77,78],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Automated Docker testing everywhere, even on the Raspberry Pi | Codefresh<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Automated Docker testing everywhere, even on the Raspberry Pi\" \/>\n<meta property=\"og:description\" content=\"The Raspberry Pi is a tinker&#8217;s dream. It&#8217;s a small, cheap computer you can use to power just about anything. It&#8217;s the perfect custom IoT ingredient thanks to the GPIO (General Purpose Input\/Output) that lets you wire up external devices like LEDs, motors, etc.\u00a0As with any application, IoT applications need testing and should\u00a0have an automatic &hellip; Read more\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2017-02-16T22:26:08+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-03-01T17:23:43+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Docker-Raspbery-Pi-Automation-1.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1500\" \/>\n\t<meta property=\"og:image:height\" content=\"394\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@codefresh\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Roy Shmueli\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"6 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Docker-Raspbery-Pi-Automation-1.jpg\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Docker-Raspbery-Pi-Automation-1.jpg\",\"width\":1500,\"height\":394},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/#webpage\",\"url\":\"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/\",\"name\":\"Automated Docker testing everywhere, even on the Raspberry Pi | Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/#primaryimage\"},\"datePublished\":\"2017-02-16T22:26:08+00:00\",\"dateModified\":\"2022-03-01T17:23:43+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Automated Docker testing everywhere, even on the Raspberry Pi\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/f3f1426b8c3a99d718e0e66b4716d871\"},\"headline\":\"Automated Docker testing everywhere, even on the Raspberry Pi\",\"datePublished\":\"2017-02-16T22:26:08+00:00\",\"dateModified\":\"2022-03-01T17:23:43+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/#webpage\"},\"wordCount\":974,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Docker-Raspbery-Pi-Automation-1.jpg\",\"keywords\":[\"docker\",\"raspberry pi\",\"raspbian\",\"automated testing\",\"ci\"],\"articleSection\":[\"Docker Tutorials\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/f3f1426b8c3a99d718e0e66b4716d871\",\"name\":\"Roy Shmueli\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/9044cb40b31d41cb14ed14059193197e?s=96&d=blank&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/9044cb40b31d41cb14ed14059193197e?s=96&d=blank&r=g\",\"caption\":\"Roy Shmueli\"},\"url\":\"https:\/\/codefresh.io\/author\/roy\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Automated Docker testing everywhere, even on the Raspberry Pi | Codefresh","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/","og_locale":"en_US","og_type":"article","og_title":"Automated Docker testing everywhere, even on the Raspberry Pi","og_description":"The Raspberry Pi is a tinker&#8217;s dream. It&#8217;s a small, cheap computer you can use to power just about anything. It&#8217;s the perfect custom IoT ingredient thanks to the GPIO (General Purpose Input\/Output) that lets you wire up external devices like LEDs, motors, etc.\u00a0As with any application, IoT applications need testing and should\u00a0have an automatic &hellip; Read more","og_url":"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2017-02-16T22:26:08+00:00","article_modified_time":"2022-03-01T17:23:43+00:00","og_image":[{"width":1500,"height":394,"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Docker-Raspbery-Pi-Automation-1.jpg","type":"image\/jpeg"}],"twitter_card":"summary_large_image","twitter_creator":"@codefresh","twitter_site":"@codefresh","twitter_misc":{"Written by":"Roy Shmueli","Est. reading time":"6 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Docker-Raspbery-Pi-Automation-1.jpg","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Docker-Raspbery-Pi-Automation-1.jpg","width":1500,"height":394},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/#webpage","url":"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/","name":"Automated Docker testing everywhere, even on the Raspberry Pi | Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/#primaryimage"},"datePublished":"2017-02-16T22:26:08+00:00","dateModified":"2022-03-01T17:23:43+00:00","breadcrumb":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Automated Docker testing everywhere, even on the Raspberry Pi"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/f3f1426b8c3a99d718e0e66b4716d871"},"headline":"Automated Docker testing everywhere, even on the Raspberry Pi","datePublished":"2017-02-16T22:26:08+00:00","dateModified":"2022-03-01T17:23:43+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/#webpage"},"wordCount":974,"commentCount":0,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/02\/Docker-Raspbery-Pi-Automation-1.jpg","keywords":["docker","raspberry pi","raspbian","automated testing","ci"],"articleSection":["Docker Tutorials"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/docker-tutorial\/simulating-raspberry-pi-gpio-automated-build-testing-docker\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/f3f1426b8c3a99d718e0e66b4716d871","name":"Roy Shmueli","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/9044cb40b31d41cb14ed14059193197e?s=96&d=blank&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/9044cb40b31d41cb14ed14059193197e?s=96&d=blank&r=g","caption":"Roy Shmueli"},"url":"https:\/\/codefresh.io\/author\/roy\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/1809"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/36"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=1809"}],"version-history":[{"count":2,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/1809\/revisions"}],"predecessor-version":[{"id":21746,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/1809\/revisions\/21746"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/2321"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=1809"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=1809"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=1809"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}