{"id":18410,"date":"2020-12-22T02:37:37","date_gmt":"2020-12-22T10:37:37","guid":{"rendered":"https:\/\/codefresh.io\/?p=18410"},"modified":"2022-01-06T15:43:50","modified_gmt":"2022-01-06T15:43:50","slug":"helm-deployment-environments","status":"publish","type":"post","link":"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/","title":{"rendered":"Using Helm to Deploy a Kubernetes Application to Multiple Environments (QA\/Stage\/Prod)"},"content":{"rendered":"<p>One of the most typical challenges when deploying a complex application is the handling of different deployment environments during the software lifecycle.<\/p>\n<p>The most typical setup is the trilogy of QA\/Staging\/Production environments. An application developer needs an easy way to deploy to the different environments and also to understand what version is deployed where.<\/p>\n<p>Specifically for Kubernetes deployments, the Helm package manager is a great solution for handling environment configuration. And with the power of Codefresh, you also have access to a visual dashboard for inspecting all your environments on a single screen.<\/p>\n<figure id=\"attachment_18411\" aria-describedby=\"caption-attachment-18411\" style=\"width: 1024px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/environment-board.png\"><img class=\"size-large wp-image-18411\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/environment-board-1024x595.png\" alt=\"\" width=\"1024\" height=\"595\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/environment-board-1024x595.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/environment-board-300x174.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/environment-board-768x446.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/environment-board-20x12.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/environment-board.png 1382w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/a><figcaption id=\"caption-attachment-18411\" class=\"wp-caption-text\">Environment board<\/figcaption><\/figure>\n<p>In this guide, we will see how you can deploy an example application to different environments using different Helm values and how to automate the whole process with Codefresh pipelines.<\/p>\n<h2>How Helm handles different environment configurations<\/h2>\n<p><a href=\"https:\/\/helm.sh\/\">Helm<\/a> is the package manager of Kubernetes. Helm packages (called charts) are a set of Kubernetes manifests (that include templates) plus a set of values for these templates.<\/p>\n<p>While normally a Helm chart contains only <a href=\"https:\/\/helm.sh\/docs\/chart_template_guide\/values_files\/\">a single values file<\/a> (for the default configuration), it makes sense to create different value files for all different environments.<\/p>\n<p>You can find an example application that follows this practice at: <a href=\"https:\/\/github.com\/codefresh-contrib\/helm-promotion-sample-app\/tree\/master\/chart\">https:\/\/github.com\/codefresh-contrib\/helm-promotion-sample-app\/tree\/master\/chart<\/a><\/p>\n<figure id=\"attachment_18413\" aria-describedby=\"caption-attachment-18413\" style=\"width: 1024px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/editor.png\"><img class=\"size-large wp-image-18413\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/editor-1024x554.png\" alt=\"\" width=\"1024\" height=\"554\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/editor-1024x554.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/editor-300x162.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/editor-768x416.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/editor-20x11.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/editor.png 1086w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/a><figcaption id=\"caption-attachment-18413\" class=\"wp-caption-text\">Helm values<\/figcaption><\/figure>\n<p>Here we have 3 values files for each environment:<\/p>\n<ul>\n<li><a href=\"https:\/\/github.com\/codefresh-contrib\/helm-promotion-sample-app\/blob\/master\/chart\/values-qa.yaml\">QA Values<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/codefresh-contrib\/helm-promotion-sample-app\/blob\/master\/chart\/values-staging.yaml\">Staging<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/codefresh-contrib\/helm-promotion-sample-app\/blob\/master\/chart\/values-prod.yaml\">Production<\/a><\/li>\n<\/ul>\n<p>If you look at the values you will see that we have defined both application level properties (e.g. username and password for a database) as well as properties for Kubernetes manifests (e.g. number of replicas).<\/p>\n<h2>Manual deployments with Helm<\/h2>\n<p>Before automating the deployment, let\u2019s get familiar with how the application looks in different environments by installing it manually with the Helm executable.<\/p>\n<p>Helm is using the same credentials as kubectl for cluster access, so before starting with Helm:<\/p>\n<ol>\n<li>Obtain access to a Kubernetes cluster (either on the cloud or a local one like <a href=\"https:\/\/codefresh.io\/kubernetes-tutorial\/local-kubernetes-linux-minikube-vs-microk8s\/\">microk8s <\/a>or <a href=\"https:\/\/codefresh.io\/howtos\/local-kubernetes-windows-minikube-vs-docker-desktop\/\">minikube or Docker for desktop<\/a>)<\/li>\n<li>Setup your terminal with a kubeconfig (instructions differ depending on your cluster type)<\/li>\n<li><a href=\"https:\/\/kubernetes.io\/docs\/tasks\/tools\/install-kubectl\/\">Download kubectl<\/a> and make sure it can connect to the cluster<\/li>\n<\/ol>\n<p>Feel free also to work with the cloud shell of your cloud provider if available, as it configures everything for you in advance (and in some cases, even Helm is preinstalled).<\/p>\n<p>To verify your local kubeconfig type:<\/p>\n<pre>&gt;kubectl get nodes\nNAME                       STATUS   ROLES   AGE   VERSION\naks-agentpool-36431463-1   Ready    agent   55d   v1.16.15\naks-agentpool-36431463-2   Ready    agent   49d   v1.16.15\n<\/pre>\n<p>If everything goes ok you should see a list of nodes that comprise your cluster.<\/p>\n<p><a href=\"https:\/\/helm.sh\/docs\/intro\/install\/\">Download the latest version of Helm<\/a> on your local workstation and verify that it is working correctly by typing<\/p>\n<pre>helm ls\n<\/pre>\n<p>You should get an empty report since we haven\u2019t deployed our application yet. Let\u2019s do that now.<\/p>\n<p>First let\u2019s create 3 namespaces, one for each &#8220;environment&#8221;:<\/p>\n<pre>kubectl create namespace qa\nkubectl create namespace staging\nkubectl create namespace production\n<\/pre>\n<p>And then deploy the Helm chart on each environment by passing a different values file for each installation:<\/p>\n<pre>git clone https:\/\/github.com\/codefresh-contrib\/helm-promotion-sample-app.git\ncd helm-promotion-sample-app\/chart\n\nhelm install example-qa sample-app -n qa -f values-qa.yaml\nhelm install example-staging sample-app -n staging -f values-staging.yaml\nhelm install example-prod sample-app -n production -f values-prod.yaml\n<\/pre>\n<p>You should now wait a bit so that all deployments come up.<br \/>\nYou can see all your deployments with:<\/p>\n<pre>&gt;helm ls -A\nexample-prod    production      1               deployed        sample-app-0.1.0        1.0.0\nexample-qa      qa              1               deployed        sample-app-0.1.0        1.0.0\nexample-staging staging         1               deployed        sample-app-0.1.0        1.0.0\n<\/pre>\n<p>Each application also exposes a public endpoint. You can find the IP addresses with:<\/p>\n<pre>kubectl get svc -A\n<\/pre>\n<p>Look under the \u201cexternal-ip\u201d column. Open the respective URL in your browser and you will see how the application looks on each environment:<\/p>\n<figure id=\"attachment_18414\" aria-describedby=\"caption-attachment-18414\" style=\"width: 620px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/different-settings.png\"><img class=\"size-full wp-image-18414\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/different-settings.png\" alt=\"\" width=\"620\" height=\"673\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/different-settings.png 620w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/different-settings-276x300.png 276w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/different-settings-18x20.png 18w\" sizes=\"(max-width: 620px) 100vw, 620px\" \/><\/a><figcaption id=\"caption-attachment-18414\" class=\"wp-caption-text\">Different settings per environment<\/figcaption><\/figure>\n<p>To uninstall your app you can also use Helm like below:<\/p>\n<pre>helm uninstall example-staging -n staging\nhelm uninstall example-prod -n production\nhelm uninstall example-qa -n qa\n<\/pre>\n<p>Note that if you are using a cloud Kubernetes cluster, the load balancers used in the apps cost extra, and it is best to delete your apps at the end of this tutorial.<\/p>\n<p>You should also remove the namespaces if you want to clean-up your cluster completely.<\/p>\n<h2>Using Helm values in Kubernetes manifests<\/h2>\n<p>Now that you have seen how the application looks in each environment, we can dive into the details on how the Helm values are actually used.<\/p>\n<p>For the values that deal with the Kubernetes cluster, the process is straightforward. Helm includes a templating mechanism that allows you to replace common properties in Kubernetes manifests.<\/p>\n<p>As an example, the number of replicas of the application is <a href=\"https:\/\/github.com\/codefresh-contrib\/helm-promotion-sample-app\/blob\/master\/chart\/sample-app\/templates\/deployment.yaml#L8\">parameterized<\/a>.<\/p>\n<pre>apiVersion: apps\/v1\nkind: Deployment\nmetadata:\n  [...]\nspec:\n  replicas: {{ .Values.replicaCount }}\n<\/pre>\n<p>Here we pass the <code>replicaCount<\/code> parameter to the deployment YAML.<\/p>\n<p>You can see the definition of replicaCount inside the values YAML for <a href=\"https:\/\/github.com\/codefresh-contrib\/helm-promotion-sample-app\/blob\/master\/chart\/values-prod.yaml#L5\">each environment<\/a>. For example, the production environment defines 2 replicas, while the QA and staging environments have only one.<\/p>\n<p>For more information on templates see the <a href=\"https:\/\/helm.sh\/docs\/chart_template_guide\/functions_and_pipelines\/\">Helm documentation page<\/a>.<\/p>\n<p>This explains the templating capabilities of Helm for Kubernetes manifests. But how do we pass values to the application itself?<\/p>\n<h2>Using Helm values in application code<\/h2>\n<p>There are many ways to pass values to an application, but one of the easiest ones is using plain files (for a small number of values you could also use environment variables.<\/p>\n<p>The format of the file depends on your programming language and framework. Some popular solutions are Java properties, .env files, Windows INI, and even JSON or YAML.<\/p>\n<p>The example application uses the INI file format and <a href=\"https:\/\/github.com\/codefresh-contrib\/helm-promotion-sample-app\/blob\/master\/simple-web-server.go#L37\">searches for the file \/config\/settings.ini<\/a>. Here is <a href=\"https:\/\/github.com\/codefresh-contrib\/helm-promotion-sample-app\/blob\/master\/settings.ini\">an example of the file<\/a>:<\/p>\n<pre># possible values: production, development, staging, QA\napp_mode = development\n\n[security]\n# Path to SSL certificates\ncertificates = \/etc\/ssl\/dev\n\n[paypal]\npaypal_url = https:\/\/development.paypal.example.com\n\n[mysql]\ndb_user = devuser\ndb_password = devpassword\n<\/pre>\n<p>These settings are all dummy variables. They are not actually used in the application, they are only shown in the http response as plain text.<\/p>\n<p>This means that once the application is deployed to the cluster, we need to provide a file in this format in the \/config\/settings.ini path inside the container.<\/p>\n<p>There are many ways to do that in Kubernetes (init containers, volumes) but the simplest one is via the use of <a href=\"https:\/\/kubernetes.io\/docs\/concepts\/configuration\/configmap\/\">configmaps<\/a>. A config map is a configuration object that holds specific variables that can be passed in the application container in multiple forms such as a file or as environment variables. In our case, we will use a configmap-passed-as-file as this is what our application expects.<\/p>\n<p>Here is the <a href=\"https:\/\/github.com\/codefresh-contrib\/helm-promotion-sample-app\/blob\/master\/chart\/sample-app\/templates\/settings-cm.yml\">content <\/a>of our configmap.<\/p>\n<pre>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: application-settings\ndata:\n  settings.ini: |\n    # possible values : production, development, staging, qa\n    app_mode = {{ .Values.appMode }}\n\n    [security]\n    # Path to SSL certificates\n    certificates = {{ .Values.certificatePath }}\n\n    [paypal]\n    paypal_url = {{ .Values.paypalURLLocation }}\n\n    [mysql]\n    db_user = {{ .Values.databaseUser }}\n    db_password = {{ .Values.databasePassword }}\n<\/pre>\n<p>As you can see, because the configmap is part of the Helm chart, we have the capability to template the values of the configmap like any other Kubernetes manifest. Notice also that this configmap is named as <code>application-settings<\/code> (we will use this name later in the deployment).<\/p>\n<p>The last piece of the puzzle is to tell Kubernetes to \u201cmount\u201d the contents of this configmap as a file at \/config. Here is the <a href=\"https:\/\/github.com\/codefresh-contrib\/helm-promotion-sample-app\/blob\/master\/chart\/sample-app\/templates\/deployment.yaml#L32\">part of the deployment YAML<\/a> that does this:<\/p>\n<pre>     containers:\n        [...]\n          volumeMounts:\n          - name: config-volume\n            mountPath: \/config    \n         [..]\n      volumes:\n        - name: config-volume\n          configMap:\n            name: application-settings\n<\/pre>\n<p>Now that we have seen all the pieces of the puzzle you should understand what happens behind the scenes when you deploy the application.<\/p>\n<ol>\n<li>Helm is gathering all the Kubernetes manifests (deployment + configmap+ service) along with the respective values file<\/li>\n<li>The properties that contain templates are replaced with their literal values. This also includes the configmap<\/li>\n<li>The resulting manifests are sent to Kubernetes by Helm<\/li>\n<li>Kubernetes is looking at the deployments and sees that it requires an extra configmap to be passed as a file<\/li>\n<li>The contents of the configmap are mounted at \/config\/settings.ini inside the application container<\/li>\n<li>The application starts and reads the configuration file (unaware of how the file was written there)<\/li>\n<\/ol>\n<h2>Using the Environment dashboard<\/h2>\n<p>Codefresh contains several graphical dashboards that allow you to get an overview of all your Helm releases and their current deployment status.<\/p>\n<p>For this particular case, the <a href=\"https:\/\/codefresh.io\/codefresh-news\/deployment-environment\/\">Environment dashboard<\/a> is the most helpful one, as it shows you the classical \u201cbox\u201d view that you would expect.<\/p>\n<figure id=\"attachment_18418\" aria-describedby=\"caption-attachment-18418\" style=\"width: 863px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/deployment-dashboard.png\"><img class=\"size-full wp-image-18418\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/deployment-dashboard.png\" alt=\"\" width=\"863\" height=\"466\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/deployment-dashboard.png 863w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/deployment-dashboard-300x162.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/deployment-dashboard-768x415.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/deployment-dashboard-20x11.png 20w\" sizes=\"(max-width: 863px) 100vw, 863px\" \/><\/a><figcaption id=\"caption-attachment-18418\" class=\"wp-caption-text\">Inspecting environments<\/figcaption><\/figure>\n<p>You can manually create entries in this dashboard by adding a new environment and pointing Codefresh to your cluster and the namespace of your release (we will automate this part as well with pipelines in the next section).<\/p>\n<figure id=\"attachment_18419\" aria-describedby=\"caption-attachment-18419\" style=\"width: 300px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/create-environment.png\"><img class=\"size-medium wp-image-18419\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/create-environment-300x300.png\" alt=\"Creating an environment entry\" width=\"300\" height=\"300\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/create-environment-300x300.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/create-environment-1024x1024.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/create-environment-150x150.png 150w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/create-environment-768x769.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/create-environment-85x85.png 85w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/create-environment-20x20.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/create-environment.png 1274w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><figcaption id=\"caption-attachment-18419\" class=\"wp-caption-text\">Creating an environment entry<\/figcaption><\/figure>\n<p>For more information on using the environment dashboard <a href=\"https:\/\/codefresh.io\/docs\/docs\/deploy-to-kubernetes\/environment-dashboard\/\">see the documentation page<\/a>.<\/p>\n<h2>Automating deployment to different environments with Codefresh pipelines<\/h2>\n<p>Using manually the helm executable to deploy our application is great for experimentation, but in a real application, you should create a pipeline that automatically deploys it to the respective environment.<\/p>\n<p>There are many ways to deploy in multiple environments and your own process will depend on your team and your organizational needs. Some popular workflows are:<\/p>\n<ol>\n<li>Using a single pipeline that deploys the master branch to production and all other non-master branches to staging and\/or QA<\/li>\n<li>Using a single pipeline that deploys all commits to staging and then waiting for manual approval. If approval is granted the commit is also deployed to production<\/li>\n<li>Using multiple pipelines where one pipeline is responsible for production deployments only and another pipeline is deploying staging releases on a regular schedule (a.k.a. Nightly builds)<\/li>\n<li>Using multiple pipelines where one pipeline is deploying to production for the master branch and other pipelines are deploying to QA\/stating only when a Pull request is created<\/li>\n<\/ol>\n<p>There are more possibilities and all of them are possible with Codefresh. For our example we will focus on the first case, a single pipeline that depending on the branch name will deploy the application to the respective environment. Here is the graphical view:<\/p>\n<figure id=\"attachment_18420\" aria-describedby=\"caption-attachment-18420\" style=\"width: 1024px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/non-production-deployment.png\"><img class=\"size-large wp-image-18420\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/non-production-deployment-1024x548.png\" alt=\"Single deployment pipeline\" width=\"1024\" height=\"548\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/non-production-deployment-1024x548.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/non-production-deployment-300x161.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/non-production-deployment-768x411.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/non-production-deployment-20x11.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/non-production-deployment.png 1384w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/a><figcaption id=\"caption-attachment-18420\" class=\"wp-caption-text\">Single deployment pipeline<\/figcaption><\/figure>\n<p>And here is the pipeline definition:<\/p>\n<pre>version: \"1.0\"\nstages:\n  - \"clone\"\n  - \"build\"\n  - \"deployment\"\n\nsteps:\n  clone:\n    title: \"Cloning repository\"\n    type: \"git-clone\"\n    repo: \"codefresh-contrib\/helm-promotion-sample-app\"\n    revision: '${{CF_REVISION}}'\n    stage: \"clone\"\n\n  build:\n    title: \"Building Docker image\"\n    type: \"build\"\n    image_name: \"kostiscodefresh\/helm-promotion-app\"\n    working_directory: \"${{clone}}\"\n    tags:\n    - \"latest\"\n    - '${{CF_SHORT_REVISION}}'\n    dockerfile: \"Dockerfile\"\n    stage: \"build\"\n    registry: dockerhub  \n  deployStaging:\n    title: Deploying to Staging\n    type: helm\n    stage: deployment\n    working_directory: .\/helm-promotion-sample-app\n    arguments:\n      action: install\n      chart_name: .\/chart\/sample-app\n      release_name: example-staging\n      helm_version: 3.0.2\n      kube_context: 'mydemoAkscluster@BizSpark Plus'\n      namespace: staging\n      custom_value_files:\n      - .\/chart\/values-staging.yaml\n    when:\n      branch:\n        ignore:\n          - master \n    env:\n      name: Acme Staging\n      endpoints:\n      - name: app\n        url: https:\/\/staging.example.com\n      type: helm-release\n      change: ${{CF_COMMIT_MESSAGE}}\n      filters:\n      - cluster: 'mydemoAkscluster@BizSpark Plus'\n        releaseName: example-staging  \n  deployProd:\n    title: Deploying to Production\n    type: helm\n    stage: deployment\n    working_directory: .\/helm-promotion-sample-app\n    arguments:\n      action: install\n      chart_name: .\/chart\/sample-app\n      release_name: example-prod\n      helm_version: 3.0.2\n      kube_context: 'mydemoAkscluster@BizSpark Plus'\n      namespace: production\n      custom_value_files:\n      - .\/chart\/values-prod.yaml\n    when:\n      branch:\n        only:\n          - master  \n    env:\n      name: Acme Production\n      endpoints:\n      - name: app\n        url: https:\/\/production.example.com\n      type: helm-release\n      change: ${{CF_COMMIT_MESSAGE}}\n      filters:\n      - cluster: 'mydemoAkscluster@BizSpark Plus'\n        releaseName: example-prod\n<\/pre>\n<p>The pipeline has 4 steps<\/p>\n<ol>\n<li>A <a href=\"https:\/\/codefresh.io\/docs\/docs\/codefresh-yaml\/steps\/git-clone\/\">clone step<\/a> that fetches the code from git when a commit is pushed<\/li>\n<li>A <a href=\"https:\/\/codefresh.io\/docs\/docs\/codefresh-yaml\/steps\/build\/\">build step<\/a> that creates a docker image and pushes it a registry<\/li>\n<li>A <a href=\"https:\/\/codefresh.io\/steps\/step\/helm\">Helm deploy step<\/a> that deploys to production if the branch is \u201cmaster\u201d<\/li>\n<li>A Helm deploy step that deploys to \u201cstaging\u201d if the branch is not \u201cmaster\u201d<\/li>\n<\/ol>\n<p>The last two steps use <a href=\"https:\/\/codefresh.io\/docs\/docs\/codefresh-yaml\/conditional-execution-of-steps\/\">pipeline conditionals<\/a>, so only one of them will be executed according to the branch name. They also <a href=\"http:\/\/docs\/codefresh-yaml\/deployment-environments\/\">define which environments<\/a> are affected in the environment dashboard.<\/p>\n<p>If you start committing and pushing to the different branches you will see the appropriate deploy step executing (you can also run the pipeline manually and simply choose a branch by yourself).<\/p>\n<p>For alternative workflows regarding environment deployments <a href=\"https:\/\/codefresh.io\/docs\/docs\/ci-cd-guides\/environment-deployments\/\">see the documentation page<\/a>.<\/p>\n<h2>Moving from predefined environments to dynamic environments<\/h2>\n<p>As you have seen, using helm for different environments is straightforward and trivial to automate with Codefresh pipelines. But can we improve the process any further?<br \/>\nUsing predefined environments is the traditional way of deploying applications and works well for several scenarios. Given the elastic nature of Kubernetes however, static environments are not always cost-effective.<\/p>\n<p>A more advanced practice would be to have dynamic environments (apart from production) that are created on-demand when a Pull Request is opened and torn down when a pull request is closed. We will see this scenario in our next tutorial.<\/p>\n<p>New to Codefresh? <a href=\"https:\/\/codefresh.io\/codefresh-signup\/?utm_source=Blog&amp;utm_medium=Post&amp;utm_campaign=helmenvironments\">Create Your Free Account today<\/a>!<\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"18410\"\/>","protected":false},"excerpt":{"rendered":"<p>One of the most typical challenges when deploying a complex application is the handling of different deployment environments during the software lifecycle. The most typical setup is the trilogy of QA\/Staging\/Production environments. An application developer needs an easy way to deploy to the different environments and also to understand what version is deployed where. Specifically &hellip; <a href=\"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/\">Read more<\/a><\/p>\n","protected":false},"author":62,"featured_media":17816,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[2367,1657,1505,1538],"tags":[14,15,44,52,53,59,68,594,994,5512],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Using Helm to Deploy Kubernetes to Multiple Environments<\/title>\n<meta name=\"description\" content=\"In this blog, you will learn how you can deploy an example application to different environments and how to automate the whole process with Codefresh pipelines.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Using Helm to Deploy a Kubernetes Application to Multiple Environments (QA\/Stage\/Prod)\" \/>\n<meta property=\"og:description\" content=\"In this blog, you will learn how you can deploy an example application to different environments and how to automate the whole process with Codefresh pipelines.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2020-12-22T10:37:37+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-06T15:43:50+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/10\/blog-background.png\" \/>\n\t<meta property=\"og:image:width\" content=\"1500\" \/>\n\t<meta property=\"og:image:height\" content=\"750\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@codefresh\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Kostis Kapelonis\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"11 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/10\/blog-background.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/10\/blog-background.png\",\"width\":1500,\"height\":750,\"caption\":\"blog-header\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/#webpage\",\"url\":\"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/\",\"name\":\"Using Helm to Deploy Kubernetes to Multiple Environments\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/#primaryimage\"},\"datePublished\":\"2020-12-22T10:37:37+00:00\",\"dateModified\":\"2022-01-06T15:43:50+00:00\",\"description\":\"In this blog, you will learn how you can deploy an example application to different environments and how to automate the whole process with Codefresh pipelines.\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Using Helm to Deploy a Kubernetes Application to Multiple Environments (QA\/Stage\/Prod)\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87\"},\"headline\":\"Using Helm to Deploy a Kubernetes Application to Multiple Environments (QA\/Stage\/Prod)\",\"datePublished\":\"2020-12-22T10:37:37+00:00\",\"dateModified\":\"2022-01-06T15:43:50+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/#webpage\"},\"wordCount\":1762,\"commentCount\":5,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/10\/blog-background.png\",\"keywords\":[\"docker\",\"continuous integration\",\"Kubernetes\",\"devops\",\"CI\/CD\",\"codefresh\",\"continuous delivery\",\"deployments\",\"helm\",\"Helm Chart\"],\"articleSection\":[\"Helm Tutorials\",\"Kubernetes Tutorials\",\"Containers\",\"DevOps Tutorials\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87\",\"name\":\"Kostis Kapelonis\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png\",\"caption\":\"Kostis Kapelonis\"},\"description\":\"Kostis is a software engineer\/technical-writer dual class character. He lives and breathes automation, good testing practices and stress-free deployments with GitOps.\",\"url\":\"https:\/\/codefresh.io\/author\/kostiscodefresh-io\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Using Helm to Deploy Kubernetes to Multiple Environments","description":"In this blog, you will learn how you can deploy an example application to different environments and how to automate the whole process with Codefresh pipelines.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/","og_locale":"en_US","og_type":"article","og_title":"Using Helm to Deploy a Kubernetes Application to Multiple Environments (QA\/Stage\/Prod)","og_description":"In this blog, you will learn how you can deploy an example application to different environments and how to automate the whole process with Codefresh pipelines.","og_url":"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2020-12-22T10:37:37+00:00","article_modified_time":"2022-01-06T15:43:50+00:00","og_image":[{"width":1500,"height":750,"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/10\/blog-background.png","type":"image\/png"}],"twitter_card":"summary_large_image","twitter_creator":"@codefresh","twitter_site":"@codefresh","twitter_misc":{"Written by":"Kostis Kapelonis","Est. reading time":"11 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/10\/blog-background.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/10\/blog-background.png","width":1500,"height":750,"caption":"blog-header"},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/#webpage","url":"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/","name":"Using Helm to Deploy Kubernetes to Multiple Environments","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/#primaryimage"},"datePublished":"2020-12-22T10:37:37+00:00","dateModified":"2022-01-06T15:43:50+00:00","description":"In this blog, you will learn how you can deploy an example application to different environments and how to automate the whole process with Codefresh pipelines.","breadcrumb":{"@id":"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Using Helm to Deploy a Kubernetes Application to Multiple Environments (QA\/Stage\/Prod)"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87"},"headline":"Using Helm to Deploy a Kubernetes Application to Multiple Environments (QA\/Stage\/Prod)","datePublished":"2020-12-22T10:37:37+00:00","dateModified":"2022-01-06T15:43:50+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/#webpage"},"wordCount":1762,"commentCount":5,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/10\/blog-background.png","keywords":["docker","continuous integration","Kubernetes","devops","CI\/CD","codefresh","continuous delivery","deployments","helm","Helm Chart"],"articleSection":["Helm Tutorials","Kubernetes Tutorials","Containers","DevOps Tutorials"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/helm-tutorial\/helm-deployment-environments\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87","name":"Kostis Kapelonis","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png","caption":"Kostis Kapelonis"},"description":"Kostis is a software engineer\/technical-writer dual class character. He lives and breathes automation, good testing practices and stress-free deployments with GitOps.","url":"https:\/\/codefresh.io\/author\/kostiscodefresh-io\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/18410"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/62"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=18410"}],"version-history":[{"count":1,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/18410\/revisions"}],"predecessor-version":[{"id":20934,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/18410\/revisions\/20934"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/17816"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=18410"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=18410"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=18410"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}