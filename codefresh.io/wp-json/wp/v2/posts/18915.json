{"id":18915,"date":"2021-03-26T04:04:00","date_gmt":"2021-03-26T12:04:00","guid":{"rendered":"https:\/\/codefresh.io\/?p=18915"},"modified":"2021-04-14T05:08:43","modified_gmt":"2021-04-14T13:08:43","slug":"minimize-failed-deployments-argo-rollouts-smoke-tests","status":"publish","type":"post","link":"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/","title":{"rendered":"Minimize failed deployments with Argo Rollouts and Smoke tests"},"content":{"rendered":"<p><a href=\"https:\/\/argoproj.github.io\/argo-rollouts\/\">Argo Rollouts<\/a> is a progressive delivery controller created for Kubernetes. It allows you to deploy your application with minimal\/zero downtime by adopting a gradual way of deploying instead of taking an \u201call at once\u201d approach.<\/p>\n<p>Argo Rollouts supercharges your Kubernetes cluster and in addition to the rolling updates you can now do<\/p>\n<ul>\n<li>Blue\/green deployments<\/li>\n<li>Canary deployments<\/li>\n<li>A\/B tests<\/li>\n<li>Automatic rollbacks<\/li>\n<li>Integrated Metric analysis<\/li>\n<\/ul>\n<p>In this article, we will see a simple example that combines blue\/green deployments with smoke tests that decide if the new application version will be promoted or not.<\/p>\n<h2>How Blue\/Green deployments work<\/h2>\n<p>Before we look at the magic sauce behind Argo Rollouts, it is important to know the basics behind Blue\/Green deployments (also known as Red\/Black).<\/p>\n<figure id=\"attachment_18916\" aria-describedby=\"caption-attachment-18916\" style=\"width: 981px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/how-blue-green-works.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/how-blue-green-works.png\" alt=\"How Blue\/Green deployments work\" width=\"981\" height=\"1231\" class=\"size-full wp-image-18916\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/how-blue-green-works.png 981w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/how-blue-green-works-239x300.png 239w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/how-blue-green-works-816x1024.png 816w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/how-blue-green-works-768x964.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/how-blue-green-works-16x20.png 16w\" sizes=\"(max-width: 981px) 100vw, 981px\" \/><\/a><figcaption id=\"caption-attachment-18916\" class=\"wp-caption-text\">How Blue\/Green deployments work<\/figcaption><\/figure>\n<p>In the beginning, there is only one version active (single color). Once a new application is deployed a second instance of the application is created (two colors). The critical point here is that the new color does not receive any live traffic. All users are still on the old version.<\/p>\n<p>Once developers are confident that the new version is ready to go, all live traffic is switched to the second color. The big advantage here is that if something goes wrong, developers can simply switch the traffic back to the previous version. It is always faster to switch a load balancer than redeploying again.<\/p>\n<p>After some time, the previous version can be discarded completely. This is mostly because of wasted resources, but not strictly necessary. In several variations, the previous color can stay behind as a failsafe.<\/p>\n<h2>Previewing the next color with Argo Rollouts<\/h2>\n<p>Now that we have seen how blue\/green deployments work in general, let\u2019s see what Argo Rollouts does with Kubernetes.<\/p>\n<p>Argo Rollout is a Kubernetes controller and has <a href=\"https:\/\/argoproj.github.io\/argo-rollouts\/features\/bluegreen\/\">several options for Blue\/Green deployments<\/a>, but the most interesting one is the \u201cpreview\u201d service that allows you to test the new color before making the traffic switch to live users. You can easily install the operator in your cluster by following <a href=\"https:\/\/argoproj.github.io\/argo-rollouts\/installation\/\">the instructions<\/a>.<\/p>\n<p>You can find the example application at <a href=\"https:\/\/github.com\/codefresh-contrib\/argo-rollout-blue-green-sample-app\">https:\/\/github.com\/codefresh-contrib\/argo-rollout-blue-green-sample-app<\/a>. It is a simple Java application with two pods and no other dependencies.<\/p>\n<p>To perform the initial deployment, clone the git repository locally and edit the file <code>blue-green-manual-approval\/rollout.yaml<\/code> by replacing <code>CF_SHORT_REVISION <\/code>with any available tag from <a href=\"https:\/\/hub.docker.com\/r\/kostiscodefresh\/argo-rollouts-blue-green-sample-app\/tags?page=1&#038;ordering=last_updated\">dockerhub <\/a>(for example <code>8b39c04<\/code>)<\/p>\n<p>Save the file and then perform the first deployment with<\/p>\n<pre>\nkubectl create ns blue-green\nkubectl apply -f .\/blue-green-manual-approval -n blue-green\n<\/pre>\n<p>Here is the initial state using the <a href=\"http:\/\/kubeview.benco.io\/\">kubeview graphical tool<\/a>.<\/p>\n<figure id=\"attachment_18918\" aria-describedby=\"caption-attachment-18918\" style=\"width: 1628px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/01_initial.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/01_initial.png\" alt=\"Initial application state\" width=\"1628\" height=\"695\" class=\"size-full wp-image-18918\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/01_initial.png 1628w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/01_initial-300x128.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/01_initial-1024x437.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/01_initial-768x328.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/01_initial-1536x656.png 1536w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/01_initial-20x9.png 20w\" sizes=\"(max-width: 1628px) 100vw, 1628px\" \/><\/a><figcaption id=\"caption-attachment-18918\" class=\"wp-caption-text\">Initial application state<\/figcaption><\/figure>\n<p>We can see that the application has two pods and we also have two services pointing at them. The service named \u201crollout-bluegreen-active\u201d is the one for live traffic. The one named \u201crollout-bluegreen-preview\u201d is internal and currently should not serve any traffic. It also points to the same color as the live one.<\/p>\n<p>If you also want to monitor things from the command line be sure to install the <a href=\"https:\/\/argoproj.github.io\/argo-rollouts\/features\/kubectl-plugin\/\">Argo rollouts CLI <\/a>and run<\/p>\n<pre>\nkubectl argo rollouts get rollout spring-sample-app-deployment --watch -n blue-green\n<\/pre>\n<p>The next step is to create a new version of the application. You can either change again the image tag on the manifest (and run <code>kubectl apply<\/code> again) or simply use the shortcut offered by Argo Rollouts<\/p>\n<pre>\nkubectl argo rollouts set image spring-sample-app-deployment spring-sample-app-container=kostiscodefresh\/argo-rollouts-blue-green-sample-app:9c7732e -n blue-green\n<\/pre>\n<p>The image tag you use is arbitrary. It just needs to be different than the current one. As soon as Argo Rollouts detects the change it will do the following:<\/p>\n<ol>\n<li>Create a brand new replica set with 2 pods for the new color<\/li>\n<li>Redirect the \u201cpreview\u201d service to them<\/li>\n<\/ol>\n<p>Here is how it looks in Kubeview:<\/p>\n<figure id=\"attachment_18920\" aria-describedby=\"caption-attachment-18920\" style=\"width: 1198px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/02_two_colors.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/02_two_colors.png\" alt=\"New version created\" width=\"1198\" height=\"695\" class=\"size-full wp-image-18920\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/02_two_colors.png 1198w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/02_two_colors-300x174.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/02_two_colors-1024x594.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/02_two_colors-768x446.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/02_two_colors-20x12.png 20w\" sizes=\"(max-width: 1198px) 100vw, 1198px\" \/><\/a><figcaption id=\"caption-attachment-18920\" class=\"wp-caption-text\">New version created<\/figcaption><\/figure>\n<p>The CLI will also report the second replicaset:<\/p>\n<figure id=\"attachment_18921\" aria-describedby=\"caption-attachment-18921\" style=\"width: 1068px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/monitor-argo-rollouts.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/monitor-argo-rollouts.png\" alt=\"Two colors present\" width=\"1068\" height=\"573\" class=\"size-full wp-image-18921\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/monitor-argo-rollouts.png 1068w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/monitor-argo-rollouts-300x161.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/monitor-argo-rollouts-1024x549.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/monitor-argo-rollouts-768x412.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/monitor-argo-rollouts-20x11.png 20w\" sizes=\"(max-width: 1068px) 100vw, 1068px\" \/><\/a><figcaption id=\"caption-attachment-18921\" class=\"wp-caption-text\">Two colors present<\/figcaption><\/figure>\n<p>This is one of the most critical points in a blue\/green deployment. At this point all live users are still on the old version of the application. For them, it is business as usual and they are completely unaffected by what is happening behind the scenes.<\/p>\n<p>It is now your responsibility to check the next version by utilizing the \u201cpreview\u201d service that Argo Rollouts offers. Maybe you need to look at the health checks, check its metrics or even better run some smoke tests that verify the correctness of the new version.<\/p>\n<p>You can easily find the IP of the preview service with<\/p>\n<pre>\nkubectl get svc  rollout-bluegreen-preview -n blue-green\n<\/pre>\n<p>The application has some dummy endpoints at <code>\/actuator\/health<\/code> and <code>\/actuator\/metrics<\/code> that you can visit with your browser. We will automate the process with Codefresh in the next section.<\/p>\n<p>Once everything looks good we can promote the deployment with:<\/p>\n<pre>\nkubectl argo rollouts promote spring-sample-app-deployment -n blue-green\n<\/pre>\n<p>This is the moment of truth. This command will instruct Argo Rollout to switch live traffic (i.e. all your users to the new version).<\/p>\n<figure id=\"attachment_18922\" aria-describedby=\"caption-attachment-18922\" style=\"width: 1488px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/03_switch_traffic.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/03_switch_traffic.png\" alt=\"Live traffic switched to new version\" width=\"1488\" height=\"679\" class=\"size-full wp-image-18922\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/03_switch_traffic.png 1488w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/03_switch_traffic-300x137.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/03_switch_traffic-1024x467.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/03_switch_traffic-768x350.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/03_switch_traffic-20x9.png 20w\" sizes=\"(max-width: 1488px) 100vw, 1488px\" \/><\/a><figcaption id=\"caption-attachment-18922\" class=\"wp-caption-text\">Live traffic switched to new version<\/figcaption><\/figure>\n<p>As you can see both services now point to the new version. The old version is still kept around for quick rollbacks. After a specified amount of time (30seconds is the default value), Argo Rollouts will completely destroy the old version.<\/p>\n<figure id=\"attachment_18923\" aria-describedby=\"caption-attachment-18923\" style=\"width: 1483px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/04_scale_down.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/04_scale_down.png\" alt=\"Old version was discarded\" width=\"1483\" height=\"669\" class=\"size-full wp-image-18923\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/04_scale_down.png 1483w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/04_scale_down-300x135.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/04_scale_down-1024x462.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/04_scale_down-768x346.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/04_scale_down-20x9.png 20w\" sizes=\"(max-width: 1483px) 100vw, 1483px\" \/><\/a><figcaption id=\"caption-attachment-18923\" class=\"wp-caption-text\">Old version was discarded<\/figcaption><\/figure>\n<p>We are now back to the original state with just two pods of the new application version.<\/p>\n<p>A new deployment will repeat the whole process.<\/p>\n<p>If for some reason your smoke tests fail, and you don\u2019t want to promote the new version you can abort the whole process with<\/p>\n<pre>\nkubectl argo rollouts abort spring-sample-app-deployment -n blue-green\n<\/pre>\n<p>You can also go back to a previous version with<\/p>\n<pre>\nkubectl argo rollouts undo spring-sample-app-deployment -n blue-green\n<\/pre>\n<p>Argo rollouts has more options that allow you to choose the number of versions that stay behind, the amount of time each version is kept, which version to rollback to, and so on.<\/p>\n<p>See the <a href=\"https:\/\/argoproj.github.io\/argo-rollouts\/features\/specification\/\">whole rollout spec<\/a> for more details.<\/p>\n<p>Notice also that for simplicity reasons, the two services in the example are powered by Load Balancers. Check the pricing of your Cloud provider before running this example on your own and be sure to clean up everything after you finish.<\/p>\n<h2>Automating everything with a Codefresh pipeline<\/h2>\n<p>Now that we have seen how you can perform manually blue\/green deployments, it is time to automate the deployment process with Codefresh pipelines.<\/p>\n<p>The application comes with some simple integration tests (that require the application to run). These will be used as smoke tests.<\/p>\n<p>Following best practices, the target of the smoke test is configurable (and not hardcoded to localhost or other name). This means that you can easily run the smoke tests with any target regardless of the actual IP of your Loadbalancer.<\/p>\n<p>We will create the following pipeline:<\/p>\n<figure id=\"attachment_18928\" aria-describedby=\"caption-attachment-18928\" style=\"width: 1659px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/smoke-tests-pipeline.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/smoke-tests-pipeline.png\" alt=\"Blue\/Green pipeline\" width=\"1659\" height=\"863\" class=\"size-full wp-image-18928\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/smoke-tests-pipeline.png 1659w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/smoke-tests-pipeline-300x156.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/smoke-tests-pipeline-1024x533.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/smoke-tests-pipeline-768x400.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/smoke-tests-pipeline-1536x799.png 1536w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/smoke-tests-pipeline-20x10.png 20w\" sizes=\"(max-width: 1659px) 100vw, 1659px\" \/><\/a><figcaption id=\"caption-attachment-18928\" class=\"wp-caption-text\">Blue\/Green pipeline<\/figcaption><\/figure>\n<p>This pipeline does the following:<\/p>\n<ol>\n<li><a href=\"https:\/\/codefresh.io\/docs\/docs\/yaml-examples\/examples\/git-checkout\/\">Clones <\/a>the source code of the application<\/li>\n<li><a href=\"https:\/\/codefresh.io\/docs\/docs\/ci-cd-guides\/building-docker-images\/\">Builds<\/a> a docker image<\/li>\n<li><a href=\"https:\/\/codefresh.io\/docs\/docs\/deploy-to-kubernetes\/kubernetes-templating\/\">Deploys the application<\/a> by updating the Kubernetes manifests. Argo Rollouts sees the new manifest and creates a new \u201ccolor\u201d for the next version<\/li>\n<li>Runs integration tests against the \u201cpreview\u201d service created by Argo Rollouts. Live users are still on the previous\/stable version of the application.<\/li>\n<li>If smoke tests pass the new color is promoted and becomes the new active version<\/li>\n<li>If smoke tests fail the new color is discarded the all live users are not affected in any way<\/li>\n<\/ol>\n<p>Here is the <a href=\"https:\/\/codefresh.io\/docs\/docs\/codefresh-yaml\/what-is-the-codefresh-yaml\/\">pipeline definition<\/a>:<\/p>\n<pre>\ncodefresh.yml\nversion: \"1.0\"\nstages:\n  - prepare\n  - build\n  - deploy \n  - finish   \nsteps:\n  clone:\n    type: \"git-clone\"\n    stage: prepare\n    description: \"Cloning main repository...\"\n    repo: '${{CF_REPO_OWNER}}\/${{CF_REPO_NAME}}'\n    revision: \"${{CF_BRANCH}}\"\n  build_app_image:\n    title: Building Docker Image\n    type: build\n    stage: build\n    image_name: kostiscodefresh\/argo-rollouts-blue-green-sample-app\n    working_directory: \"${{clone}}\" \n    tags:\n    - \"latest\"\n    - '${{CF_SHORT_REVISION}}'\n    dockerfile: Dockerfile\n  start_deployment:\n    title: Deploying new color\n    stage: deploy\n    image: codefresh\/cf-deploy-kubernetes:master\n    working_directory: \"${{clone}}\"\n    commands:\n      - \/cf-deploy-kubernetes .\/blue-green-manual-approval\/service.yaml \n      - \/cf-deploy-kubernetes .\/blue-green-manual-approval\/service-preview.yaml   \n      - \/cf-deploy-kubernetes .\/blue-green-manual-approval\/rollout.yaml   \n    environment:\n      - KUBECONTEXT=mydemoAkscluster@BizSpark Plus\n      - KUBERNETES_NAMESPACE=blue-green \n  run_integration_tests:\n    title: Smoke tests\n    stage: deploy\n    image: maven:3.5.2-jdk-8-alpine\n    working_directory: \"${{clone}}\" \n    fail_fast: false\n    commands:\n     - mvn -Dmaven.repo.local=\/codefresh\/volume\/m2_repository verify -Dserver.host=http:\/\/13.86.102.74  -Dserver.port=80\n  promote_color:\n    title: Switching traffic to new color\n    stage: finish\n    image: kostiscodefresh\/kubectl-argo-rollouts:latest\n    commands:\n      - \/app\/kubectl-argo-rollouts-linux-amd64 promote spring-sample-app-deployment -n blue-green --context \"mydemoAkscluster@BizSpark Plus\"\n    when:\n      steps:\n      - name: run_integration_tests\n        on:\n        - success \n  abort_deployment:\n    title: Keeping the existing color\n    stage: finish\n    image: kostiscodefresh\/kubectl-argo-rollouts:latest\n    commands:\n      - \/app\/kubectl-argo-rollouts-linux-amd64 undo spring-sample-app-deployment -n blue-green --context \"mydemoAkscluster@BizSpark Plus\" \n    when:\n      steps:\n      - name: run_integration_tests\n        on:\n        - failure\n\n<\/pre>\n<p>You now have true Continuous Deployment! All deployments are fully automatic and \u201cbad\u201d application versions (that don\u2019t pass the smoke tests) will never reach production.<\/p>\n<p>Argo Rollouts has many more capabilities that we will see in the next posts of this series. For more details on Blue\/Green deployment as well as an example with manual approval see the <a href=\"https:\/\/codefresh.io\/docs\/docs\/ci-cd-guides\/progressive-delivery\/#blue-green-deployments\">documentation page<\/a>.<\/p>\n<p>New to Codefresh? <a href=\"https:\/\/codefresh.io\/codefresh-signup\/?utm_source=Blog&#038;utm_medium=Post&#038;utm_campaign=argo-blue-green\">Create Your Free Account today<\/a>!<\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"18915\"\/>","protected":false},"excerpt":{"rendered":"<p>Argo Rollouts is a progressive delivery controller created for Kubernetes. It allows you to deploy your application with minimal\/zero downtime by adopting a gradual way of deploying instead of taking an \u201call at once\u201d approach. Argo Rollouts supercharges your Kubernetes cluster and in addition to the rolling updates you can now do Blue\/green deployments Canary &hellip; <a href=\"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/\">Read more<\/a><\/p>\n","protected":false},"author":62,"featured_media":18248,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[3120,5467,1657,1505,1538,6],"tags":[14,15,44,52,53,59,68,3123,5508,5565],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Minimize failed deployments with Argo Rollouts and Smoke tests | Codefresh<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Minimize failed deployments with Argo Rollouts and Smoke tests\" \/>\n<meta property=\"og:description\" content=\"Argo Rollouts is a progressive delivery controller created for Kubernetes. It allows you to deploy your application with minimal\/zero downtime by adopting a gradual way of deploying instead of taking an \u201call at once\u201d approach. Argo Rollouts supercharges your Kubernetes cluster and in addition to the rolling updates you can now do Blue\/green deployments Canary &hellip; Read more\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2021-03-26T12:04:00+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-04-14T13:08:43+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/progressive-delivery.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1119\" \/>\n\t<meta property=\"og:image:height\" content=\"372\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@codefresh\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Kostis Kapelonis\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"8 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/progressive-delivery.jpg\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/progressive-delivery.jpg\",\"width\":1119,\"height\":372},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/#webpage\",\"url\":\"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/\",\"name\":\"Minimize failed deployments with Argo Rollouts and Smoke tests | Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/#primaryimage\"},\"datePublished\":\"2021-03-26T12:04:00+00:00\",\"dateModified\":\"2021-04-14T13:08:43+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Minimize failed deployments with Argo Rollouts and Smoke tests\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87\"},\"headline\":\"Minimize failed deployments with Argo Rollouts and Smoke tests\",\"datePublished\":\"2021-03-26T12:04:00+00:00\",\"dateModified\":\"2021-04-14T13:08:43+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/#webpage\"},\"wordCount\":1284,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/progressive-delivery.jpg\",\"keywords\":[\"docker\",\"continuous integration\",\"Kubernetes\",\"devops\",\"CI\/CD\",\"codefresh\",\"continuous delivery\",\"blue\/green\",\"Argo\",\"Argo Rollouts\"],\"articleSection\":[\"Continuous Deployment\/Delivery\",\"Devops\",\"Kubernetes Tutorials\",\"Containers\",\"DevOps Tutorials\",\"How Tos\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87\",\"name\":\"Kostis Kapelonis\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png\",\"caption\":\"Kostis Kapelonis\"},\"description\":\"Kostis is a software engineer\/technical-writer dual class character. He lives and breathes automation, good testing practices and stress-free deployments with GitOps.\",\"url\":\"https:\/\/codefresh.io\/author\/kostiscodefresh-io\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Minimize failed deployments with Argo Rollouts and Smoke tests | Codefresh","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/","og_locale":"en_US","og_type":"article","og_title":"Minimize failed deployments with Argo Rollouts and Smoke tests","og_description":"Argo Rollouts is a progressive delivery controller created for Kubernetes. It allows you to deploy your application with minimal\/zero downtime by adopting a gradual way of deploying instead of taking an \u201call at once\u201d approach. Argo Rollouts supercharges your Kubernetes cluster and in addition to the rolling updates you can now do Blue\/green deployments Canary &hellip; Read more","og_url":"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2021-03-26T12:04:00+00:00","article_modified_time":"2021-04-14T13:08:43+00:00","og_image":[{"width":1119,"height":372,"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/progressive-delivery.jpg","type":"image\/jpeg"}],"twitter_card":"summary_large_image","twitter_creator":"@codefresh","twitter_site":"@codefresh","twitter_misc":{"Written by":"Kostis Kapelonis","Est. reading time":"8 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/progressive-delivery.jpg","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/progressive-delivery.jpg","width":1119,"height":372},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/#webpage","url":"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/","name":"Minimize failed deployments with Argo Rollouts and Smoke tests | Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/#primaryimage"},"datePublished":"2021-03-26T12:04:00+00:00","dateModified":"2021-04-14T13:08:43+00:00","breadcrumb":{"@id":"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Minimize failed deployments with Argo Rollouts and Smoke tests"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87"},"headline":"Minimize failed deployments with Argo Rollouts and Smoke tests","datePublished":"2021-03-26T12:04:00+00:00","dateModified":"2021-04-14T13:08:43+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/#webpage"},"wordCount":1284,"commentCount":0,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/progressive-delivery.jpg","keywords":["docker","continuous integration","Kubernetes","devops","CI\/CD","codefresh","continuous delivery","blue\/green","Argo","Argo Rollouts"],"articleSection":["Continuous Deployment\/Delivery","Devops","Kubernetes Tutorials","Containers","DevOps Tutorials","How Tos"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87","name":"Kostis Kapelonis","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png","caption":"Kostis Kapelonis"},"description":"Kostis is a software engineer\/technical-writer dual class character. He lives and breathes automation, good testing practices and stress-free deployments with GitOps.","url":"https:\/\/codefresh.io\/author\/kostiscodefresh-io\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/18915"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/62"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=18915"}],"version-history":[{"count":0,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/18915\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/18248"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=18915"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=18915"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=18915"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}