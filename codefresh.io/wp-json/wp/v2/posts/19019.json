{"id":19019,"date":"2021-04-14T04:04:00","date_gmt":"2021-04-14T12:04:00","guid":{"rendered":"https:\/\/codefresh.io\/uncategorized\/minimize-failed-deployments-argo-rollouts-smoke-tests-2\/"},"modified":"2021-09-29T11:19:46","modified_gmt":"2021-09-29T11:19:46","slug":"recover-automatically-from-failed-deployments","status":"publish","type":"post","link":"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/","title":{"rendered":"Recover automatically from failed deployments with Argo Rollouts and Prometheus metrics"},"content":{"rendered":"<p><a href=\"https:\/\/argoproj.github.io\/argo-rollouts\/\">Argo Rollouts<\/a> is a progressive delivery controller created for Kubernetes. It allows you to deploy your application with minimal\/zero downtime by adopting a gradual way of deploying instead of taking an \u201call at once\u201d approach.<\/p>\n<p>Argo Rollouts supercharges your Kubernetes cluster and in addition to the rolling updates you can now do<\/p>\n<ul>\n<li>Blue\/green deployments<\/li>\n<li>Canary deployments<\/li>\n<li>A\/B tests<\/li>\n<li>Automatic rollbacks<\/li>\n<li>Integrated Metric analysis<\/li>\n<\/ul>\n<p>In the previous article, we have seen <a href=\"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/\">blue\/green deployments<\/a>. In this article, we will see an example that combines canary deployments with <a href=\"https:\/\/prometheus.io\/\">Prometheus metrics<\/a> that automatically roll back an application if the new version is not passing specific metric thresholds.<\/p>\n<h2>How Canary deployments work<\/h2>\n<p>Canary deployments are a bit more advanced than blue\/green deployments. With Canary deployments instead of having a single critical moment when all traffic is switched from the old version to the new version, only a subset of the live traffic is gradually moved to the new version.<\/p>\n<p>Here is the theory:<\/p>\n<figure id=\"attachment_19032\" aria-describedby=\"caption-attachment-19032\" style=\"width: 981px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/how-canary-deployments-work.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/how-canary-deployments-work.png\" alt=\"How Canary deployments work\" width=\"981\" height=\"1231\" class=\"size-full wp-image-19032\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/how-canary-deployments-work.png 981w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/how-canary-deployments-work-239x300.png 239w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/how-canary-deployments-work-816x1024.png 816w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/how-canary-deployments-work-768x964.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/how-canary-deployments-work-16x20.png 16w\" sizes=\"(max-width: 981px) 100vw, 981px\" \/><\/a><figcaption id=\"caption-attachment-19032\" class=\"wp-caption-text\">How Canary deployments work<\/figcaption><\/figure>\n<p>In the beginning, we have a single version of the application running. All live traffic from users is sent to that version. A key point here is that a smart proxy\/load balancer acts as an intermediate between users and infrastructure. In the original state, this load balancer sends 100% of the traffic to the stable version.<\/p>\n<p>In the next stage, we launch a second version of the application. We then instruct the load balancer to route 10% of the traffic to the new version. This means that if the new version has issues only a small number of users will be affected. This version acts as a \u201ccanary\u201d that will notify us if something is wrong with the new deployment well in advance of a full rollout.<\/p>\n<p>If we think the new application reacts well to live traffic we can increase the percentage of users that are redirected to it. In the second stage, we have chosen to route 1\/3rd of all traffic. This means that we still have a failsafe and can always switch back all traffic to the previous version, but we can also see how our version behaves under a representative amount of traffic.<\/p>\n<p>In the last step, we modify the load balancer and send 100% of the traffic to the new version. We can now discard the old version completely. We are back to the original state<\/p>\n<p>Notice that the number of stages, as well as percentage of traffic, is user defined. The numbers we used (10% at stage 1 and 33% at stage 2) are just an example.<\/p>\n<p>Depending on your network setup you can also have advanced routing decisions and instead of blinding redirecting a subset of traffic, you should choose who gets to see the new version first. Common examples are users from a specific geographical area or users from a particular platform (e.g. mobile users first).<\/p>\n<h2>Triple service canaries with Argo Rollouts<\/h2>\n<p>Now that we have seen how canary deployments work in general, let\u2019s see what Argo Rollouts does with Kubernetes.<\/p>\n<p>Argo Rollout is a Kubernetes controller and has <a href=\"https:\/\/argoproj.github.io\/argo-rollouts\/features\/canary\/\">several options for Canary deployment<\/a>. Some of the most interesting capabilities are the native integration with networking solutions (for the traffic split) and with metric solutions for automatic promotions between canary stages.<\/p>\n<p>One the most basic feature, however, is the way Argo Rollouts treats Kubernetes services during a canary release. Whenever a canary is active, Argo Rollouts can create 3 services for you<\/p>\n<ul>\n<li>A service that gets traffic to both the old and the new version. This is what your live users will probably use<\/li>\n<li>A service that sends traffic only to the canary\/new version. You can use this service to gather your metrics or run smoke tests or give it only to some users that want to get access to the new release as fast as possible (for example your internal company users)<\/li>\n<li>A service that sends traffic only to the last\/stable version. You can use the service if you want to keep some users to the old version as long as possible (e.g. users that you don\u2019t want to see affected at all by the canary)<\/li>\n<\/ul>\n<p>You can easily install the operator in your cluster by following the <a href=\"https:\/\/argoproj.github.io\/argo-rollouts\/installation\/\">instructions<\/a>.<\/p>\n<p>You can find the example application at <a href=\"https:\/\/github.com\/codefresh-contrib\/argo-rollout-canary-sample-app\">https:\/\/github.com\/codefresh-contrib\/argo-rollout-canary-sample-app<\/a>. It is a simple Golang application that exposes some basic <a href=\"https:\/\/prometheus.io\/\">Prometheus metrics<\/a> and has no other dependencies.<\/p>\n<p>Before you use the example you need to install an ingress or service mesh in your cluster that will be used for the traffic split. Argo Rollouts supports <a href=\"https:\/\/argoproj.github.io\/argo-rollouts\/features\/traffic-management\/\">several solutions<\/a> including <a href=\"https:\/\/argoproj.github.io\/argo-rollouts\/features\/traffic-management\/smi\/\">SMI support<\/a>. We will use <a href=\"https:\/\/linkerd.io\/2.10\/getting-started\/\">Linkerd <\/a>for our example.<\/p>\n<p>To perform the initial deployment, clone the git repository locally and edit the file canary-manual-approval\/rollout.yaml by replacing CF_SHORT_REVISION with any available tag <a href=\"https:\/\/hub.docker.com\/r\/kostiscodefresh\/argo-rollouts-canary-sample-app\/tags\">from Dockerhub<\/a> (for example c323c7b)<\/p>\n<p>Save the file and then perform the first deployment with<\/p>\n<pre>\nkubectl create ns canary\nkubectl apply -f .\/canary-manual-approval -n canary\n<\/pre>\n<p>Here is the initial state using the <a href=\"http:\/\/kubeview.benco.io\/\">kubeview graphical tool<\/a>.<\/p>\n<figure id=\"attachment_19033\" aria-describedby=\"caption-attachment-19033\" style=\"width: 1674px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/01_canary_initial_state.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/01_canary_initial_state.png\" alt=\"Initial Canary state\" width=\"1674\" height=\"808\" class=\"size-full wp-image-19033\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/01_canary_initial_state.png 1674w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/01_canary_initial_state-300x145.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/01_canary_initial_state-1024x494.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/01_canary_initial_state-768x371.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/01_canary_initial_state-1536x741.png 1536w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/01_canary_initial_state-20x10.png 20w\" sizes=\"(max-width: 1674px) 100vw, 1674px\" \/><\/a><figcaption id=\"caption-attachment-19033\" class=\"wp-caption-text\">Initial Canary state<\/figcaption><\/figure>\n<p>The application has 4 pods up and running (shown in the middle of the picture). There are 3 services that point to them. These are \u201crollout-canary-active\u201d, \u201crollout-canary-preview\u201d and \u201crollout-canary-all-traffic\u201d. Your live traffic should use the last one.<\/p>\n<p>If you also want to monitor things from the command line be sure to install the <a href=\"https:\/\/argoproj.github.io\/argo-rollouts\/features\/kubectl-plugin\/\">Argo rollouts CLI<\/a> and run<\/p>\n<pre>\nkubectl argo rollouts get rollout golang-sample-app-deployment --watch -n canary\n<\/pre>\n<p>The next step is to create a new version of the application. You can either change again the image tag on the manifest (and run kubectl apply again) or simply use the shortcut offered by Argo Rollouts<\/p>\n<pre>\nkubectl argo rollouts set image golang-sample-app-deployment spring-sample-app-container=kostiscodefresh\/argo-rollouts-canary-sample-app:8c67194 -n canary\n<\/pre>\n<p>The image tag you use is arbitrary. It just needs to be different than the current one. As soon as Argo Rollouts detects the change it will do the following:<\/p>\n<ol>\n<li>Create a brand new replica set with the specified pods for the canary release<\/li>\n<li>Redirect the \u201cpreview\u201d service to the new pods<\/li>\n<li>Keep the \u201cactive\u201d service to the old pods (the existing version)<\/li>\n<li>Redirect the \u201call-traffic\u201d service to both the active and new version.<\/li>\n<\/ol>\n<p>Here is how it looks in Kubeview:<\/p>\n<figure id=\"attachment_19035\" aria-describedby=\"caption-attachment-19035\" style=\"width: 1684px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/02_canary_10.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/02_canary_10.png\" alt=\"Canary at 10%\" width=\"1684\" height=\"801\" class=\"size-full wp-image-19035\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/02_canary_10.png 1684w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/02_canary_10-300x143.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/02_canary_10-1024x487.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/02_canary_10-768x365.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/02_canary_10-1536x731.png 1536w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/02_canary_10-20x10.png 20w\" sizes=\"(max-width: 1684px) 100vw, 1684px\" \/><\/a><figcaption id=\"caption-attachment-19035\" class=\"wp-caption-text\">Canary at 10%<\/figcaption><\/figure>\n<p>The CLI will also report the split of traffic:<\/p>\n<figure id=\"attachment_19036\" aria-describedby=\"caption-attachment-19036\" style=\"width: 1113px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/canary-watch.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/canary-watch.png\" alt=\"CLI CANARY watch\" width=\"1113\" height=\"591\" class=\"size-full wp-image-19036\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/canary-watch.png 1113w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/canary-watch-300x159.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/canary-watch-1024x544.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/canary-watch-768x408.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/canary-watch-20x11.png 20w\" sizes=\"(max-width: 1113px) 100vw, 1113px\" \/><\/a><figcaption id=\"caption-attachment-19036\" class=\"wp-caption-text\">CLI CANARY watch<\/figcaption><\/figure>\n<p>You can see also in the \u201csetWeight\u201d option that the canary only gets 10% of the traffic right now.<\/p>\n<p>So now only a subset of all users can see the new version. At this stage, it is your responsibility to decide if the canary version is ok. Maybe you want to run some smoke tests or look at your metrics for the canary (we will automate this in the next section).<\/p>\n<p>Once you are happy with the canary you can move more live traffic to it by promoting it.<\/p>\n<pre>\nkubectl argo rollouts promote golang-sample-app-deployment -n canary\n<\/pre>\n<p>Argo Rollouts will create more pods for the canary release and shift more traffic to it:<\/p>\n<figure id=\"attachment_19037\" aria-describedby=\"caption-attachment-19037\" style=\"width: 1687px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/03_canary_33.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/03_canary_33.png\" alt=\"Canary at 33%\" width=\"1687\" height=\"792\" class=\"size-full wp-image-19037\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/03_canary_33.png 1687w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/03_canary_33-300x141.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/03_canary_33-1024x481.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/03_canary_33-768x361.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/03_canary_33-1536x721.png 1536w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/03_canary_33-20x9.png 20w\" sizes=\"(max-width: 1687px) 100vw, 1687px\" \/><\/a><figcaption id=\"caption-attachment-19037\" class=\"wp-caption-text\">Canary at 33%<\/figcaption><\/figure>\n<p>At this stage, 33% of traffic is sent to the canary pods as defined in the <a href=\"https:\/\/github.com\/codefresh-contrib\/argo-rollout-canary-sample-app\/blob\/main\/canary-manual-approval\/rollout.yaml\">Rollout specification<\/a>:<br \/>\nWith this amount of traffic, more users are exposed to the new version and any immediate problems should be easier to spot in your metrics or other monitoring mechanisms.<\/p>\n<p>Assuming that everything still looks good you can promote the canary a second time:<\/p>\n<pre>\nkubectl argo rollouts promote golang-sample-app-deployment -n canary\n<\/pre>\n<p>Argo Rollouts will now shift all traffic to the canary pods and after a while discard the previous version:<\/p>\n<figure id=\"attachment_19038\" aria-describedby=\"caption-attachment-19038\" style=\"width: 1688px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/04_canary_finished.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/04_canary_finished.png\" alt=\"Old version was discarded\" width=\"1688\" height=\"793\" class=\"size-full wp-image-19038\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/04_canary_finished.png 1688w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/04_canary_finished-300x141.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/04_canary_finished-1024x481.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/04_canary_finished-768x361.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/04_canary_finished-1536x722.png 1536w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/04_canary_finished-20x9.png 20w\" sizes=\"(max-width: 1688px) 100vw, 1688px\" \/><\/a><figcaption id=\"caption-attachment-19038\" class=\"wp-caption-text\">Old version was discarded<\/figcaption><\/figure>\n<p>We are now back to the original state where all 3 services point at the new version.<\/p>\n<p>A new deployment will repeat the whole process.<\/p>\n<p>If for some reason your smoke tests fail, and you don\u2019t want to promote the new version you can abort the whole process with<\/p>\n<pre>\nkubectl argo rollouts abort golang-sample-app-deployment -n canary\n<\/pre>\n<p>You can also go back to a previous version with<\/p>\n<pre>\nkubectl argo rollouts undo golang-sample-app-deployment -n canary\n<\/pre>\n<p>Argo rollouts has more options that allow you to choose the number of versions that stay behind, the amount of time each version is kept, which version to roll back to, and so on.<\/p>\n<p>See the whole <a href=\"https:\/\/argoproj.github.io\/argo-rollouts\/features\/specification\/\">rollout spec<\/a> for more details.<\/p>\n<p>Notice also that for simplicity reasons, the three services in the example are powered by Load Balancers. Check the pricing of your Cloud provider before running this example on your own and be sure to clean up everything after you finish.<\/p>\n<h2>Automating everything with Codefresh and Prometheus<\/h2>\n<p>Now that we have seen how you can perform manually canary deployments, it is time to automate the deployment process with Codefresh pipelines.<\/p>\n<p>We could write a similar pipeline as in our <a href=\"https:\/\/codefresh.io\/continuous-deployment\/minimize-failed-deployments-argo-rollouts-smoke-tests\/\">blue\/green example<\/a> that pauses the pipeline at each canary step and then goes to the next stage by waiting for <a href=\"https:\/\/codefresh.io\/continuous-deployment\/manual-approval\/\">manual approval<\/a>. You can find an example pipeline at <a href=\"https:\/\/github.com\/codefresh-contrib\/argo-rollout-canary-sample-app\/blob\/main\/canary-manual-approval\/codefresh.yaml\">https:\/\/github.com\/codefresh-contrib\/argo-rollout-canary-sample-app\/blob\/main\/canary-manual-approval\/codefresh.yaml<\/a><\/p>\n<p>Remember however that the whole point of automation is to remove as many as possible manual steps. Thankfully Argo Rollouts has native support for <a href=\"https:\/\/argoproj.github.io\/argo-rollouts\/features\/analysis\/\">several metric providers<\/a>. By evaluating the metrics of your application at all canary stages we can completely automate the whole process by having Argo Rollouts automatically promote\/demote a canary according to your metric criteria.<\/p>\n<figure id=\"attachment_19039\" aria-describedby=\"caption-attachment-19039\" style=\"width: 1840px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/rollbacks-with-metrics.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/rollbacks-with-metrics.png\" alt=\"Rollbacks with metrics\" width=\"1840\" height=\"552\" class=\"size-full wp-image-19039\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/rollbacks-with-metrics.png 1840w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/rollbacks-with-metrics-300x90.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/rollbacks-with-metrics-1024x307.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/rollbacks-with-metrics-768x230.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/rollbacks-with-metrics-1536x461.png 1536w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/rollbacks-with-metrics-20x6.png 20w\" sizes=\"(max-width: 1840px) 100vw, 1840px\" \/><\/a><figcaption id=\"caption-attachment-19039\" class=\"wp-caption-text\">Rollbacks with metrics<\/figcaption><\/figure>\n<p>Here is the pipeline that we will create:<\/p>\n<figure id=\"attachment_19040\" aria-describedby=\"caption-attachment-19040\" style=\"width: 1344px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/canary-metrics-pipeline.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/canary-metrics-pipeline.png\" alt=\"Pipeline with metrics\" width=\"1344\" height=\"355\" class=\"size-full wp-image-19040\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/canary-metrics-pipeline.png 1344w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/canary-metrics-pipeline-300x79.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/canary-metrics-pipeline-1024x270.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/canary-metrics-pipeline-768x203.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/03\/canary-metrics-pipeline-20x5.png 20w\" sizes=\"(max-width: 1344px) 100vw, 1344px\" \/><\/a><figcaption id=\"caption-attachment-19040\" class=\"wp-caption-text\">Pipeline with metrics<\/figcaption><\/figure>\n<p>Notice how simple the pipeline is. Argo Rollouts will take care of all promotions automatically behind the scenes.<\/p>\n<p>Our example is already instrumented with Prometheus metrics. We will add an Analysis in our canary deployment. You can see the full details at <a href=\"https:\/\/github.com\/codefresh-contrib\/argo-rollout-canary-sample-app\/blob\/main\/canary-with-metrics\/analysis.yaml\">https:\/\/github.com\/codefresh-contrib\/argo-rollout-canary-sample-app\/blob\/main\/canary-with-metrics\/analysis.yaml <\/a><\/p>\n<pre>\napiVersion: argoproj.io\/v1alpha1\nkind: AnalysisTemplate\nmetadata:\n  name: success-rate\nspec:\n  args:\n  - name: service-name\n  metrics:\n  - name: success-rate\n    interval: 2m\n    count: 2\n    # NOTE: prometheus queries return results in the form of a vector.\n    # So it is common to access the index 0 of the returned array to obtain the value\n    successCondition: result[0] >= 0.95\n    provider:\n      prometheus:\n        address: http:\/\/prom-release-prometheus-server.prom.svc.cluster.local:80\n        query: sum(response_status{app=\"{{args.service-name}}\",role=\"canary\",status=~\"2.*\"})\/sum(response_status{app=\"{{args.service-name}}\",role=\"canary\"})\n<\/pre>\n<p>This analysis defines that we will go to the next stage of the canary only if a particular <a href=\"https:\/\/prometheus.io\/docs\/prometheus\/latest\/querying\/basics\/\">PromQL<\/a> statement (number of requests that return 2xx HTTP status divided by all requests) returns over 95%<br \/>\nIf at any point metrics fall below this threshold, the canary will be aborted.<\/p>\n<p>Here is the whole pipeline:<\/p>\n<pre>\nversion: \"1.0\"\nstages:\n  - prepare\n  - build\n  - deploy\nsteps:\n  clone:\n    type: \"git-clone\"\n    stage: prepare\n    description: \"Cloning main repository...\"\n    repo: '${{CF_REPO_OWNER}}\/${{CF_REPO_NAME}}'\n    revision: \"${{CF_BRANCH}}\"\n  build_app_image:\n    title: Building Docker Image\n    type: build\n    stage: build\n    image_name: kostiscodefresh\/argo-rollouts-canary-sample-app\n    working_directory: \"${{clone}}\" \n    tags:\n    - \"latest\"\n    - '${{CF_SHORT_REVISION}}'\n    dockerfile: Dockerfile\n    build_arguments:\n      - git_hash=${{CF_SHORT_REVISION}}\n  start_deployment:\n    title: Start canary\n    stage: deploy\n    image: codefresh\/cf-deploy-kubernetes:master\n    working_directory: \"${{clone}}\"\n    commands:\n      - \/cf-deploy-kubernetes .\/canary-with-metrics\/service.yaml \n      - \/cf-deploy-kubernetes .\/canary-with-metrics\/service-preview.yaml\n      - \/cf-deploy-kubernetes .\/canary-with-metrics\/service-all.yaml  \n      - \/cf-deploy-kubernetes .\/canary-with-metrics\/analysis.yaml \n      - \/cf-deploy-kubernetes .\/canary-with-metrics\/rollout.yaml   \n    environment:\n      - KUBECONTEXT=mydemoAkscluster@BizSpark Plus\n      - KUBERNETES_NAMESPACE=canary \n<\/pre>\n<p>You now have true Continuous Deployment! All deployments are fully automatic and \u201cbad\u201d application versions (that don\u2019t pass our metrics) will be reverted automatically.<\/p>\n<p>For more details on Canary deployments as well as the example with manual approval see <a href=\"https:\/\/codefresh.io\/docs\/docs\/ci-cd-guides\/progressive-delivery\/\">the documentation page<\/a>.<\/p>\n<p>New to Codefresh? <a href=\"https:\/\/codefresh.io\/codefresh-signup\/?utm_source=Blog&#038;utm_medium=Post&#038;utm_campaign=argo-canary\">Create Your Free Account today<\/a>!<\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"19019\"\/>","protected":false},"excerpt":{"rendered":"<p>Argo Rollouts is a progressive delivery controller created for Kubernetes. It allows you to deploy your application with minimal\/zero downtime by adopting a gradual way of deploying instead of taking an \u201call at once\u201d approach. Argo Rollouts supercharges your Kubernetes cluster and in addition to the rolling updates you can now do Blue\/green deployments Canary &hellip; <a href=\"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/\">Read more<\/a><\/p>\n","protected":false},"author":62,"featured_media":18248,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[3120,5467,1657,1505,1538,6],"tags":[14,15,44,52,53,59,68,5508,5563,5564,5565,5643,5685],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Recover automatically from failed deployments with Argo Rollouts and Prometheus metrics | Codefresh<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Recover automatically from failed deployments with Argo Rollouts and Prometheus metrics\" \/>\n<meta property=\"og:description\" content=\"Argo Rollouts is a progressive delivery controller created for Kubernetes. It allows you to deploy your application with minimal\/zero downtime by adopting a gradual way of deploying instead of taking an \u201call at once\u201d approach. Argo Rollouts supercharges your Kubernetes cluster and in addition to the rolling updates you can now do Blue\/green deployments Canary &hellip; Read more\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2021-04-14T12:04:00+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-09-29T11:19:46+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/progressive-delivery.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1119\" \/>\n\t<meta property=\"og:image:height\" content=\"372\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@codefresh\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Kostis Kapelonis\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"10 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/progressive-delivery.jpg\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/progressive-delivery.jpg\",\"width\":1119,\"height\":372},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/#webpage\",\"url\":\"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/\",\"name\":\"Recover automatically from failed deployments with Argo Rollouts and Prometheus metrics | Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/#primaryimage\"},\"datePublished\":\"2021-04-14T12:04:00+00:00\",\"dateModified\":\"2021-09-29T11:19:46+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Recover automatically from failed deployments with Argo Rollouts and Prometheus metrics\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87\"},\"headline\":\"Recover automatically from failed deployments with Argo Rollouts and Prometheus metrics\",\"datePublished\":\"2021-04-14T12:04:00+00:00\",\"dateModified\":\"2021-09-29T11:19:46+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/#webpage\"},\"wordCount\":1722,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/progressive-delivery.jpg\",\"keywords\":[\"docker\",\"continuous integration\",\"Kubernetes\",\"devops\",\"CI\/CD\",\"codefresh\",\"continuous delivery\",\"Argo\",\"canary deployments\",\"canaries\",\"Argo Rollouts\",\"metrics\",\"prometheus\"],\"articleSection\":[\"Continuous Deployment\/Delivery\",\"Devops\",\"Kubernetes Tutorials\",\"Containers\",\"DevOps Tutorials\",\"How Tos\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87\",\"name\":\"Kostis Kapelonis\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png\",\"caption\":\"Kostis Kapelonis\"},\"description\":\"Kostis is a software engineer\/technical-writer dual class character. He lives and breathes automation, good testing practices and stress-free deployments with GitOps.\",\"url\":\"https:\/\/codefresh.io\/author\/kostiscodefresh-io\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Recover automatically from failed deployments with Argo Rollouts and Prometheus metrics | Codefresh","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/","og_locale":"en_US","og_type":"article","og_title":"Recover automatically from failed deployments with Argo Rollouts and Prometheus metrics","og_description":"Argo Rollouts is a progressive delivery controller created for Kubernetes. It allows you to deploy your application with minimal\/zero downtime by adopting a gradual way of deploying instead of taking an \u201call at once\u201d approach. Argo Rollouts supercharges your Kubernetes cluster and in addition to the rolling updates you can now do Blue\/green deployments Canary &hellip; Read more","og_url":"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2021-04-14T12:04:00+00:00","article_modified_time":"2021-09-29T11:19:46+00:00","og_image":[{"width":1119,"height":372,"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/progressive-delivery.jpg","type":"image\/jpeg"}],"twitter_card":"summary_large_image","twitter_creator":"@codefresh","twitter_site":"@codefresh","twitter_misc":{"Written by":"Kostis Kapelonis","Est. reading time":"10 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/progressive-delivery.jpg","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/progressive-delivery.jpg","width":1119,"height":372},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/#webpage","url":"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/","name":"Recover automatically from failed deployments with Argo Rollouts and Prometheus metrics | Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/#primaryimage"},"datePublished":"2021-04-14T12:04:00+00:00","dateModified":"2021-09-29T11:19:46+00:00","breadcrumb":{"@id":"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Recover automatically from failed deployments with Argo Rollouts and Prometheus metrics"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87"},"headline":"Recover automatically from failed deployments with Argo Rollouts and Prometheus metrics","datePublished":"2021-04-14T12:04:00+00:00","dateModified":"2021-09-29T11:19:46+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/#webpage"},"wordCount":1722,"commentCount":0,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2020\/12\/progressive-delivery.jpg","keywords":["docker","continuous integration","Kubernetes","devops","CI\/CD","codefresh","continuous delivery","Argo","canary deployments","canaries","Argo Rollouts","metrics","prometheus"],"articleSection":["Continuous Deployment\/Delivery","Devops","Kubernetes Tutorials","Containers","DevOps Tutorials","How Tos"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/continuous-deployment\/recover-automatically-from-failed-deployments\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87","name":"Kostis Kapelonis","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png","caption":"Kostis Kapelonis"},"description":"Kostis is a software engineer\/technical-writer dual class character. He lives and breathes automation, good testing practices and stress-free deployments with GitOps.","url":"https:\/\/codefresh.io\/author\/kostiscodefresh-io\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/19019"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/62"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=19019"}],"version-history":[{"count":0,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/19019\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/18248"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=19019"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=19019"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=19019"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}