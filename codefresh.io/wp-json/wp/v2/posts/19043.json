{"id":19043,"date":"2021-04-15T02:21:24","date_gmt":"2021-04-15T10:21:24","guid":{"rendered":"https:\/\/codefresh.io\/?p=19043"},"modified":"2022-01-06T15:50:42","modified_gmt":"2022-01-06T15:50:42","slug":"telepresence-2-local-development","status":"publish","type":"post","link":"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/","title":{"rendered":"Using Telepresence 2 for Kubernetes debugging and local development"},"content":{"rendered":"<p>Telepresence 2 was <a href=\"https:\/\/blog.getambassador.io\/whats-new-in-telepresence-2-dbdff62b82d5\">recently released<\/a> and (like Telepresence 1) it is a worthy addition to your Kubernetes tool chest. Telepresence is one of those tools you cannot live without after discovering how your daily workflow is improved.<\/p>\n<p>So what is Telepresence? It is too hard to describe all the functionalities of the tool in a single sentence, but for now I would describe it as the \u201cKubernetes swiss army networking tool\u201d. In this post we will see the major use cases that it covers but as time goes on and more teams adopt Telepresence I am sure that more creative uses of it will be discovered.<\/p>\n<p>The major problems that Telepresence solves are:<\/p>\n<ol>\n<li>Kubernetes debugging and issue analysis. This is useful for both developers and Kubernetes operators<\/li>\n<li>Easy local development without a locally running Kubernetes cluster. This is mostly useful for developers<\/li>\n<li>Preview environment creation and real time collaboration in a team. This is great for large teams that have adopted Kubernetes.<\/li>\n<\/ol>\n<p>We will see these use cases in turn as each one builds on top of the previous one.<\/p>\n<p>Telepresence is a project in the growing discipline of Developer Experience, in which we have other tools such as <a href=\"http:\/\/tilt.dev\">tilt.dev<\/a>, <a href=\"http:\/\/garden.io\">garden.io<\/a>, <a href=\"http:\/\/okteto.com\">okteto <\/a>and resources like <a href=\"https:\/\/www.dex.dev\/\">dex.dev<\/a>. It focuses specifically on helping developers work with containers and Kubernetes (as opposed to tools that focus on administration and management of clusters).<\/p>\n<p>By the way, if you are already familiar with Telepresence 1, then Telepresence 2 is a complete rewrite (now in Go) with many more improvements for reliability and extra features.<\/p>\n<h2>Beam yourself into your Kubernetes cluster (using Telepresence for Kubernetes debugging)<\/h2>\n<p>Let\u2019s say that you are a Kubernetes operator. You are tasked with deploying an application with many microservices (queue, auth, backend, front-end etc). You deploy your manifests and while the pods seem to start up ok, communications between the services are not working correctly.<\/p>\n<p>The front-end cannot seem to find the backend, the queue is inaccessible from the backend and so on. You need a way to test connectivity between services and how they respond. Your first impulse would be to use the venerable <a href=\"https:\/\/kubernetes.io\/docs\/tasks\/access-application-cluster\/port-forward-access-application-cluster\/\">kubectl port-forward<\/a> to make all these services available locally to your workstation. While this approach might work, it is not really what you want, because with kubectl port-forward you only make a remote port available to a local port.<\/p>\n<p>What you really want is a way to see <strong>INSIDE <\/strong>the cluster and see things from the perspective of the service that you are interested in. You want to understand how the backend pod for example can access other services from inside the cluster. Also if you want to debug too many services at once, opening multiple terminals with kubectl exec or kubectl port-forward is a cumbersome process.<\/p>\n<p>Wouldn\u2019t it be great if you had a magic way that transferred your laptop inside the Kubernetes cluster? This way you could run any kind of command directly in your terminal from the same perspective of a pod and understand network connectivity with simple tools like curl, netcat, wget etc.<\/p>\n<figure id=\"attachment_19046\" aria-describedby=\"caption-attachment-19046\" style=\"width: 900px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/magic.png\"><img class=\"size-full wp-image-19046\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/magic.png\" alt=\"Your laptop inside the cluster\" width=\"900\" height=\"451\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/magic.png 900w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/magic-300x150.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/magic-768x385.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/magic-20x10.png 20w\" sizes=\"(max-width: 900px) 100vw, 900px\" \/><\/a><figcaption id=\"caption-attachment-19046\" class=\"wp-caption-text\">Your laptop inside the cluster<\/figcaption><\/figure>\n<p>Well this magic way is exactly what Telepresence does! As the name suggests, telepresence moves your local workstation inside the Kubernetes cluster and makes it look like your local environment is inside a pod. All networking services and DNS names available to the pod are now available to your local workstation as well.<\/p>\n<p>Behind the scenes telepresence runs a small agent in the cluster and routes traffic back and forth between a secure network tunnel. This is also one of the big differences with Telepresence 1. Telepresence 2 has a global routing agent for the whole cluster and each intercepted service gets its own traffic manager (as we will see in the next use case)<\/p>\n<figure id=\"attachment_19047\" aria-describedby=\"caption-attachment-19047\" style=\"width: 997px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/secure-tunner.png\"><img class=\"size-full wp-image-19047\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/secure-tunner.png\" alt=\"Secure tunnel\" width=\"997\" height=\"437\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/secure-tunner.png 997w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/secure-tunner-300x131.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/secure-tunner-768x337.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/secure-tunner-20x9.png 20w\" sizes=\"(max-width: 997px) 100vw, 997px\" \/><\/a><figcaption id=\"caption-attachment-19047\" class=\"wp-caption-text\">Secure tunnel<\/figcaption><\/figure>\n<p>The telepresence CLI modifies your local networking settings and allows you to use your favorite tools on your local workstation as if you were inside the cluster.<\/p>\n<p>This scenario is even more powerful if you are a developer. Let\u2019s say that you are adding a new feature to an existing application with many microservices. Your tasks are<\/p>\n<ol>\n<li>Inspecting existing tables on a MySQL database which is only accessible from within the cluster<\/li>\n<li>Loading test data to the mysql database with a script that you will develop<\/li>\n<li>Examining REST responses from another service that you are going to depend on<\/li>\n<li>Send messages to a queue that is also running inside the cluster<\/li>\n<\/ol>\n<p>Again, you could open 3-4 terminals with kubectl forward and have your tools connect to <code>localhost:port<\/code>.<\/p>\n<p>Wouldn\u2019t it be better to just open your Mysql administration tool and simply connect to <code>mysql:3306<\/code>?<\/p>\n<p>This is exactly what telepresence does for you. If your database is available in the \u201cmysql\u201d dns name inside the cluster, then by running telepresence you make it available to your local workstation in the same manner. Your workstation essentially becomes part of the cluster.<\/p>\n<h2>How to make your workstation part of the cluster<\/h2>\n<p>This is the easiest way to get started with telepresence. <a href=\"https:\/\/www.getambassador.io\/docs\/telepresence\/latest\/install\/\">Download the telepresence cli<\/a> (currently available for Mac and Linux) and run in your terminal (with kubectl access to your cluster)<\/p>\n<pre>&gt;telepresence connect\nLaunching Telepresence Daemon v2.1.3 (api v3)\nConnecting to traffic manager...\nConnected to context mydemoAkscluster (https:\/\/mydemoakscluster-dns-8734f6ac.hcp.centralus.azmk8s.io:443)\n<\/pre>\n<p>Telepresence will install a small agent in your cluster and setup local networking on your workstation to make any Kubernetes DNS names available locally.<\/p>\n<p>Now you can run your favorite tools like inside the cluster. If for example your backend service is running with name \u201cmy-backend\u201d on the namespace \u201cdemo\u201d at port 9999, you can simply write:<\/p>\n<pre>curl http:\/\/my-backend.demo:9999\n<\/pre>\n<p>And get back a response! It doesn\u2019t get any easier than this. You can launch your favorite IDE and connect to debugging ports, your Database administration tool and connect to your db, your internal dashboard for your ingress controller (that is normally available only within the cluster) and so on.<\/p>\n<p>By the way, this is one of the areas where telepresence 2 has seen major improvements from the first version as the in-cluster agent allows for more reliable connections.<\/p>\n<h2>Local Kubernetes development without a local Kubernetes cluster<\/h2>\n<p>In the previous section we have seen how you can use Telepresence to debug your application. So let\u2019s say that you found the problem and you want to fix it by making some code changes and redeploying the container.<\/p>\n<p>Normally you could use the usual dance of code, package image, push, deploy to the cluster and that would work fine if you wish to spend your time by waiting for docker images to be built and pushed.<\/p>\n<p>But with telepresence you can skip this process completely! Remember that we said that the communication tunnel between your workstation and the cluster is two way. This means that you can simply launch your application locally (outside of a cluster and outside of a container) and simply tell telepresence to \u201cintercept\u201d or route all traffic to your local port.<\/p>\n<p>Here is how it works:<\/p>\n<figure id=\"attachment_19049\" aria-describedby=\"caption-attachment-19049\" style=\"width: 1208px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/local-development.png\"><img class=\"size-full wp-image-19049\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/local-development.png\" alt=\"Local Kubernetes development\" width=\"1208\" height=\"478\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/local-development.png 1208w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/local-development-300x119.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/local-development-1024x405.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/local-development-768x304.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/local-development-20x8.png 20w\" sizes=\"(max-width: 1208px) 100vw, 1208px\" \/><\/a><figcaption id=\"caption-attachment-19049\" class=\"wp-caption-text\">Local Kubernetes development<\/figcaption><\/figure>\n<p>Telepresence installs a sidecar agent next to your existing application. This agent captures all traffic requests that go in the container and instead of sending them to the application inside the cluster, it routes all traffic to your local workstation.<\/p>\n<p>Note that this is also a big difference between telepresence 1 and 2. Telepresence 1 used to replace the whole deployment in the cluster, while 2 uses an agent (and both versions of the application local and remote exist at the same time)<\/p>\n<p>The end result is that you have an end-to-end hybrid workflow where:<\/p>\n<ul>\n<li>The application that you are developing runs locally on your workstation but thinks it is inside your cluster and can communicate with all other services in a transparent way<\/li>\n<li>All other services on the cluster (usually the services that are used by your application) also think that they are talking to another application inside the cluster, while in reality they are talking to an application with your local workstation.<\/li>\n<\/ul>\n<p>With this kind of setup, the development process is straightforward. You just make code changes locally and the application is instantly updated. There is nothing to redeploy or repackage in a docker image. Any live-reload mechanism that your programming language supports can be used as is without any special changes. You can also launch debuggers, tracers and other dev tools locally as before.<\/p>\n<p>Telepresence essentially cuts down the unnecessary parts of the <a href=\"https:\/\/www.getambassador.io\/docs\/telepresence\/latest\/concepts\/devloop\/\">development loop<\/a>.<\/p>\n<figure id=\"attachment_19050\" aria-describedby=\"caption-attachment-19050\" style=\"width: 772px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/broken-cycle.png\"><img class=\"size-full wp-image-19050\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/broken-cycle.png\" alt=\"Extra development steps\" width=\"772\" height=\"487\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/broken-cycle.png 772w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/broken-cycle-300x189.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/broken-cycle-768x484.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/broken-cycle-20x13.png 20w\" sizes=\"(max-width: 772px) 100vw, 772px\" \/><\/a><figcaption id=\"caption-attachment-19050\" class=\"wp-caption-text\">Extra development steps<\/figcaption><\/figure>\n<p>If you are accustomed to running a local Kubernetes cluster for development (or use other tools that simply redeploy your image to a remote cluster), you will already be familiar with the extra price that comes with Kubernetes development. They are the steps shown in red in the picture above. And Telepresence eliminates them!<\/p>\n<p>This is also another big difference between Telepresence and other tools destined for Kubernetes development (such as Okteto, Tilt, and Garden.io). With telepresence there is no code sync process, no smart live reload mechanisms and no local build of any kind of image. The application is running outside a Kubernetes cluster, on your laptop.<\/p>\n<p>The icing on the cake is that with this approach you no longer have to maintain a different set of environment properties for your cluster and for your local workstation. You can use a single property set for all configurations and your application will work in the same way regardless of where they run (your workstation or the cluster). Telepresence even saves for your all properties available inside the cluster as we will see in the next section.<\/p>\n<h2>How to make your local application think it is inside the cluster<\/h2>\n<p>First launch your application locally and make sure that it exposes its port correctly (e.g. at <code>localhost:3000<\/code>). This is also the time to setup your hot-reload mechanism supported by your programming language. Ideally each time that you make a change to your editor, your local app should refresh automatically.<\/p>\n<p>Note that you should launch your application on its own. No need for a local Kubernetes cluster or a docker image.<\/p>\n<p>Then run this command:<\/p>\n<pre>telepresence intercept dataprocessingservice --port 3000 -n demo --env-file ~\/example-service-intercept.env\n<\/pre>\n<p>This is taken from the <a href=\"https:\/\/www.getambassador.io\/docs\/telepresence\/latest\/quick-start\/demo-node\/\">example application<\/a> but feel free to change the command with our own service, port and kubernetes namespace.<\/p>\n<p>And that\u2019s it! The agent running next to the real application in the remote cluster will now intercept all requests to it and send them locally to your workstation. The reverse is also true and all requests made by your application with the cluster dns names will be routed to the cluster.<\/p>\n<p>You can now start developing as normal. Any code changes you make are visible on the cluster right away. No more waiting for docker builds or image pushes. And you don\u2019t even need a local Kubernetes cluster.<\/p>\n<p>The .env file can be used by your IDE or your scripts to replicate the values from all the properties available from the cluster to your local workstation.<\/p>\n<h2>Kubernetes collaboration in a team environment<\/h2>\n<p>One of the most important differences between Telepresence 1 and 2 is that Telepresence no longer swaps the deployment inside the cluster (a method also followed by Okteto and similar tools) but instead installs a routing agent next to the existing service that takes care of all network communication.<\/p>\n<p>The added advantage of this approach is the capability to add some routing behavior in the agent. In the previous use case we have seen how the agent can route all calls to your local workstation. But we can be a bit smarter and instruct the agent to route only some calls to your workstation while leaving the rest of the calls unaffected (so that they hit the original application inside the cluster).<\/p>\n<p>And this exactly what Telepresence 2 offers in the form of preview environments! Here is how it works<\/p>\n<figure id=\"attachment_19051\" aria-describedby=\"caption-attachment-19051\" style=\"width: 1303px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/preview-routing.png\"><img class=\"size-full wp-image-19051\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/preview-routing.png\" alt=\"Preview routing\" width=\"1303\" height=\"674\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/preview-routing.png 1303w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/preview-routing-300x155.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/preview-routing-1024x530.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/preview-routing-768x397.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/preview-routing-20x10.png 20w\" sizes=\"(max-width: 1303px) 100vw, 1303px\" \/><\/a><figcaption id=\"caption-attachment-19051\" class=\"wp-caption-text\">Preview routing<\/figcaption><\/figure>\n<p>Ambassador offers a free service that creates preview URLs for you anytime you do an intercept in a service. If you enable it (it is completely optional), you will get a public URL every time you intercept an existing application in the cluster.<\/p>\n<p>Then if somebody visits your preview URL, the agent will send all their traffic to your workstation. If somebody else visits your service NOT from the preview URL, then all of their traffic will go to the existing application that runs inside the cluster.<\/p>\n<p>This allows you to quickly share your local environment with your team. Think of it as <a href=\"https:\/\/ngrok.com\/\">ngrok <\/a>for kubernetes. The beauty here is the fact that both applications are running at the same time. This means that you are free to debug and develop your own application for fixing something, while all existing users of your application are still connecting to the production version oblivious to your changes.<\/p>\n<p>Once you are ready to publish your changes to everybody you can of course commit your code and let your CI\/CD solution update all live traffic. But during your development time there is no better way to work in a production like environment without actually affecting production.<\/p>\n<p>I see this use case is very important for teams that want to quickly test hot-fixes without actually deploying anything but even basic collaboration with another developer becomes very simple if you can quickly share your feature with them and quickly iterate on it.<\/p>\n<p>Note that this feature requires an ingress in your cluster. And it can be any kind of compliant ingress (and not just the Ambassador API gateway\/edge stack).<\/p>\n<p>The Ambassador Cloud dashboard also provides a nice UI for managing your preview environments:<\/p>\n<figure id=\"attachment_19052\" aria-describedby=\"caption-attachment-19052\" style=\"width: 1228px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/preview-env.png\"><img class=\"size-full wp-image-19052\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/preview-env.png\" alt=\"Preview dashboard\" width=\"1228\" height=\"643\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/preview-env.png 1228w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/preview-env-300x157.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/preview-env-1024x536.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/preview-env-768x402.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/preview-env-20x10.png 20w\" sizes=\"(max-width: 1228px) 100vw, 1228px\" \/><\/a><figcaption id=\"caption-attachment-19052\" class=\"wp-caption-text\">Preview dashboard<\/figcaption><\/figure>\n<p>You can also decide if you want your environment to be accessible only from the same GitHub\/GitLab organisation as you or any other user.<\/p>\n<h2>How to use preview environments with Telepresence and Ambassador cloud<\/h2>\n<p>Creating a preview environment is not a separate command on its own. You use the normal intercept command as before but you need to login into ambassador cloud first<\/p>\n<pre>telepresence login\ntelepresence intercept dataprocessingservice --port 3000 -n demo\n<\/pre>\n<p>The first command will open the UI and ask you to signup with Github\/Google\/Gitlab. Then the second command will intercept the service as before but also print out the URL of the preview environment.<\/p>\n<p>You can share the preview environment via email\/slack\/messaging with your colleagues. It is interesting to notice that Telepresence adds an extra header to the traffic request when it works in intercept mode. You can use this header yourself in the application to make your application behave differently according to the source of the request (e.g. enable special debugging support if the request comes from a preview environment).<\/p>\n<h2>Comparison with other tools<\/h2>\n<p>The biggest competitor to Telepresence 2 right now is the previous version. There are some other tools that share some of the same functionality.<\/p>\n<h5>Comparison with kubectl port-forward:<\/h5>\n<p>The port-forward command is very simplistic as it only works on a single port for a single service and it is a one way connection. It is great for quick access to the cluster but Telepresence has many more features. You can still use kubectl port forward for adhoc connection issues, but for application development there are many better choices.<\/p>\n<h5>Comparison with kubefwd:<\/h5>\n<p><a href=\"https:\/\/github.com\/txn2\/kubefwd\">Kubefwd <\/a>works similar to Telepresence by making your local environment think it is inside the cluster. The networking tunnel is one direction only. Telepresence is much smarter as it also makes the other cluster applications think that your local app is inside the same cluster. So with Kubefwd you only get 50% of what basic Telepresence offers. Telepresence also has <a href=\"https:\/\/www.getambassador.io\/docs\/telepresence\/latest\/reference\/volume\/\">volume mounting support<\/a> for more advanced scenarios.<\/p>\n<h5>Comparison with Telepresence 1<\/h5>\n<p>Telepresence 2 is improved in every aspect compared to the previous version.The <a href=\"https:\/\/www.getambassador.io\/docs\/telepresence\/latest\/reference\/architecture\/\">networking architecture<\/a> is now completely redesigned. There is a global traffic manager on each cluster and each intercepted service has its own sidecar container.The new routing agent is great for reliability and Telepresence 2 will work better with spotty network connections. The ability to use the sidecar router instead of fully swapping the deployment comes with its own advantages (the preview environments). Also Telepresence 2 is a single binary written in Go making installation much easier (Telepresence 1 was a multi file Python application)<\/p>\n<h2>Combining Telepresence with outer loop tools<\/h2>\n<p>Telepresence is great for handling the so-called <a href=\"https:\/\/www.getambassador.io\/docs\/telepresence\/latest\/concepts\/devloop\/\">inner-loop of development<\/a>. That is the part where you as a developer write your code and test right away on your local machine. For this part of the process you want the quickest feedback possible.<\/p>\n<p>However once you complete your feature, you should still deploy your application to a cluster to verify its behavior and avoid the dreaded \u201cworks on my machine\u201d issues. Telepresence is great for the inner development loop, but you need to remember that your application runs on your local workstation outside of a container and outside of a cluster.<\/p>\n<p>After you feel comfortable with your feature you can complete your workflow with tools that address the outer development loop in the sense that they actually gather all your application dependencies in a container and then deploy your application to a Kubernetes cluster.<\/p>\n<p>We have already explored such tools in our previous blog posts. Popular tools on this category are:<\/p>\n<ul>\n<li><a href=\"https:\/\/okteto.com\/\">Okteto<\/a><\/li>\n<li><a href=\"http:\/\/Tilt.dev\">Tilt.dev<\/a><\/li>\n<li><a href=\"http:\/\/Garden.io\">Garden.io<\/a><\/li>\n<li><a href=\"https:\/\/skaffold.dev\/\">Skaffold<\/a><\/li>\n<\/ul>\n<p><a href=\"https:\/\/okteto.com\/\">Okteto <\/a>has a powerful sync process that creates a development environment inside your cluster and runs the application there. If you use specific Kubernetes features such as GPU nodes or have complex networking and security requirements (IAM roles, specific identities) then Okteto can help you quickly see how your application behaves in the real cluster. Okteto also comes with the Okteto Cloud\/Okteto Enterprise option that has additional features in the context of a team (e.g. namespace isolation, credential management, build service, deploy from git, the Okteto Registry). See our <a href=\"https:\/\/codefresh.io\/kubernetes-tutorial\/okteto\/\">review of Okteto<\/a> for more details.<\/p>\n<p><a href=\"https:\/\/tilt.dev\/\">Tilt.dev <\/a>is another service for local Kubernetes development. Its main strength is its innovative UI that groups all related microservices from an application plus any custom resources that you want to create. Tilt has many different options for <a href=\"https:\/\/docs.tilt.dev\/local_vs_remote.html\">local, hybrid or fully remote development<\/a>. In the case of local development you still need <a href=\"https:\/\/docs.tilt.dev\/choosing_clusters.html\">a local Kubernetes cluster<\/a>.<\/p>\n<p>The GUI of Tilt is specifically designed for applications with a large number of microservices and is great for making changes to more than one service at once. Tilt is very extensible, making it easy to adapt to whatever setup the user has (as opposed to the user having to adapt to the tool), and has a growing extensions ecosystem with many third-party contributors (<a href=\"https:\/\/github.com\/tilt-dev\/tilt-extensions\/\">https:\/\/github.com\/tilt-dev\/tilt-extensions\/<\/a>). See our <a href=\"https:\/\/codefresh.io\/kubernetes-tutorial\/local-kubernetes-development-tilt-dev\/\">review of tilt.dev<\/a> for more details.<\/p>\n<p><a href=\"https:\/\/garden.io\/\">Garden.io<\/a> is a tool designed for the full software lifecycle (and not just deployments). Its main appeal is that it creates a model of your application dependencies <a href=\"https:\/\/docs.garden.io\/basics\/how-garden-works\">with great visualization<\/a> giving you great insights into what needs to be updated every time a change is made. Garden attempts to model the full software workflow including <a href=\"https:\/\/docs.garden.io\/using-garden\/tests\">testing<\/a>. You also have the ability to create your own tasks to improve your daily workflow. This means that you can set up Garden as a mini CI workflow (that you can call from your real CI service or Garden Enterprise) allowing you to unify the way a developer works with your CI pipelines. One of the strong points of the approach is that proper tests and pipelines can be run <strong>before <\/strong>pushing to git, which makes integration\/e2e testing and debugging CI\/CD issues much faster.<\/p>\n<p>Garden also gives a lot of importance to extensibility. Even Kubernetes support is actually created as a plugin\/extensions and there is already a set of providers for other platforms. Like Tilt.dev you can choose where the packaging\/deployment takes place (on a <a href=\"https:\/\/docs.garden.io\/guides\/local-kubernetes\">local <\/a>or <a href=\"https:\/\/docs.garden.io\/guides\/in-cluster-building\">remote kubernetes cluster<\/a>) and of course supports <a href=\"https:\/\/docs.garden.io\/guides\/hot-reload\">live-reload capabilities<\/a>. See our <a href=\"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/\">review of garden.io<\/a> for more details.<\/p>\n<p><a href=\"https:\/\/skaffold.dev\/\">Skaffold <\/a>is a tool for local Kubernetes development. It contains an opinionated workflow (that can work the same on your local workstation or within a CI pipeline) and has built-in integration with many popular and not so popular build tools such as <a href=\"https:\/\/bazel.build\/\">Bazel<\/a>, <a href=\"https:\/\/github.com\/GoogleContainerTools\/jib\">Jib <\/a>and <a href=\"https:\/\/buildpacks.io\/\">buildpacks<\/a>. See our <a href=\"https:\/\/codefresh.io\/howtos\/local-k8s-draft-skaffold-garden\/\">review of skaffold<\/a> for more details.<\/p>\n<h2>Adopting Telepresence in your team<\/h2>\n<p>So is Telepresence worth having in your tool chest?<\/p>\n<p>First of all if you are a Kubernetes Administrator or system operator the answer is undeniably yes. All the other solutions are targeted strictly at developers. But if all you want is to see what endpoints are available in the cluster and want to run an adhoc bash\/python script to do something that touches multiple services, Telepresence is much more powerful that kubectl port-forward.<\/p>\n<p>If you are a developer, Telepresence works great for local development since it has the fastest code loop ever (just code). No file syncing, no docker rebuild, no live container update and no local cluster is needed. You need to take into account the fact that your application runs on your laptop OUTSIDE of a kubernetes cluster, accepting the risk of the dreaded \u201cworks on my machine\u201d effect.<\/p>\n<p>The preview feature of Telepresence is a nice addition, especially for really critical production hotfixes (where you want to develop a hotfix while your live users are unaffected).<\/p>\n<p>To get the full benefits of local Kubernetes development you should couple Telepresence with another tool that actually deploys the application in the cluster and get the best of both worlds (fast local development, verification that the application will run the same in a Kubernetes cluster).<\/p>\n<p>Cover photo by <a href=\"https:\/\/unsplash.com\/photos\/RjPG-_LVmiQ\">Unsplash<\/a><\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"19043\"\/>","protected":false},"excerpt":{"rendered":"<p>Telepresence 2 was recently released and (like Telepresence 1) it is a worthy addition to your Kubernetes tool chest. Telepresence is one of those tools you cannot live without after discovering how your daily workflow is improved. So what is Telepresence? It is too hard to describe all the functionalities of the tool in a &hellip; <a href=\"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/\">Read more<\/a><\/p>\n","protected":false},"author":62,"featured_media":19045,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[5467,1657,1505,1538,6],"tags":[14,24,44,52,64,4481,5580],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Using Telepresence 2 for Kubernetes Debugging<\/title>\n<meta name=\"description\" content=\"In this blog, you will learn what is Telepresence, its benefits and the major use cases that it covers.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Using Telepresence 2 for Kubernetes debugging and local development\" \/>\n<meta property=\"og:description\" content=\"In this blog, you will learn what is Telepresence, its benefits and the major use cases that it covers.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2021-04-15T10:21:24+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-06T15:50:42+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/blog-picture.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1024\" \/>\n\t<meta property=\"og:image:height\" content=\"340\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@codefresh\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Kostis Kapelonis\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"18 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/blog-picture.jpg\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/blog-picture.jpg\",\"width\":1024,\"height\":340},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/#webpage\",\"url\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/\",\"name\":\"Using Telepresence 2 for Kubernetes Debugging\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/#primaryimage\"},\"datePublished\":\"2021-04-15T10:21:24+00:00\",\"dateModified\":\"2022-01-06T15:50:42+00:00\",\"description\":\"In this blog, you will learn what is Telepresence, its benefits and the major use cases that it covers.\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Using Telepresence 2 for Kubernetes debugging and local development\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87\"},\"headline\":\"Using Telepresence 2 for Kubernetes debugging and local development\",\"datePublished\":\"2021-04-15T10:21:24+00:00\",\"dateModified\":\"2022-01-06T15:50:42+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/#webpage\"},\"wordCount\":3604,\"commentCount\":2,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/blog-picture.jpg\",\"keywords\":[\"docker\",\"Containers\",\"Kubernetes\",\"devops\",\"microservices\",\"debugging\",\"development environment setup\"],\"articleSection\":[\"Devops\",\"Kubernetes Tutorials\",\"Containers\",\"DevOps Tutorials\",\"How Tos\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87\",\"name\":\"Kostis Kapelonis\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png\",\"caption\":\"Kostis Kapelonis\"},\"description\":\"Kostis is a software engineer\/technical-writer dual class character. He lives and breathes automation, good testing practices and stress-free deployments with GitOps.\",\"url\":\"https:\/\/codefresh.io\/author\/kostiscodefresh-io\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Using Telepresence 2 for Kubernetes Debugging","description":"In this blog, you will learn what is Telepresence, its benefits and the major use cases that it covers.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/","og_locale":"en_US","og_type":"article","og_title":"Using Telepresence 2 for Kubernetes debugging and local development","og_description":"In this blog, you will learn what is Telepresence, its benefits and the major use cases that it covers.","og_url":"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2021-04-15T10:21:24+00:00","article_modified_time":"2022-01-06T15:50:42+00:00","og_image":[{"width":1024,"height":340,"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/blog-picture.jpg","type":"image\/jpeg"}],"twitter_card":"summary_large_image","twitter_creator":"@codefresh","twitter_site":"@codefresh","twitter_misc":{"Written by":"Kostis Kapelonis","Est. reading time":"18 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/blog-picture.jpg","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/blog-picture.jpg","width":1024,"height":340},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/#webpage","url":"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/","name":"Using Telepresence 2 for Kubernetes Debugging","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/#primaryimage"},"datePublished":"2021-04-15T10:21:24+00:00","dateModified":"2022-01-06T15:50:42+00:00","description":"In this blog, you will learn what is Telepresence, its benefits and the major use cases that it covers.","breadcrumb":{"@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Using Telepresence 2 for Kubernetes debugging and local development"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87"},"headline":"Using Telepresence 2 for Kubernetes debugging and local development","datePublished":"2021-04-15T10:21:24+00:00","dateModified":"2022-01-06T15:50:42+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/#webpage"},"wordCount":3604,"commentCount":2,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/04\/blog-picture.jpg","keywords":["docker","Containers","Kubernetes","devops","microservices","debugging","development environment setup"],"articleSection":["Devops","Kubernetes Tutorials","Containers","DevOps Tutorials","How Tos"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/kubernetes-tutorial\/telepresence-2-local-development\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87","name":"Kostis Kapelonis","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png","caption":"Kostis Kapelonis"},"description":"Kostis is a software engineer\/technical-writer dual class character. He lives and breathes automation, good testing practices and stress-free deployments with GitOps.","url":"https:\/\/codefresh.io\/author\/kostiscodefresh-io\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/19043"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/62"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=19043"}],"version-history":[{"count":1,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/19043\/revisions"}],"predecessor-version":[{"id":20943,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/19043\/revisions\/20943"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/19045"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=19043"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=19043"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=19043"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}