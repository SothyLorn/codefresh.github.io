{"id":19394,"date":"2021-06-11T04:12:10","date_gmt":"2021-06-11T12:12:10","guid":{"rendered":"https:\/\/codefresh.io\/?p=19394"},"modified":"2021-06-11T05:07:26","modified_gmt":"2021-06-11T13:07:26","slug":"enterprise-ci-cd-best-practices-part-1","status":"publish","type":"post","link":"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/","title":{"rendered":"Enterprise CI\/CD Best Practices &#8211; Part 1"},"content":{"rendered":"<p>If you are trying to learn your way around Continuous Integration\/Delivery\/Deployment, you might notice that there are mostly two categories of resources:<\/p>\n<ol>\n<li>High-level overviews of <a href=\"https:\/\/codefresh.io\/continuous-deployment\/heck-continuous-integration-ci-delivery-cd-deployment-cdp\/\">what CI\/CD is and why you need it<\/a>. These are great for when you are getting started but do not cover anything about day two operations or how to optimize an existing process.<\/li>\n<li>Detailed tutorials that cover only a specific aspect of CI\/CD (e.g., just unit testing or just deployment) using specific programming languages and tools.<\/li>\n<\/ol>\n<p>We believe that there is a gap between those two extremes. We are missing a proper guide that sits between those two categories by talking about best practices, but not in an abstract way. If you always wanted to read a guide about CI\/CD that explains not just the \u201cwhy\u201d but also the \u201chow\u201d to apply best practices, then this guide is for you.<\/p>\n<p>We will describe all the basic foundations of effective CI\/CD workflows, but instead of talking only in generic terms, we will explain all the technicalities behind each best practice and more importantly, how it can affect you if you don&#8217;t adopt it.<\/p>\n<h2>Setting Priorities<\/h2>\n<p>Several companies try to jump on the DevOps bandwagon without having mastered the basics first. You will soon realize that several problems which appear during the CI\/CD process are usually pre-existing process problems that only became visible when that company tried to follow best practices in CI\/CD pipelines.<\/p>\n<p>The table below summarizes the requirements discussed in the rest of the guide. We also split the requirements according to priority:<\/p>\n<p><strong>Critical <\/strong>requirements are essential to have before adopting DevOps or picking a solution for CI\/CD. You should address them first. If you don\u2019t, then they will block the process later down the road.<br \/>\nRequirements with <strong>High <\/strong>priority are still important to address, but you can fix them while you are adopting a CI\/CD platform<br \/>\nRequirements with <strong>Medium <\/strong>priority can be addressed in the long run. Even though they will improve your deployment process, you can work around them until you find a proper solution.<\/p>\n<div class=\"table-responsive\"><table class=\"table table-responsive-sm\">\n<thead>\n<tr>\n<th>Number<\/th>\n<th>Best practice<\/th>\n<th>Category<\/th>\n<th>Importance<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<td>1<\/td>\n<td>All project assets are in source control<\/td>\n<td>Artifacts<\/td>\n<td>Critical<\/td>\n<\/tr>\n<tr>\n<td>2<\/td>\n<td>A single artifact is produced for all environments<\/td>\n<td>Artifacts<\/td>\n<td>High<\/td>\n<\/tr>\n<tr>\n<td>3<\/td>\n<td>Artifacts move within pipelines (and not source revisions)<\/td>\n<td>Artifacts<\/td>\n<td>High<\/td>\n<\/tr>\n<tr>\n<td>4<\/td>\n<td>Development happens with short-lived branches (one per feature)<\/td>\n<td>Build<\/td>\n<td>High<\/td>\n<\/tr>\n<tr>\n<td>5<\/td>\n<td>Builds can be performed in a single step<\/td>\n<td>Build<\/td>\n<td>High<\/td>\n<\/tr>\n<tr>\n<td>6<\/td>\n<td>Builds are fast (less than 5 minutes)<\/td>\n<td>Build<\/td>\n<td>Medium<\/td>\n<\/tr>\n<tr>\n<td>7<\/td>\n<td>Store your dependencies<\/td>\n<td>Build<\/td>\n<td>High<\/td>\n<\/tr>\n<tr>\n<td>8<\/td>\n<td>Tests are automated<\/td>\n<td>Testing<\/td>\n<td>High<\/td>\n<\/tr>\n<tr>\n<td>9<\/td>\n<td>Tests are fast<\/td>\n<td>Testing<\/td>\n<td>High<\/td>\n<\/tr>\n<tr>\n<td>10<\/td>\n<td>Tests auto clean their side effects<\/td>\n<td>Testing<\/td>\n<td>High<\/td>\n<\/tr>\n<tr>\n<td>11<\/td>\n<td>Multiple test suites exist<\/td>\n<td>Testing<\/td>\n<td>Medium<\/td>\n<\/tr>\n<tr>\n<td>12<\/td>\n<td>Test environments on demand<\/td>\n<td>Testing<\/td>\n<td>Medium<\/td>\n<\/tr>\n<tr>\n<td>13<\/td>\n<td>Running test suites concurrently<\/td>\n<td>Testing<\/td>\n<td>Medium<\/td>\n<\/tr>\n<tr>\n<td>14<\/td>\n<td>Security scanning is part of the process<\/td>\n<td>Quality and Audit<\/td>\n<td>High<\/td>\n<\/tr>\n<tr>\n<td>15<\/td>\n<td>Quality scanning\/Code reviews are part of the process<\/td>\n<td>Quality and Audit<\/td>\n<td>Medium<\/td>\n<\/tr>\n<tr>\n<td>16<\/td>\n<td>Database updates have their lifecycle<\/td>\n<td>Databases<\/td>\n<td>High<\/td>\n<\/tr>\n<tr>\n<td>17<\/td>\n<td>Database updates are automated<\/td>\n<td>Databases<\/td>\n<td>High<\/td>\n<\/tr>\n<tr>\n<td>18<\/td>\n<td>Database updates are forward and backward compatible<\/td>\n<td>Databases<\/td>\n<td>High<\/td>\n<\/tr>\n<tr>\n<td>19<\/td>\n<td>Deployments happen via a single path (CI\/CD server)<\/td>\n<td>Deployments<\/td>\n<td>Critical<\/td>\n<\/tr>\n<tr>\n<td>20<\/td>\n<td>Deployments happen gradually in stages<\/td>\n<td>Deployments<\/td>\n<td>High<\/td>\n<\/tr>\n<tr>\n<td>21<\/td>\n<td>Metrics and logs can detect a bad deployment<\/td>\n<td>Deployments<\/td>\n<td>High<\/td>\n<\/tr>\n<tr>\n<td>22<\/td>\n<td>Automatic rollbacks are in place<\/td>\n<td>Deployments<\/td>\n<td>Medium<\/td>\n<\/tr>\n<tr>\n<td>23<\/td>\n<td>Staging matches production<\/td>\n<td>Deployments<\/td>\n<td>Medium<\/td>\n<\/tr>\n<\/tbody>\n<\/table><\/div>\n<h2>Best Practice 1 &#8211; Place Everything Under Source Control<\/h2>\n<p>Artifact management is perhaps the most important characteristic of a pipeline. At its most basic level, a pipeline creates binary\/package artifacts from source code and deploys them to the appropriate infrastructure that powers the application that is being deployed.<\/p>\n<p>The single most important rule to follow regarding assets and source code is the following:<\/p>\n<figure id=\"attachment_19380\" aria-describedby=\"caption-attachment-19380\" style=\"width: 1342px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/everything-in-git.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/everything-in-git.png\" alt=\"\" width=\"1342\" height=\"654\" class=\"size-full wp-image-19380\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/everything-in-git.png 1342w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/everything-in-git-300x146.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/everything-in-git-1024x499.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/everything-in-git-768x374.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/everything-in-git-20x10.png 20w\" sizes=\"(max-width: 1342px) 100vw, 1342px\" \/><\/a><figcaption id=\"caption-attachment-19380\" class=\"wp-caption-text\">Everything in Git<\/figcaption><\/figure>\n<p><strong>All files that constitute an application should be managed using source control.<\/strong><\/p>\n<p>Unfortunately, even though this rule seems pretty basic, there are a lot of organizations out there that fail to follow it. Traditionally, developers are using version control systems only for the source code of an application but leave out other supporting files such as installation scripts, configuration values, or test data.<\/p>\n<p>Everything that takes part in the application lifecycle should be checked into source control. This includes but is not limited to:<\/p>\n<ol>\n<li>Source code<\/li>\n<li>Build scripts<\/li>\n<li>Pipeline definition<\/li>\n<li>Configuration values<\/li>\n<li>Tests and test data<\/li>\n<li>Database schemas<\/li>\n<li>Database update scripts<\/li>\n<li>Infrastructure definition scripts<\/li>\n<li>Cleanup\/installation\/purging scripts<\/li>\n<li>Associated documentation<\/li>\n<\/ol>\n<p>The end goal is that anybody can check out everything that relates to an application and can recreate it locally or in any other alternative environment.<\/p>\n<p>A common anti-pattern we see is deployments happening with a special script that is available only on a specific machine or on the workstation of a specific team member, or even an attachment in a wiki page, and so on.<\/p>\n<figure id=\"attachment_19382\" aria-describedby=\"caption-attachment-19382\" style=\"width: 2490px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/not-everything-in-git.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/not-everything-in-git.png\" alt=\"Resources are all over the place\" width=\"2490\" height=\"1288\" class=\"size-full wp-image-19382\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/not-everything-in-git.png 2490w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/not-everything-in-git-300x155.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/not-everything-in-git-1024x530.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/not-everything-in-git-768x397.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/not-everything-in-git-1536x795.png 1536w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/not-everything-in-git-2048x1059.png 2048w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/not-everything-in-git-20x10.png 20w\" sizes=\"(max-width: 2490px) 100vw, 2490px\" \/><\/a><figcaption id=\"caption-attachment-19382\" class=\"wp-caption-text\">Resources are all over the place<\/figcaption><\/figure>\n<p>Version control also means that all these resources are audited and have a detailed history of all changes. If you want to see how the application looked 6 months ago, you can easily use the facilities of your version control system to obtain that information.<\/p>\n<p>Note that even though all these resources should be versioned control, it doesn\u2019t have to be in the same repository. Whether you use multiple repositories or a single one, is a decision that needs careful consideration and has not a definitive answer. The important part however is to make sure that everything is indeed version controlled.<\/p>\n<p>Even though GitOps is the emerging practice of using Git operations for promotions and deployments, you don\u2019t need to follow GitOps specifically to follow this best practice. Having historical and auditing information for your project assets is always a good thing, regardless of the actual software paradigm that you follow.<\/p>\n<h2>Best Practice 2 &#8211; Create a Single package\/binary\/container for All Environments<\/h2>\n<p>One of the main functionalities of a CI\/CD pipeline is to verify that a new feature is fit for deployment to production. This happens gradually as every step in a pipeline is essentially performing additional checks for that feature.<\/p>\n<p>For this paradigm to work, however, you need to make sure that what is being tested and prodded within a pipeline is also the same thing that gets deployed. In practice, this means that a feature\/release should be packaged once and be deployed to all successive environments in the same manner.<\/p>\n<figure id=\"attachment_19385\" aria-describedby=\"caption-attachment-19385\" style=\"width: 1492px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/same-artifact-for-all.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/same-artifact-for-all.png\" alt=\"Same artifact\" width=\"1492\" height=\"480\" class=\"size-full wp-image-19385\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/same-artifact-for-all.png 1492w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/same-artifact-for-all-300x97.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/same-artifact-for-all-1024x329.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/same-artifact-for-all-768x247.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/same-artifact-for-all-20x6.png 20w\" sizes=\"(max-width: 1492px) 100vw, 1492px\" \/><\/a><figcaption id=\"caption-attachment-19385\" class=\"wp-caption-text\">Same artifact<\/figcaption><\/figure>\n<p>Unfortunately, a lot of organizations fall into the common trap of creating different artifacts for dev\/staging\/prod environments because they haven\u2019t mastered yet a common infrastructure for configuration. This implies that they deploy a slightly different version of what was tested during the pipeline. Configuration discrepancies and last-minute changes are some of the biggest culprits when it comes to failed deployments, and having a different package per environment exacerbates this problem.<\/p>\n<figure id=\"attachment_19384\" aria-describedby=\"caption-attachment-19384\" style=\"width: 1942px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/different-artifact.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/different-artifact.png\" alt=\"Different artifacts\" width=\"1942\" height=\"1568\" class=\"size-full wp-image-19384\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/different-artifact.png 1942w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/different-artifact-300x242.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/different-artifact-1024x827.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/different-artifact-768x620.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/different-artifact-1536x1240.png 1536w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/different-artifact-20x16.png 20w\" sizes=\"(max-width: 1942px) 100vw, 1942px\" \/><\/a><figcaption id=\"caption-attachment-19384\" class=\"wp-caption-text\">Different artifacts<\/figcaption><\/figure>\n<p>Instead of creating multiple versions per environment, the accepted practice is to have a single artifact that only changes configuration between different environments. With the appearance of containers and the ability to create a self-sufficient package of an application in the form of Docker images, there is no excuse for not following this practice.<\/p>\n<p>Regarding configuration there are two approaches:<\/p>\n<ol>\n<li>The binary artifact\/container has all configurations embedded inside it and changes the active one according to the running environment (easy to start, but not very flexible. We don\u2019t recommend this approach)<\/li>\n<li>The container has no configuration at all. It  fetches needed configuration during runtime on demand using a discovery mechanism such as a key\/value database, a filesystem volume, a service discovery mechanism, etc. (the recommended approach)<\/li>\n<\/ol>\n<p>The result is the guarantee where the exact binary\/package that is deployed in production is also the one that was tested in the pipeline.<\/p>\n<h2>Best Practice 3 &#8211; Artifacts, not Git Commits, should travel within a Pipeline<\/h2>\n<p>A corollary to the previous point (the same artifact\/package should be deployed in all environments) is the fact that a deployment artifact <strong>should be built only once<\/strong>.<\/p>\n<p>The whole concept around containers (and VM images in the past) is to have <strong>immutable <\/strong>artifacts. An application is built only once with the latest feature or features that will soon be released.<\/p>\n<p>Once that artifact is built, it should move from each pipeline step to the next as an unchanged entity. Containers are the perfect vehicle for this immutability as they allow you to create an image only once (at the beginning of the pipeline) and promote it towards production with each successive pipeline step.<\/p>\n<figure id=\"attachment_19386\" aria-describedby=\"caption-attachment-19386\" style=\"width: 2569px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/promote-artifact.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/promote-artifact.png\" alt=\"Promote artifact\" width=\"2569\" height=\"1604\" class=\"size-full wp-image-19386\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/promote-artifact.png 2569w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/promote-artifact-300x187.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/promote-artifact-1024x639.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/promote-artifact-768x480.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/promote-artifact-1536x959.png 1536w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/promote-artifact-2048x1279.png 2048w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/promote-artifact-20x12.png 20w\" sizes=\"(max-width: 2569px) 100vw, 2569px\" \/><\/a><figcaption id=\"caption-attachment-19386\" class=\"wp-caption-text\">Promote artifact<\/figcaption><\/figure>\n<p>Unfortunately, the common anti-pattern seen here is companies promoting commits instead of container images. A source code commit is traveling in the pipeline stages and each step is being rebuilt by checking out the source code again and again.<\/p>\n<p>This is a bad practice for two main reasons. First of all, it makes the pipeline very slow as packaging and compiling software is a very lengthy process and repeating it at each step is a waste of time and resources.<\/p>\n<p>Secondly, it breaks the previous rule. Recompiling a code commit at every pipeline step leaves the window open for resulting in a different artifact than before. You lose the guarantee that what is deploying in production is the same thing that was tested in the pipeline.<\/p>\n<h2>Best Practice 4 &#8211; Use short-lived Branches for each feature<\/h2>\n<p>A sound pipeline has several quality gates (such as unit tests or security scans) that test the quality of a feature and its applicability to production deployments. In a development environment with a high velocity (and a big development team), not all features are expected to reach production right away. Some features may even clash with each other at their initial deployment version.<\/p>\n<p>To allow for fine-grained quality gating between features, a pipeline should have the power to veto individual features and be able to select only a subset of them for production deployment. The easiest way to obtain this guarantee is following the feature-per-branch methodology where short-lived features (i.e. that can fit within a single development sprint) correspond to individual source control branches.<\/p>\n<figure id=\"attachment_19388\" aria-describedby=\"caption-attachment-19388\" style=\"width: 2563px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/use-short-branches.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/use-short-branches.png\" alt=\"Short-lived branches\" width=\"2563\" height=\"1125\" class=\"size-full wp-image-19388\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/use-short-branches.png 2563w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/use-short-branches-300x132.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/use-short-branches-1024x449.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/use-short-branches-768x337.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/use-short-branches-1536x674.png 1536w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/use-short-branches-2048x899.png 2048w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/use-short-branches-20x9.png 20w\" sizes=\"(max-width: 2563px) 100vw, 2563px\" \/><\/a><figcaption id=\"caption-attachment-19388\" class=\"wp-caption-text\">Short-lived branches<\/figcaption><\/figure>\n<p>This makes the pipeline design very simple as everything revolves around individual features. Running test suites against a code branch tests only the new feature. Security scanning of a branch reveals problems with a new feature.<\/p>\n<p>Project stakeholders are then able to deploy and rollback individual features or block complete branches from even being merged into the mainline code.<\/p>\n<p>Unfortunately, there are still companies that have long-lived feature branches that collect multiple and unrelated features in a single batch. This not only makes merging a pain but also becomes problematic in case a single feature is found to have issues (as it is difficult to revert it individually).<\/p>\n<p>The evolution of short-lived branches is to follow <a href=\"https:\/\/trunkbaseddevelopment.com\/\">trunk-based development<\/a> and feature toggles. This can be your endgame but only if you have mastered short-lived branches first.<\/p>\n<h2>Best Practice 5 &#8211; A basic build should take a single step<\/h2>\n<p>CI\/CD pipelines are all about automation. It is very easy to automate something that already was very easy to run in the first place.<\/p>\n<p>Ideally, a simple build of a project should be a single command. That command usually calls the build system or a script (e.g., bash, PowerShell) that is responsible for taking the source code, running some basic tests, and packaging the final artifact\/container.<\/p>\n<figure id=\"attachment_19389\" aria-describedby=\"caption-attachment-19389\" style=\"width: 1114px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/single-build-step.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/single-build-step.png\" alt=\"Simple build \" width=\"1114\" height=\"512\" class=\"size-full wp-image-19389\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/single-build-step.png 1114w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/single-build-step-300x138.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/single-build-step-1024x471.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/single-build-step-768x353.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/single-build-step-20x9.png 20w\" sizes=\"(max-width: 1114px) 100vw, 1114px\" \/><\/a><figcaption id=\"caption-attachment-19389\" class=\"wp-caption-text\">Simple build<\/figcaption><\/figure>\n<p>It is ok if more advanced checks (such as load testing) need additional steps. The basic build, however (that results in a deployable artifact) should only involve a single command. A new developer should be able to check out a brand new copy of the source code, execute this single command and get immediately a deployable artifact.<\/p>\n<p>The same approach is true for deployments (deployments should happen with a single command)<br \/>\nThen if you need to create any pipeline you can simply insert that single step in any part of the pipeline.<\/p>\n<p>Unfortunately, there are still companies that suffer from many manual steps to get a basic build running. Downloading extra files, changing properties, and in general having big checklists that need to be followed are steps that should be automated within that very same script.<\/p>\n<figure id=\"attachment_19390\" aria-describedby=\"caption-attachment-19390\" style=\"width: 1230px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/many-build-steps.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/many-build-steps.png\" alt=\"Complex build\" width=\"1230\" height=\"918\" class=\"size-full wp-image-19390\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/many-build-steps.png 1230w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/many-build-steps-300x224.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/many-build-steps-1024x764.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/many-build-steps-768x573.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/many-build-steps-20x15.png 20w\" sizes=\"(max-width: 1230px) 100vw, 1230px\" \/><\/a><figcaption id=\"caption-attachment-19390\" class=\"wp-caption-text\">Complex build<\/figcaption><\/figure>\n<p>If a new hire in your development team needs more than 15 minutes for the basic build (after checking out the code in their workstation) then you almost certainly suffer from this problem.<\/p>\n<p>A well-built CI\/CD pipeline just repeats what is already possible on the local workstation. The basic build and deploy process should be already well oiled before being moved into a CI\/CD platform.<\/p>\n<h2>Best Practice 6  &#8211; Basic Builds are Fast (5 &#8211; 10 minutes)<\/h2>\n<p>Having a fast build is a big advantage for both developers and operators\/sysadmins.<\/p>\n<p>Developers are happy when the feedback loop between a commit and its side effects is as short as possible. It is very easy to fix a bug in the code that you just committed as it is very fresh on your mind. Having to wait for one hour before developers can detect failed builds is a very frustrating experience.<\/p>\n<p>Builds should be fast both in the CI platform and in the local station. At any given point in time, multiple features are trying to enter the code mainline. The CI server can be easily overwhelmed if building them takes a lot of time.<\/p>\n<p>Operators also gain huge benefits from fast builds. Pushing hot fixes in production or rolling back to previous releases is always a stressful experience. The shorter this experience is the better. Rollbacks that take 30 minutes are much more difficult to work with than those that take three minutes.<\/p>\n<p>In summary, a basic build should be really fast. Ideally less than five minutes. If it takes more than 10 minutes, your team should investigate the causes and shorten that time. Modern build systems have great caching mechanisms.<\/p>\n<ul>\n<li>Library dependencies should be fetched from an internal proxy repository instead of the internet<\/li>\n<li>Avoid the use of code generators unless otherwise needed<\/li>\n<li>Split your unit (fast) and integration tests (slow) and only use unit tests for the basic build<\/li>\n<li>Fine-tune your container images to take full advantage of the Docker layer caching<\/li>\n<\/ul>\n<p>Getting faster builds is also one of the reasons that you should explore if you are moving to microservices.<\/p>\n<h2>Best Practice 7  &#8211; Store\/Cache Your Dependencies<\/h2>\n<p>It\u2019s all over the news. The <a href=\"https:\/\/www.theregister.com\/2016\/03\/23\/npm_left_pad_chaos\/\">left-pad incident<\/a>. The <a href=\"https:\/\/medium.com\/@alex.birsan\/dependency-confusion-4a5d60fec610\">dependency confusion hack<\/a>. While both incidents have great security implications, the truth is that storing your dependencies is also a very important tenet that is fundamental to the stability of your builds.<\/p>\n<p>Every considerable piece of code uses external dependencies in the form of libraries or associated tools. Your code should of course be always stored in Git. But all external libraries should be also stored by you in some sort of artifact repository.<\/p>\n<figure id=\"attachment_19392\" aria-describedby=\"caption-attachment-19392\" style=\"width: 2316px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/with-caching.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/with-caching.png\" alt=\"Store your own dependencies\" width=\"2316\" height=\"850\" class=\"size-full wp-image-19392\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/with-caching.png 2316w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/with-caching-300x110.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/with-caching-1024x376.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/with-caching-768x282.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/with-caching-1536x564.png 1536w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/with-caching-2048x752.png 2048w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/with-caching-20x7.png 20w\" sizes=\"(max-width: 2316px) 100vw, 2316px\" \/><\/a><figcaption id=\"caption-attachment-19392\" class=\"wp-caption-text\">Store your own dependencies<\/figcaption><\/figure>\n<p>Spend some time to collect our dependencies and understand where they are coming from. Apart from code libraries, other not-so-obvious moving parts are needed by a complete build as your base docker images or any command-line utilities that are needed for your builds.<\/p>\n<p>The best way to test your build for stability is to completely cut off internet access in your build servers (essentially simulating an air-gapped environment). Try to kick off a pipeline build where all your internal services (git, databases, artifact storage, container registry) are available, but nothing else from the public internet is accessible, and see what happens.<\/p>\n<figure id=\"attachment_19391\" aria-describedby=\"caption-attachment-19391\" style=\"width: 1769px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/straight-from-internet.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/straight-from-internet.png\" alt=\"Straight from the internet\" width=\"1769\" height=\"1260\" class=\"size-full wp-image-19391\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/straight-from-internet.png 1769w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/straight-from-internet-300x214.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/straight-from-internet-1024x729.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/straight-from-internet-768x547.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/straight-from-internet-1536x1094.png 1536w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/straight-from-internet-20x14.png 20w\" sizes=\"(max-width: 1769px) 100vw, 1769px\" \/><\/a><figcaption id=\"caption-attachment-19391\" class=\"wp-caption-text\">Straight from the internet<\/figcaption><\/figure>\n<p>If your build complains about a missing dependency, imagine that the same thing will happen in a real incident if that particular external resource is also down.<\/p>\n<p>Continued <a href=\"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-2\/\">on part2<\/a>. You can download all 3 parts in <a href=\"https:\/\/codefresh.io\/ebooks\/enterprise-ci-cd-best-practices\/\">a single PDF as an ebook<\/a>.<\/p>\n<p>Cover photo by <a href=\"https:\/\/unsplash.com\/photos\/jHZ70nRk7Ns\">Unsplash<\/a>.<\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"19394\"\/>","protected":false},"excerpt":{"rendered":"<p>If you are trying to learn your way around Continuous Integration\/Delivery\/Deployment, you might notice that there are mostly two categories of resources: High-level overviews of what CI\/CD is and why you need it. These are great for when you are getting started but do not cover anything about day two operations or how to optimize &hellip; <a href=\"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/\">Read more<\/a><\/p>\n","protected":false},"author":62,"featured_media":19405,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[3120,5467,1543],"tags":[15,52,53,68,3174],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Enterprise CI\/CD Best Practices - Part 1 | Codefresh<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Enterprise CI\/CD Best Practices - Part 1\" \/>\n<meta property=\"og:description\" content=\"If you are trying to learn your way around Continuous Integration\/Delivery\/Deployment, you might notice that there are mostly two categories of resources: High-level overviews of what CI\/CD is and why you need it. These are great for when you are getting started but do not cover anything about day two operations or how to optimize &hellip; Read more\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2021-06-11T12:12:10+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-06-11T13:07:26+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/blog-picture-1.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1024\" \/>\n\t<meta property=\"og:image:height\" content=\"340\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@codefresh\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Kostis Kapelonis\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"13 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/blog-picture-1.jpg\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/blog-picture-1.jpg\",\"width\":1024,\"height\":340},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/#webpage\",\"url\":\"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/\",\"name\":\"Enterprise CI\/CD Best Practices - Part 1 | Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/#primaryimage\"},\"datePublished\":\"2021-06-11T12:12:10+00:00\",\"dateModified\":\"2021-06-11T13:07:26+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Enterprise CI\/CD Best Practices &#8211; Part 1\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87\"},\"headline\":\"Enterprise CI\/CD Best Practices &#8211; Part 1\",\"datePublished\":\"2021-06-11T12:12:10+00:00\",\"dateModified\":\"2021-06-11T13:07:26+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/#webpage\"},\"wordCount\":2650,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/blog-picture-1.jpg\",\"keywords\":[\"continuous integration\",\"devops\",\"CI\/CD\",\"continuous delivery\",\"enterprise\"],\"articleSection\":[\"Continuous Deployment\/Delivery\",\"Devops\",\"Continuous Integration\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87\",\"name\":\"Kostis Kapelonis\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png\",\"caption\":\"Kostis Kapelonis\"},\"description\":\"Kostis is a software engineer\/technical-writer dual class character. He lives and breathes automation, good testing practices and stress-free deployments with GitOps.\",\"url\":\"https:\/\/codefresh.io\/author\/kostiscodefresh-io\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Enterprise CI\/CD Best Practices - Part 1 | Codefresh","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/","og_locale":"en_US","og_type":"article","og_title":"Enterprise CI\/CD Best Practices - Part 1","og_description":"If you are trying to learn your way around Continuous Integration\/Delivery\/Deployment, you might notice that there are mostly two categories of resources: High-level overviews of what CI\/CD is and why you need it. These are great for when you are getting started but do not cover anything about day two operations or how to optimize &hellip; Read more","og_url":"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2021-06-11T12:12:10+00:00","article_modified_time":"2021-06-11T13:07:26+00:00","og_image":[{"width":1024,"height":340,"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/blog-picture-1.jpg","type":"image\/jpeg"}],"twitter_card":"summary_large_image","twitter_creator":"@codefresh","twitter_site":"@codefresh","twitter_misc":{"Written by":"Kostis Kapelonis","Est. reading time":"13 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/blog-picture-1.jpg","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/blog-picture-1.jpg","width":1024,"height":340},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/#webpage","url":"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/","name":"Enterprise CI\/CD Best Practices - Part 1 | Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/#primaryimage"},"datePublished":"2021-06-11T12:12:10+00:00","dateModified":"2021-06-11T13:07:26+00:00","breadcrumb":{"@id":"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Enterprise CI\/CD Best Practices &#8211; Part 1"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87"},"headline":"Enterprise CI\/CD Best Practices &#8211; Part 1","datePublished":"2021-06-11T12:12:10+00:00","dateModified":"2021-06-11T13:07:26+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/#webpage"},"wordCount":2650,"commentCount":0,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/06\/blog-picture-1.jpg","keywords":["continuous integration","devops","CI\/CD","continuous delivery","enterprise"],"articleSection":["Continuous Deployment\/Delivery","Devops","Continuous Integration"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/devops\/enterprise-ci-cd-best-practices-part-1\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87","name":"Kostis Kapelonis","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png","caption":"Kostis Kapelonis"},"description":"Kostis is a software engineer\/technical-writer dual class character. He lives and breathes automation, good testing practices and stress-free deployments with GitOps.","url":"https:\/\/codefresh.io\/author\/kostiscodefresh-io\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/19394"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/62"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=19394"}],"version-history":[{"count":0,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/19394\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/19405"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=19394"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=19394"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=19394"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}