{"id":20044,"date":"2021-09-02T11:28:45","date_gmt":"2021-09-02T11:28:45","guid":{"rendered":"https:\/\/codefresh.io\/?p=20044"},"modified":"2021-09-02T11:30:54","modified_gmt":"2021-09-02T11:30:54","slug":"pipelines-as-code","status":"publish","type":"post","link":"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/","title":{"rendered":"Pipelines as Code"},"content":{"rendered":"<p>One of the reasons we define items as code is it allows for the programmatic creation of resources. This could be for infrastructure, for the packages on your machines, or even for your pipelines. Like many of our clients, at Codefresh we are seeing the benefits of an \u201ceverything as code\u201d approach to automation.<br \/>\nOne of the great things about defining different layers in the stack as code is that these code definitions can start to build on each other. Not only can we create our infrastructure with Terraform, or do configuration management with Ansible, but we can codify the commands we run to do so in pipelines that, you guessed it, are also defined as code.<br \/>\nAn \u201cas code\u201d approach has many benefits for developers, operators, and security teams. At a high level, these are:<\/p>\n<ul>\n<li>Simplicity<\/li>\n<li>Repeatability<\/li>\n<li>Auditability<\/li>\n<li>Security<\/li>\n<\/ul>\n<p>This \u201cas code\u201d concept becomes really powerful because:<\/p>\n<ul>\n<li>We can create resources programmatically<\/li>\n<li>We can recreate environments as exact replicas of one another<\/li>\n<li>We can recover from disasters by reapplying the code<\/li>\n<li>We can onboard more easily because the knowledge to create resources is defined<\/li>\n<li>Our code documents the desired state of the system <\/li>\n<li>We can manage and store our \u201cas code\u201d definitions in the same way we manage code<\/li>\n<li>We can audit actions taken on resources by changes in their code<\/li>\n<\/ul>\n<h2>Terminology<\/h2>\n<p>Unlike other CI\/CD platforms which may be tightly coupled to a single Git provider, not provide a rich set of triggers, or not have a rich, modern API, Codefresh is different. With Codefresh, you can trigger a pipeline on a schedule, from a push to a docker registry or from a push to a helm registry or from actions that happened in Git.<br \/>\nSince Codefresh is decoupled from any single pipeline source, we provide a programmatic way to create pipelines and define the pipeline&#8217;s steps, triggers, and variables. It is important now to draw a distinction between <a href=\"https:\/\/codefresh.io\/docs\/docs\/integrations\/codefresh-api\/#full-pipeline-specification\">our pipeline specification<\/a> and our <a href=\"https:\/\/codefresh.io\/docs\/docs\/codefresh-yaml\/what-is-the-codefresh-yaml\/\">steps definition<\/a>.<\/p>\n<p>Our <strong>steps definition<\/strong>:<\/p>\n<ul>\n<li>Is YAML<\/li>\n<li>Defines the pipeline jobs to run<\/li>\n<li>Defines the sequence in which to run the jobs<\/li>\n<li>Defines our CI and our CD processes<\/li>\n<\/ul>\n<p>While our <strong>pipeline specification<\/strong>:<\/p>\n<ul>\n<li>Is YAML<\/li>\n<li>Defines our pipeline metadata in Codefresh (name, project, tags, etc.)<\/li>\n<li>Defines the events that trigger our pipeline (webhooks, cron events, etc.)<\/li>\n<li>Defines the steps definition to use for this pipeline (inline, from a repo, etc.)<\/li>\n<li>Can be applied from the command line<\/li>\n<\/ul>\n<p>What is really exciting is that, with the <strong>pipeline specification<\/strong>, we can define everything about our pipeline as code and apply it with the command line. Doing so means we can create all of our pipelines in a consistent way and store those definitions in a code repository. Taking this one step step deeper, we could then create a bootstrap pipeline in Codefresh that generates pipelines when new definitions are added to this repo. See our previous post <a href=\"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part1\/\">Programmatic Creation of Codefresh Pipelines<\/a> (<a href=\"https:\/\/codefresh.io\/devops-tutorial\/programmatic-creation-codefresh-pipelines-part2\/\">part 2<\/a>) for more on this.<\/p>\n<h2>Putting it all together<\/h2>\n<p>As we discussed, the \u201cas code\u201d approach provides us with a simple, repeatable way to create resources. With the <strong>pipeline specification<\/strong>, Codefresh allows for the ability to define entire pipelines as code. These pipelines can then be applied from the command line which will create them in Codefresh.<\/p>\n<p>Creating pipelines in this way and storing them in Git allows us to have shared documentation of our pipelines and the changes made to them. Doing so also allows us to have a Codefresh pipeline that creates or updates all our other pipelines when their code is updated. Doing so ensures that our configuration will not drift from the specification in Git.<\/p>\n<p>If we want to reduce the amount of pipeline management even further, we can use the pattern where we have a small number of pipelines for our different application types, each with many triggers. To onboard a new application, it is as simple as updating the trigger definition of our pipeline specification.<br \/>\nWith all of this together, we can create reusable pipelines with simple YAML definitions in Codefresh. Updates, maintenance, and onboarding can be handled as code changes to our pipelines specifications.<\/p>\n<h2>In Practice<\/h2>\n<p>We\u2019ve described a lot of powerful ideas using Codefresh\u2019s <strong>pipeline specification<\/strong>, but what does this all look like in practice? Lets walk through an example <strong>steps definition<\/strong> that creates pipelines defined in a Git repository and the <strong>pipeline specification<\/strong> for this pipeline. The YAMLs below can be found in <a href=\"https:\/\/github.com\/jcantosz\/cf-pipeline-factory\">this example repository<\/a>.<\/p>\n<p>Starting with a <a href=\"https:\/\/github.com\/jcantosz\/cf-pipeline-factory\/blob\/main\/codefresh.yml\">steps definition<\/a> (below), we have defined jobs that will create pipelines from the pipeline specifications in a Git repo. Looking at the 2 jobs, we can see we have one that clones our pipeline specs repository and another that will update the spec files listed. Using the <a href=\"https:\/\/codefresh.io\/docs\/docs\/codefresh-yaml\/advanced-workflows\/#implicit-parallel-steps\">scale <\/a>in <code>UpdatePipelines <\/code>causes multiple jobs to be spawned, one for each pipeline YAML defined. We could have a single job that loops through all of the pipeline specs. This is a good strategy when there are many pipeline specs and new definitions will be added often, but creating each pipeline as a separate job, as below, makes it visually clearer as to what pipelines are being created\/updated.<\/p>\n<pre>\n# More examples of Codefresh YAML can be found at\n# https:\/\/codefresh.io\/docs\/docs\/yaml-examples\/examples\/\nversion: \"1.0\"\n# Stages can help you organize your steps in stages\nstages:\n - \"clone\"\n - \"build\"\n \nsteps:\n Clone:\n   title: \"Cloning repository\"\n   type: \"git-clone\"\n   repo: \"jcantosz\/cf-pipeline-factory\"\n   revision: \"${{CF_BRANCH}}\"\n   git: \"github-jesse\"\n   stage: \"clone\"\n \n UpdatePipelines:\n   title: \"Create or Update pipelines\"\n   type: \"pipeline-trigger-merge\"\n   stage: \"build\"\n   working_directory: '${{Clone}}\/pipeline-specs'\n   scale:\n     pipeline-factory:\n       arguments:\n         SPEC: pipeline-factory.yaml\n     gradle-pipeline:\n       arguments:\n         SPEC: gradle-pipeline.yaml\n<\/pre>\n<p>Next we will look at our <a href=\"https:\/\/github.com\/jcantosz\/cf-pipeline-factory\/blob\/main\/pipeline-specs\/pipeline-factory.yaml\">pipeline factory specification<\/a> (below). We can see a couple of blocks in this specification:<\/p>\n<ul>\n<li>metadata,this will define the project and pipeline name in Codefresh as well as any tags or description we want to give to this pipeline. <\/li>\n<li>spec, this section will define everything about the pipeline:\n<ul>\n<li>triggers specify what can cause the pipeline to run, in this case a push to the pipeline-specs directory in our Git repo <code>jcantosz\/cf-pipeline-factory<\/code>.<\/li>\n<li>specTemplate is the pipeline to run on that trigger. This template tells Codefresh to pull the pipeline from the file codefresh.yml at the root of the Git repository <code>jcantosz\/cf-pipeline-factory<\/code>.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<pre>\nversion: '1.0'\nkind: pipeline\nmetadata:\n  name: Jesse-scratch\/pipeline-factory\n  project: Jesse-scratch\n  labels:\n    tags:\n      - generated\n  description: pipeline description here\n  isPublic: false\n  template:\n    isTemplate: false\nspec:\n  # What causes the pipeline to run\n  triggers:\n    - name: jcantosz\/cf-pipeline-factory\n      type: git\n      repo: jcantosz\/cf-pipeline-factory\n      events:\n        - push.heads\n      pullRequestAllowForkEvents: false\n      commentRegex: \/.*\/gi\n      # Only run on changes to the main branch\n      branchRegex: \/main\/gi\n      branchRegexInput: regex\n      provider: github\n      disabled: false\n      options:\n        noCache: false\n        noCfCache: false\n        resetVolume: false\n      verified: true\n      context: github-jesse\n      # Only run if files under the pipeline spec directory change\n      modifiedFilesGlob: 'pipeline-specs\/**'\n      contexts: []\n      variables: []\n  contexts: []\n  # The pipeline code to run\n  specTemplate:\n    location: git\n    repo: jcantosz\/cf-pipeline-factory\n    path: .\/codefresh.yml\n    revision: main\n    context: github-jesse\n  steps: {}\n  stages: []\n<\/pre>\n<h2>Getting Up and Running<\/h2>\n<p>The definitions in the last section give us a model by which we can define pipelines in a Git repository and create or update them based on changes to the YAML specification in that repository, thus allowing us to apply those \u201cas code\u201d benefits to our Codefresh pipelines. There is one final step to get up and running: bootstrapping.<\/p>\n<p>Before we can benefit from all of that automation, we must first create our pipeline factory in Codefresh. We need to do this so we have a pipeline that will apply our pipeline changes. Once this initial setup is complete, changes to our pipeline factory (or any of our other pipelines) will be handled as code changes.<\/p>\n<p>To run the initial bootstrap, and create our pipeline creator we can run the following with the <a href=\"https:\/\/codefresh-io.github.io\/cli\/installation\/\">Codefresh CLI<\/a>:<\/p>\n<pre>\ncodefresh create pipeline -f pipelines-specs\/pipeline-factory.yaml\n<\/pre>\n<p>On creation, you will have a pipeline-factory pipeline with a trigger that will be used for generating pipelines.<\/p>\n<figure id=\"attachment_20046\" aria-describedby=\"caption-attachment-20046\" style=\"width: 1999px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/09\/image1.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/09\/image1.png\" alt=\"Pipeline editor\" width=\"1999\" height=\"1019\" class=\"size-full wp-image-20046\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/09\/image1.png 1999w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/09\/image1-300x153.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/09\/image1-1024x522.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/09\/image1-768x391.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/09\/image1-1536x783.png 1536w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/09\/image1-20x10.png 20w\" sizes=\"(max-width: 1999px) 100vw, 1999px\" \/><\/a><figcaption id=\"caption-attachment-20046\" class=\"wp-caption-text\">Pipeline editor<\/figcaption><\/figure>\n<p>Any subsequent changes to this pipeline or the others defined will be triggered by a Git push to the main branch and run through a Codefresh pipeline. Because of this, we can keep our pipelines in sync with our code and handle all changes to them programmatically, reducing configuration and documentation drift.<\/p>\n<figure id=\"attachment_20047\" aria-describedby=\"caption-attachment-20047\" style=\"width: 1999px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/09\/image3.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/09\/image3.png\" alt=\"Generated pipelines\" width=\"1999\" height=\"594\" class=\"size-full wp-image-20047\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/09\/image3.png 1999w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/09\/image3-300x89.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/09\/image3-1024x304.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/09\/image3-768x228.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/09\/image3-1536x456.png 1536w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/09\/image3-20x6.png 20w\" sizes=\"(max-width: 1999px) 100vw, 1999px\" \/><\/a><figcaption id=\"caption-attachment-20047\" class=\"wp-caption-text\">Generated pipelines<\/figcaption><\/figure>\n<p>Hopefully this has given you a good idea of the power of the &#8220;as code&#8221; model when applied to pipelines in Codefresh itself. Using this model, we have not only our steps defined as code but our whole pipeline specification. Creating, managing, and updating pipelines is as simple as some YAML updates and a push to Git repository, meaning you can get all of the benefits of creating resources as code for your CI\/CD platform as well!<\/p>\n<p>New to Codefresh? <a href=\"https:\/\/codefresh.io\/codefresh-signup\/?utm_source=Blog&#038;utm_medium=Post&#038;utm_campaign=pipelineascode\">Create your free account today<\/a>!<\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"20044\"\/>","protected":false},"excerpt":{"rendered":"<p>One of the reasons we define items as code is it allows for the programmatic creation of resources. This could be for infrastructure, for the packages on your machines, or even for your pipelines. Like many of our clients, at Codefresh we are seeing the benefits of an \u201ceverything as code\u201d approach to automation. One &hellip; <a href=\"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/\">Read more<\/a><\/p>\n","protected":false},"author":120,"featured_media":20049,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[3120,1505,1543,1538,6],"tags":[14,15,24,52,53,961,5677,5719],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Pipelines as Code | Codefresh<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Pipelines as Code\" \/>\n<meta property=\"og:description\" content=\"One of the reasons we define items as code is it allows for the programmatic creation of resources. This could be for infrastructure, for the packages on your machines, or even for your pipelines. Like many of our clients, at Codefresh we are seeing the benefits of an \u201ceverything as code\u201d approach to automation. One &hellip; Read more\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2021-09-02T11:28:45+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-09-02T11:30:54+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/09\/image2.png\" \/>\n\t<meta property=\"og:image:width\" content=\"1999\" \/>\n\t<meta property=\"og:image:height\" content=\"664\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@codefresh\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Jesse Antoszyk\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"7 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/09\/image2.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/09\/image2.png\",\"width\":1999,\"height\":664},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/#webpage\",\"url\":\"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/\",\"name\":\"Pipelines as Code | Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/#primaryimage\"},\"datePublished\":\"2021-09-02T11:28:45+00:00\",\"dateModified\":\"2021-09-02T11:30:54+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Pipelines as Code\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/83cdbb0f4cca0a28807aa84c46eb50c0\"},\"headline\":\"Pipelines as Code\",\"datePublished\":\"2021-09-02T11:28:45+00:00\",\"dateModified\":\"2021-09-02T11:30:54+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/#webpage\"},\"wordCount\":1281,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/09\/image2.png\",\"keywords\":[\"docker\",\"continuous integration\",\"Containers\",\"devops\",\"CI\/CD\",\"pipeline\",\"pipeline tutorials\",\"pipeline as code\"],\"articleSection\":[\"Continuous Deployment\/Delivery\",\"Containers\",\"Continuous Integration\",\"DevOps Tutorials\",\"How Tos\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/83cdbb0f4cca0a28807aa84c46eb50c0\",\"name\":\"Jesse Antoszyk\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/690722c46e454e5c33500385375bcf0e?s=96&d=blank&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/690722c46e454e5c33500385375bcf0e?s=96&d=blank&r=g\",\"caption\":\"Jesse Antoszyk\"},\"description\":\"Jesse is a Solutions Architect at Codefresh. He enjoys leveraging automation and Kubernetes to solve problems. Prior to Codefresh, Jesse worked as a consultant, helping clients adopt DevSecOps practices and tools.\",\"sameAs\":[\"http:\/\/codefresh.io\"],\"url\":\"https:\/\/codefresh.io\/author\/jesse-antoszyk\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Pipelines as Code | Codefresh","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/","og_locale":"en_US","og_type":"article","og_title":"Pipelines as Code","og_description":"One of the reasons we define items as code is it allows for the programmatic creation of resources. This could be for infrastructure, for the packages on your machines, or even for your pipelines. Like many of our clients, at Codefresh we are seeing the benefits of an \u201ceverything as code\u201d approach to automation. One &hellip; Read more","og_url":"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2021-09-02T11:28:45+00:00","article_modified_time":"2021-09-02T11:30:54+00:00","og_image":[{"width":1999,"height":664,"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/09\/image2.png","type":"image\/png"}],"twitter_card":"summary_large_image","twitter_creator":"@codefresh","twitter_site":"@codefresh","twitter_misc":{"Written by":"Jesse Antoszyk","Est. reading time":"7 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/09\/image2.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/09\/image2.png","width":1999,"height":664},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/#webpage","url":"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/","name":"Pipelines as Code | Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/#primaryimage"},"datePublished":"2021-09-02T11:28:45+00:00","dateModified":"2021-09-02T11:30:54+00:00","breadcrumb":{"@id":"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Pipelines as Code"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/83cdbb0f4cca0a28807aa84c46eb50c0"},"headline":"Pipelines as Code","datePublished":"2021-09-02T11:28:45+00:00","dateModified":"2021-09-02T11:30:54+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/#webpage"},"wordCount":1281,"commentCount":0,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/09\/image2.png","keywords":["docker","continuous integration","Containers","devops","CI\/CD","pipeline","pipeline tutorials","pipeline as code"],"articleSection":["Continuous Deployment\/Delivery","Containers","Continuous Integration","DevOps Tutorials","How Tos"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/continuous-integration\/pipelines-as-code\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/83cdbb0f4cca0a28807aa84c46eb50c0","name":"Jesse Antoszyk","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/690722c46e454e5c33500385375bcf0e?s=96&d=blank&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/690722c46e454e5c33500385375bcf0e?s=96&d=blank&r=g","caption":"Jesse Antoszyk"},"description":"Jesse is a Solutions Architect at Codefresh. He enjoys leveraging automation and Kubernetes to solve problems. Prior to Codefresh, Jesse worked as a consultant, helping clients adopt DevSecOps practices and tools.","sameAs":["http:\/\/codefresh.io"],"url":"https:\/\/codefresh.io\/author\/jesse-antoszyk\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/20044"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/120"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=20044"}],"version-history":[{"count":0,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/20044\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/20049"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=20044"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=20044"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=20044"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}