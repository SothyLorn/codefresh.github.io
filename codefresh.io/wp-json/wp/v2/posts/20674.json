{"id":20674,"date":"2021-12-01T17:36:48","date_gmt":"2021-12-01T17:36:48","guid":{"rendered":"https:\/\/codefresh.io\/?p=20674"},"modified":"2022-01-04T22:48:31","modified_gmt":"2022-01-04T22:48:31","slug":"applied-gitops-with-kustomize","status":"publish","type":"post","link":"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/","title":{"rendered":"Applied GitOps with Kustomize"},"content":{"rendered":"<h3>What is Kustomize?<\/h3>\n<p>Have you always wanted to have different settings between production and staging but never knew how? You can do this with Kustomize!<\/p>\n<p><a href=\"https:\/\/kustomize.io\/\">Kustomize<\/a> is a CLI configuration manager for Kubernetes objects that leverage layering to preserve the base settings of the application. This is done by overlaying the declarative YAML artifacts to override default settings without actually making any changes to the original manifest.<\/p>\n<p>Kustomize settings are defined in a kustomization.yaml file. Kustomize is also integrated with kubectl. With Kustomize, you can configure raw, template-free YAML files, which allows you to modify settings between deployment and production easily. This enables troubleshooting misconfigurations and keeps use-case-specific customization overrides intact.<\/p>\n<p>Kustomize also allows you to scale easily by reusing a base file across all your environments (development, production, staging, etc.) and then overlay specifications for each.<\/p>\n<ul>\n<li>**Base Layer**: This layer specifies the most common resources and original configuration.<\/li>\n<li>**Overlays Layer**: This layer specifies use-case-specific resources by utilizing patches to override other kustomization files and Kubernetes manifests.<\/li>\n<\/ul>\n<p>Overlays are what help us accomplish our goal by producing variants without templating.<\/p>\n<h3>Benefits of Kustomize<\/h3>\n<p>Kustomize offers some of the following benefits:<\/p>\n<ol>\n<li><strong>Reusability<\/strong><br \/>\nWith Kustomize you can reuse one of the base files across all environments (development, staging, production, etc.) and overlay specifications for each of those environments.<\/p>\n<\/li>\n<li>\n<p><strong>Quick Generation<\/strong><br \/>\nSince Kustomize doesn&#8217;t utilize templates, a standard YAML file can be used to declare configurations.<\/p>\n<\/li>\n<li>\n<p><strong>Debug Easily<\/strong><br \/>\nUsing a YAML file allows easy debugging, along with patches that isolate configurations, allowing you to pinpoint the root cause of performance issues quickly. You can also compare performance to the base configuration and other variations that are running.<\/p>\n<\/li>\n<li>\n<p><strong>Kubernetes Native Configuration<\/strong><br \/>\nKustomize understands Kubernetes resources and their fields and is not just a simple text templating solution like other tools.<\/p>\n<\/li>\n<\/ol>\n<p>See below an example of a Kustomize file structure including the base and overlays within an application. You can also reference a code-based demo project on <a href=\"https:\/\/github.com\/hseligson1\/kustomize-gitops-example\">GitHub<\/a>.<\/p>\n<p><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/Screen-Shot-2021-12-01-at-10.32.44-AM.png\"><img class=\"alignnone size-medium wp-image-20681\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/Screen-Shot-2021-12-01-at-10.32.44-AM-300x175.png\" alt=\"\" width=\"300\" height=\"175\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/Screen-Shot-2021-12-01-at-10.32.44-AM-300x175.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/Screen-Shot-2021-12-01-at-10.32.44-AM-20x12.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/Screen-Shot-2021-12-01-at-10.32.44-AM.png 554w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><\/p>\n<p>The tree structure above is a simple example of how you can deploy a single application to 2 different environments (staging and production). Let&#8217;s dig deeper into each directory and create an overlay.<\/p>\n<p><strong>base folder<\/strong><\/p>\n<p>The <a href=\"https:\/\/kubectl.docs.kubernetes.io\/references\/kustomize\/glossary\/#base\">base<\/a> folder holds common resources, such as the deployment.yaml, service.yaml, and configuration files. It contains the initial manifest and includes a namespace and label for the resources.<\/p>\n<p><strong>overlays folder<\/strong><\/p>\n<p>The <a href=\"https:\/\/kubectl.docs.kubernetes.io\/references\/kustomize\/glossary\/#overlay\">overlays<\/a> folder houses environment-specific overlays, which use patches to allow YAML files to be defined and overlaid on top of the base for any changes. Let&#8217;s take a look at a couple of the environments within the overlays folder below that also includes the kustomization.yaml.<\/p>\n<p><strong>kustomization.yaml<\/strong><\/p>\n<p>Each directory contains <a href=\"https:\/\/kubectl.docs.kubernetes.io\/references\/kustomize\/glossary\/#kustomization-root\">a kustomization file<\/a>, which is essentially a list of resources or manifests that describes how to generate or transform Kubernetes objects. There are <a href=\"https:\/\/kubectl.docs.kubernetes.io\/references\/kustomize\/kustomization\/\">multiple fields<\/a> that can be added, and when this list is injected, the kustomization action can be referenced as an overlay that refers to the base.<\/p>\n<h3>Creating Overlays<\/h3>\n<p>Let&#8217;s explore a simple example of how overlays work.<br \/>\nWe&#8217;ll make the following changes within our production and staging directories:<\/p>\n<ul>\n<li>Within the staging overlay, we will enable a risky feature that is NOT enabled in production.<\/li>\n<li>Within the production overlay, we&#8217;ll assign a higher replica count.<\/li>\n<\/ul>\n<p>We&#8217;ll also ensure the web server from the cluster variants is different from one another.<\/p>\n<p><strong>overlays\/staging\/kustomization.yaml<\/strong><\/p>\n<p>In the staging directory, let&#8217;s make a kustomization defining a new name prefix and different labels.<\/p>\n<pre>namePrefix: staging-\ncommonLabels:\n variant: staging\ncommonAnnotations:\n  note: \u201cWelcome to staging!\u201d\nbases:\n- ..\/..\/base\npatchesStrategicMerge:\n- config-map.yaml\n<\/pre>\n<p><strong>Staging patch<\/strong><\/p>\n<p>Add a configMap kustomization to change the server greeting from &#8220;Hello!&#8221; to &#8220;Kustomize rules!&#8221; We&#8217;ll also enable the risky flag.<\/p>\n<pre>apiVersion: v1\nkind: ConfigMap\nmetadata:\n name: the-map\ndata:\n altGreeting: \u201cKustomize rules!\u201d\n enableRisky: \u201ctrue\u201d\n<\/pre>\n<p><strong>overlays\/production\/kustomization.yaml<\/strong><\/p>\n<p>Within the production directory, we will make a kustomization with a different name prefix and label.<\/p>\n<pre>namePrefix: production-\ncommonLabels:\n variant: production\ncommonAnnotations:\n  note: \u201cWelcome to production!\u201d\nbases:\n- ..\/..\/base\npatchesStrategicMerge:\n- deployment.yaml\n<\/pre>\n<p><strong>Production patch<\/strong><\/p>\n<p>We&#8217;ll make a production patch that will increase the replica count.<\/p>\n<pre>apiVersion: apps\/v1\nkind: Deployment\nmetadata:\n name: the-deployment\nspec:\n replicas: 10\n<\/pre>\n<p>Now, we can compare these overlays &#8211; the kustomizations and patches are required to create noticeable differences between staging and production variants within the Kubernetes cluster.<\/p>\n<p>Based on the changes above, the output would look something like this:<\/p>\n<pre>&lt;   altGreeting: Kustomize rules!\n&lt; enableRisky: \"true\" --- &gt;   altGreeting: Hello!\n>   enableRisky: \"false\"\n\n&lt; note: Welcome, I am staging! --- &gt;     note: Welcome, I am production!\n\n&lt; variant: staging --- &gt;     variant: production\n<\/pre>\n<p>You can now see the difference between the staging and production overlays.<br \/>\nOverlays contain a kustomization.yaml, and can also include manifests as new or additional resources, or to patch resources. The kustomization file is what defines how the overlays should be applied to the base and this is what we refer to as a <a href=\"https:\/\/kubectl.docs.kubernetes.io\/references\/kustomize\/glossary\/#variant\">variant<\/a>.<\/p>\n<p>Each time a change is made to an application, like the example above &#8211; it is the overlays that are doing the heavy lifting.<\/p>\n<p>So, now that you have learned a bit about Kustomize, you might be wondering how you can apply the GitOps workflow to it. Below we&#8217;ll explain more about GitOps and how you can apply it to your Kustomize project and deploy it.<\/p>\n<h2>GitOps works with all your existing tools<\/h2>\n<h3>What is GitOps?<\/h3>\n<p>Now, let&#8217;s learn more about how to apply GitOps to your Kustomize application deployment!<\/p>\n<p><a href=\"https:\/\/codefresh.io\/gitops\/\">GitOps<\/a> is a paradigm that incorporates best practices applied to both an application development workflow and the infrastructure of a system. This is done to empower organizations and developers to operate their systems from a single source of truth enabled by Git.<br \/>\nA couple of key aspects of GitOps that most aren&#8217;t as familiar with and are crucial are the:<\/p>\n<ol>\n<li><strong>GitOps controller<\/strong><\/li>\n<\/ol>\n<p>The controller reads the declarative configuration and uses the reconciliation loops to converge the desired end state. This controller detects the differences between states and makes the necessary changes to maintain the desired state.<\/p>\n<ol>\n<li><strong>Automation reconciliation loop<\/strong><\/li>\n<\/ol>\n<p>The concept of the reconciliation loop is used to keep the state as defined within a manifest. This is such an important principle for the GitOps paradigm because these loops are what drive the entire cluster to the desired state in Git.<\/p>\n<p>Now that you have a basic understanding of what both Kustomize and <a href=\"https:\/\/opengitops.dev\/\">GitOps<\/a> are and what some of their capabilities are, perhaps you&#8217;ve considered applying GitOps to your existing or future application and infrastructure workflow.<\/p>\n<p>We&#8217;ll explore 2 approaches on how to use Kustomize with or without GitOps:<\/p>\n<ul>\n<li>Using only Kustomize<\/li>\n<li>Using Kustomize with ArgoCD<\/li>\n<\/ul>\n<h3>What is ArgoCD?<\/h3>\n<p><a href=\"https:\/\/github.com\/argoproj\/argo-cd\">ArgoCD<\/a> is a GitOps controller specifically created for Kubernetes deployments. It supports a variety of configuration management tools like Helm (take a look at <a href=\"https:\/\/codefresh.io\/helm-tutorial\/using-helm-with-gitops\/\">our documentation<\/a> for more information), Ksonnet, Kustomize, <a href=\"https:\/\/argo-cd.readthedocs.io\/en\/stable\/user-guide\/application_sources\/\">etc<\/a>. The core component is the Application Controller, which continuously monitors any running applications and compares the live state against the desired state defined in a Git repository.<\/p>\n<p>If a deployed application whose live state drifts from the target state, ArgoCD is then considered OutOfSync. It then provides reports and visualizations to identify these changes and can provide automation when any modifications are made so that the target environments reflect the desired state of a system in Git.<\/p>\n<p>If you&#8217;d like to explore these different deployment approaches with Kustomize from a code-based perspective, here is an <a href=\"https:\/\/github.com\/hseligson1\/kustomize-gitops-example\">example project<\/a> that you can follow along with on GitHub. However, we will explore both of these approaches below with some more details.<\/p>\n<h2>Approach #1: Deploying only with Kustomize<\/h2>\n<p>If you want to use Kustomize, but your organization isn&#8217;t ready to implement GitOps with your workflow, you can still use Kustomize on its own.<\/p>\n<p><strong>Install Kustomize<\/strong><\/p>\n<p>First, install Kustomize and this can be done either by utilizing kubectl version 1.14 or later, otherwise you can install based on your operating system and reference the <a href=\"https:\/\/kubectl.docs.kubernetes.io\/installation\/kustomize\/\">Kustomize documentation<\/a>.<\/p>\n<p><strong>Create a base directory<\/strong><\/p>\n<p>Next, in order to deploy an application with Kustomize, you need a kustomization.yaml file, and this is added to the base directory.<\/p>\n<p><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/Screen-Shot-2021-12-01-at-11.17.06-AM.png\"><img class=\"alignnone size-medium wp-image-20682\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/Screen-Shot-2021-12-01-at-11.17.06-AM-300x213.png\" alt=\"\" width=\"300\" height=\"213\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/Screen-Shot-2021-12-01-at-11.17.06-AM-300x213.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/Screen-Shot-2021-12-01-at-11.17.06-AM-20x14.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/Screen-Shot-2021-12-01-at-11.17.06-AM.png 644w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><\/p>\n<p>The kustomization.yaml file specifies what resources to manage due to the complexity of multiple resource types and different environments when handling configuration files for Kubernetes.<\/p>\n<p>Within the base directory, there is also a service and deployment resource.<\/p>\n<p><strong>Create an Overlays directory<\/strong><\/p>\n<p>Next, you&#8217;ll want to create an overlays directory, and this directory is what allows you to kustomize the base and apply any changes with a <a href=\"https:\/\/kubectl.docs.kubernetes.io\/references\/kustomize\/kustomization\/patches\/\">patch<\/a> to modify a resource.<\/p>\n<p>The overlays still use the same resources as the base but may vary in the number of replicas in a deployment, the CPU for a specific pod, or the data source used in the ConfigMap, etc.<\/p>\n<p>Within our example, we have a staging and production overlay. These overlay directories contain the kustomizations and patches previously mentioned that are required to create distinct staging and production <a href=\"https:\/\/kubectl.docs.kubernetes.io\/references\/kustomize\/glossary\/#variant\">variants<\/a> in a cluster. However, with Kustomize you can use the overlays for anything needed to organize environments, whether it&#8217;s based on location: USA, Asia, Europe or internal\/external, team A\/team B, etc.<\/p>\n<p><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/Screen-Shot-2021-12-01-at-11.18.43-AM.png\"><img class=\"alignnone size-medium wp-image-20683\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/Screen-Shot-2021-12-01-at-11.18.43-AM-293x300.png\" alt=\"\" width=\"293\" height=\"300\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/Screen-Shot-2021-12-01-at-11.18.43-AM-293x300.png 293w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/Screen-Shot-2021-12-01-at-11.18.43-AM-20x20.png 20w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/Screen-Shot-2021-12-01-at-11.18.43-AM.png 616w\" sizes=\"(max-width: 293px) 100vw, 293px\" \/><\/a><\/p>\n<p>Kustomize is essentially an overlay-based engine that functions by finding and replacing specific sections in the manifest and replacing it with required fields and values. These values are then merged and deployed!<\/p>\n<p><strong>Create a namespace for specific environments<\/strong><\/p>\n<pre>kubectl create ns staging\n<\/pre>\n<p>or<\/p>\n<pre>kubectl create ns production\n<\/pre>\n<p><strong>Build and Deploy to environments<\/strong><\/p>\n<p>You can then apply the overlays to your cluster and deploy with the command:<\/p>\n<pre>kubectl apply -k overlays\/staging\n<\/pre>\n<p>or<\/p>\n<pre>kubectl apply -k overlays\/production\n<\/pre>\n<p>You are now successfully using Kustomize to manage your Kubernetes configurations and deploy your application to production and staging environments!<\/p>\n<h2>Approach #2: Deploying using Kustomize with GitOps<\/h2>\n<p>In the previous approach, you learned how to deploy an application using only Kustomize, so let&#8217;s see how it fits into ArgoCD and how it can be used in a GitOps workflow.<\/p>\n<p><a href=\"https:\/\/argo-cd.readthedocs.io\/en\/stable\/user-guide\/kustomize\/\">ArgoCD supports Kustomize<\/a> and has the ability to read a kustomization.yaml file to enable deployment with Kustomize and allow ArgoCD to manage the state of the YAML files.<\/p>\n<p>ArgoCD monitors the resources within the git repository for any changes, ensuring that the live state of your system matches the desired state. Each time customization is made, ArgoCD detects those modifications and updates the deployment.<\/p>\n<p>So, let&#8217;s begin walking through the process to deploy a Kustomize project using ArgoCD!<\/p>\n<p><strong>Install ArgoCD and access a Kubernetes Cluster<\/strong><\/p>\n<p>First, we need to ensure the Kubernetes cluster is set up and you are logged into ArgoCD so that these resources are provided and can be deployed. You can use any Kubernetes cluster and <a href=\"https:\/\/github.com\/argoproj\/argo-cd\/blob\/master\/docs\/cli_installation.md\">install<\/a> the argocd CLI.<\/p>\n<p>Once you&#8217;ve accessed the argocd CLI you can <a href=\"https:\/\/argo-cd.readthedocs.io\/en\/stable\/getting_started\/#4-login-using-the-cli\">access the ArgoCD server and log in<\/a> to the ArgoCD UI. However, if you&#8217;re more of a terminal fan, you can also deploy the application through the argocd CLI. Feel free to reference the <a href=\"https:\/\/github.com\/hseligson1\/kustomize-gitops-example\">demo application<\/a> that will walk you through the deployment process through your terminal.<\/p>\n<p><strong>Create an ArgoCD application<\/strong><\/p>\n<p>Now, we can set up the Kustomize Project. Similar to <a href=\"https:\/\/codefresh.io\/helm-tutorial\/using-helm-with-gitops\/\">using Helm with GitOps<\/a>, we will approach this deployment the same way within the UI by creating an ArgoCD application.<\/p>\n<p>Let&#8217;s begin! First, click on the +NEW APP and include the name of the ArgoCD application, select the default project, and enable the Automatic SYNC POLICY.<\/p>\n<p><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/Screen-Shot-2021-11-22-at-11.55.41-AM.png\"><img class=\"alignnone size-full wp-image-20686\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/Screen-Shot-2021-11-22-at-11.55.41-AM.png\" alt=\"\" width=\"1835\" height=\"505\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/Screen-Shot-2021-11-22-at-11.55.41-AM.png 1835w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/Screen-Shot-2021-11-22-at-11.55.41-AM-300x83.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/Screen-Shot-2021-11-22-at-11.55.41-AM-1024x282.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/Screen-Shot-2021-11-22-at-11.55.41-AM-768x211.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/Screen-Shot-2021-11-22-at-11.55.41-AM-1536x423.png 1536w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/Screen-Shot-2021-11-22-at-11.55.41-AM-20x6.png 20w\" sizes=\"(max-width: 1835px) 100vw, 1835px\" \/><\/a><\/p>\n<p>Next, when adding your Kustomize project it helps to include a specific Path to segregate the application manifests inside the Git repository. We can then ask ArgoCD to only read the specific directories in the repository and read manifests within that path.<\/p>\n<p><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/argocd-source-ui-staging.png\"><img class=\"alignnone size-full wp-image-20693\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/argocd-source-ui-staging.png\" alt=\"\" width=\"1474\" height=\"416\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/argocd-source-ui-staging.png 1474w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/argocd-source-ui-staging-300x85.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/argocd-source-ui-staging-1024x289.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/argocd-source-ui-staging-768x217.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/argocd-source-ui-staging-20x6.png 20w\" sizes=\"(max-width: 1474px) 100vw, 1474px\" \/><\/a><\/p>\n<p>Then, within the Destination section, you need to provide the destination of the Kubernetes cluster details. Also, make sure to click on the checkbox for auto-create namespace when adding the input field value, or you can add a custom namespace you&#8217;ve created prior.<\/p>\n<p><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/argocd-ns-ui.png\"><img class=\"alignnone size-full wp-image-20689\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/argocd-ns-ui.png\" alt=\"\" width=\"1453\" height=\"335\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/argocd-ns-ui.png 1453w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/argocd-ns-ui-300x69.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/argocd-ns-ui-1024x236.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/argocd-ns-ui-768x177.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/argocd-ns-ui-20x5.png 20w\" sizes=\"(max-width: 1453px) 100vw, 1453px\" \/><\/a><\/p>\n<p>ArgoCD will read the kustomization.yaml file in the path you provided and prompt you to allow override with different values.<\/p>\n<p><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/argocd-kustomize-ui-staging.png\"><img class=\"alignnone size-full wp-image-20688\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/argocd-kustomize-ui-staging.png\" alt=\"\" width=\"1508\" height=\"439\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/argocd-kustomize-ui-staging.png 1508w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/argocd-kustomize-ui-staging-300x87.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/argocd-kustomize-ui-staging-1024x298.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/argocd-kustomize-ui-staging-768x224.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/argocd-kustomize-ui-staging-20x6.png 20w\" sizes=\"(max-width: 1508px) 100vw, 1508px\" \/><\/a><\/p>\n<p><strong>Synchronize Application and Deploy<\/strong><\/p>\n<p>Assuming you enabled auto-synchronization when creating your ArgoCD application, it will read the parameters and the Kubernetes manifests. Then, once the manifests are applied, you can review the application health and resources you deployed.<\/p>\n<p>If your application has an error when trying to synchronize, you can execute the argocd history command, allowing you to view the application deployment history to identify a possible error:<\/p>\n<pre>argocd app history \n<\/pre>\n<p>If you need to rollback you can do so by executing this command:<\/p>\n<pre>argocd app rollback  \n<\/pre>\n<p>These commands leverage a faster and more secure deployment by enabling the tracking from the Git repository. This allows you to track the active Kubernetes resources and events. These actions can also be done within the UI.<\/p>\n<p>Once the application is healthy and synchronized, each time you create a new kustomization.yaml file and the file changes, ArgoCD will be able to detect those changes and make updates to your deployment. You can even mention specific <a href=\"https:\/\/argo-cd.readthedocs.io\/en\/stable\/user-guide\/kustomize\/\">Kustomize tags<\/a> and set up custom build options for your Kustomize build.<\/p>\n<h2>Summary<\/h2>\n<p>Kustomize allows you to use different configurations of a base Kubernetes manifest. Within this post, we&#8217;ve covered the Kustomize basics and how to deploy using just Kustomize and deploying with GitOps. This allows you to leverage the power of Kustomize to define the Kubernetes files without using a templating system.<\/p>\n<p>To start deploying your Kustomize application, sign up for a <a href=\"https:\/\/codefresh.io\/codefresh-signup\/\">Codefresh<\/a> account today to apply <a href=\"https:\/\/codefresh.io\/gitops\/\">GitOps<\/a> to your deployment process!<\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"20674\"\/>","protected":false},"excerpt":{"rendered":"<p>What is Kustomize? Have you always wanted to have different settings between production and staging but never knew how? You can do this with Kustomize! Kustomize is a CLI configuration manager for Kubernetes objects that leverage layering to preserve the base settings of the application. This is done by overlaying the declarative YAML artifacts to &hellip; <a href=\"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/\">Read more<\/a><\/p>\n","protected":false},"author":98,"featured_media":20680,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[3120,5703,1657,6],"tags":[24,44,53,68,5506,5725],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Applied GitOps with Kustomize | Codefresh<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Applied GitOps with Kustomize\" \/>\n<meta property=\"og:description\" content=\"Have you always wanted to have different settings between production and staging but never knew how? You can do this with Kustomize!\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2021-12-01T17:36:48+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-04T22:48:31+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/Applied_GitOps_Linkedin.png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:title\" content=\"Applied GitOps with Kustomize\" \/>\n<meta name=\"twitter:description\" content=\"Have you always wanted to have different settings between production and staging but never knew how? You can do this with Kustomize!\" \/>\n<meta name=\"twitter:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/image-14.png\" \/>\n<meta name=\"twitter:creator\" content=\"@TechWithHannah\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Hannah Seligson\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"11 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"\",\"contentUrl\":\"\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/#webpage\",\"url\":\"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/\",\"name\":\"Applied GitOps with Kustomize | Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/#primaryimage\"},\"datePublished\":\"2021-12-01T17:36:48+00:00\",\"dateModified\":\"2022-01-04T22:48:31+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Applied GitOps with Kustomize\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/7e2fa0dc52e8faf6ce01c27316dc5212\"},\"headline\":\"Applied GitOps with Kustomize\",\"datePublished\":\"2021-12-01T17:36:48+00:00\",\"dateModified\":\"2022-01-04T22:48:31+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/#webpage\"},\"wordCount\":2126,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/11\/Applied_GitOps_Header.png\",\"keywords\":[\"Containers\",\"Kubernetes\",\"CI\/CD\",\"continuous delivery\",\"Argo CD\",\"Kustomize\"],\"articleSection\":[\"Continuous Deployment\/Delivery\",\"GitOps\",\"Kubernetes Tutorials\",\"How Tos\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/7e2fa0dc52e8faf6ce01c27316dc5212\",\"name\":\"Hannah Seligson\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/Hannah_Slack_New-96x96.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/Hannah_Slack_New-96x96.png\",\"caption\":\"Hannah Seligson\"},\"description\":\"Hannah is a developer advocate who loves to create content that empowers devs with resources and tools. She's currently learning more about GitOps and Argo!\",\"sameAs\":[\"http:\/\/codefresh.io\",\"https:\/\/twitter.com\/@TechWithHannah\"],\"url\":\"https:\/\/codefresh.io\/author\/hannah\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Applied GitOps with Kustomize | Codefresh","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/","og_locale":"en_US","og_type":"article","og_title":"Applied GitOps with Kustomize","og_description":"Have you always wanted to have different settings between production and staging but never knew how? You can do this with Kustomize!","og_url":"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2021-12-01T17:36:48+00:00","article_modified_time":"2022-01-04T22:48:31+00:00","og_image":[{"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/Applied_GitOps_Linkedin.png"}],"twitter_card":"summary_large_image","twitter_title":"Applied GitOps with Kustomize","twitter_description":"Have you always wanted to have different settings between production and staging but never knew how? You can do this with Kustomize!","twitter_image":"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/12\/image-14.png","twitter_creator":"@TechWithHannah","twitter_site":"@codefresh","twitter_misc":{"Written by":"Hannah Seligson","Est. reading time":"11 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/#primaryimage","inLanguage":"en-US","url":"","contentUrl":""},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/#webpage","url":"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/","name":"Applied GitOps with Kustomize | Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/#primaryimage"},"datePublished":"2021-12-01T17:36:48+00:00","dateModified":"2022-01-04T22:48:31+00:00","breadcrumb":{"@id":"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Applied GitOps with Kustomize"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/7e2fa0dc52e8faf6ce01c27316dc5212"},"headline":"Applied GitOps with Kustomize","datePublished":"2021-12-01T17:36:48+00:00","dateModified":"2022-01-04T22:48:31+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/#webpage"},"wordCount":2126,"commentCount":0,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2021\/11\/Applied_GitOps_Header.png","keywords":["Containers","Kubernetes","CI\/CD","continuous delivery","Argo CD","Kustomize"],"articleSection":["Continuous Deployment\/Delivery","GitOps","Kubernetes Tutorials","How Tos"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/about-gitops\/applied-gitops-with-kustomize\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/7e2fa0dc52e8faf6ce01c27316dc5212","name":"Hannah Seligson","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/Hannah_Slack_New-96x96.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/Hannah_Slack_New-96x96.png","caption":"Hannah Seligson"},"description":"Hannah is a developer advocate who loves to create content that empowers devs with resources and tools. She's currently learning more about GitOps and Argo!","sameAs":["http:\/\/codefresh.io","https:\/\/twitter.com\/@TechWithHannah"],"url":"https:\/\/codefresh.io\/author\/hannah\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/20674"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/98"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=20674"}],"version-history":[{"count":16,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/20674\/revisions"}],"predecessor-version":[{"id":21478,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/20674\/revisions\/21478"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/20680"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=20674"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=20674"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=20674"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}