{"id":21827,"date":"2022-03-22T13:48:31","date_gmt":"2022-03-22T13:48:31","guid":{"rendered":"https:\/\/codefresh.io\/?p=21827"},"modified":"2022-03-29T11:47:55","modified_gmt":"2022-03-29T11:47:55","slug":"how-to-kustomize-your-codefresh-argo-runtime","status":"publish","type":"post","link":"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/","title":{"rendered":"How to Kustomize your Codefresh\/Argo Runtime"},"content":{"rendered":"<p>The Codefresh Software Delivery Platform (CSDP) brings together the complete open source Argo toolset (Workflows, Events, CD, and Rollouts) into a single platform for enhanced efficiency and visibility of software deployments at massive scale. If you\u2019re a new CSDP user, one of the first things you\u2019ll do is install the CSDP runtime in one of your Kubernetes clusters. In fact, we\u2019ve recently talked about <a href=\"https:\/\/codefresh.io\/argo-platform\/scaling-argo-cd-securely-in-2022\/\" target=\"_blank\" rel=\"noopener\">how to securely scale your Argo CD<\/a> instances with CSDP, so you may even be installing multiple runtimes.<\/p>\n<p>The <a href=\"https:\/\/codefresh.io\/csdp-docs\/docs\/getting-started\/architecture\/#csdp-runtime\" target=\"_blank\" rel=\"noopener\">runtime<\/a> is the CSDP component that houses the enterprise distribution of the Argo services. After <a href=\"https:\/\/codefresh.io\/csdp-docs\/docs\/getting-started\/quick-start\/runtime\/\" target=\"_blank\" rel=\"noopener\">installing a runtime<\/a>, a common day-2 activity is to tweak the configuration of one of its Argo services for your specific needs. In this article we\u2019ll dive into how to update their configuration. Hint: we do it GitOps-style!<\/p>\n<p>One of the biggest advantages of GitOps is having repeatable declarative configuration for all of your changes. We\u2019ll be covering 2 example changes in this article, which will illustrate how this works, as well as give you a process that you can repeat for all of your other CSDP runtime service configuration changes.<\/p>\n<p>Our example changes are:<\/p>\n<ol>\n<li>Set <strong>Argo CD<\/strong>\u2019s Git polling interval<\/li>\n<li>Configure long-term log storage for <strong>Argo Workflows<\/strong> (your Delivery Pipelines)<\/li>\n<\/ol>\n<h2>GitOps Organization<\/h2>\n<p>During runtime installation, CSDP creates a Git repository with all of your runtime\u2019s Kubernetes manifests. This approach is a GitOps-style deployment of the Argo services, and provides the full host of <a href=\"https:\/\/codefresh.io\/gitops\/\" target=\"_blank\" rel=\"noopener\">GitOps benefits<\/a>. The runtime installation starts by applying the manifests for Argo CD. After Argo CD is up and running, then Argo CD syncs (installs) the rest of the manifests in the repository. Going forward, any version upgrades or configuration changes to your runtime are made to this Git repository first. Argo CD then syncs those changes for you &#8211; including changes to Argo CD itself!<\/p>\n<p>Before we start configuring your Argo services, let\u2019s take a quick look at how this repository is organized. At the root of your repository, you should have 3 directories: apps, bootstrap, and projects. For configuration, we\u2019ll be focused on the apps and bootstrap directories. Let\u2019s go a level deeper, and identify the key subdirectories for configuration &#8211; each one corresponds to one of the 4 Argo services.<\/p>\n<ul>\n<li>bootstrap\/\n<ul>\n<li>argo-cd\/<\/li>\n<\/ul>\n<\/li>\n<li>apps\/\n<ul>\n<li>events\/<\/li>\n<li>rollouts\/<\/li>\n<li>workflows\/<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>Each of these subdirectories contains <a href=\"https:\/\/github.com\/kubernetes-sigs\/kustomize\" target=\"_blank\" rel=\"noopener\">Kustomize<\/a> manifests for the deployment and configuration of its respective service in Kubernetes. If you\u2019re not already familiar with how Kustomize works, don\u2019t worry &#8211; I\u2019ll provide some brief explanation as we go through each example.<\/p>\n<h2>Example 1: Set Argo CD\u2019s Git polling interval<\/h2>\n<p>Usually when I tell new Codefresh users that Argo CD automatically polls their Git repos for changes, their next question is: how often does it do that? Well, the default open source Argo CD polls every 180 seconds, and the Codefresh runtime increases the default to every 20 seconds. If you find yourself waiting in anticipation for your deployments to start, then this increase can shave off a few moments.<\/p>\n<p>That said, if you have a runtime with several hundred Argo CD applications and your Git provider limits API requests, then you might not want it polling for changes quite so frequently. This gives you the option of fine tuning a frequency that makes sense for your organization&#8217;s needs.<\/p>\n<p>All of the Argo services are configured in Kubernetes via ConfigMaps and Secrets. You can find a list of all of Argo CD\u2019s ConfigMaps and Secrets in <a href=\"https:\/\/argo-cd.readthedocs.io\/en\/stable\/operator-manual\/declarative-setup\/#atomic-configuration\" target=\"_blank\" rel=\"noopener\">the documentation<\/a>. For our Git polling setting, we\u2019re going to update the <code>timeout.reconciliation<\/code> key within the <strong>argocd-cm<\/strong> ConfigMap, as documented here: <a href=\"https:\/\/github.com\/argoproj\/argo-cd\/blob\/master\/docs\/operator-manual\/argocd-cm.yaml\" target=\"_blank\" rel=\"noopener\">https:\/\/github.com\/argoproj\/argo-cd\/blob\/master\/docs\/operator-manual\/argocd-cm.yaml<\/a><\/p>\n<p>First, let\u2019s check the live value of this key within our runtime. In the command below, replace MY_RUNTIME_NAMESPACE with the name of your runtime. Also, note the backslash before the period in <code>timeout\\.reconciliation<\/code>.<\/p>\n<pre>kubectl -n MY_RUNTIME_NAMESPACE get configmap\/argocd-cm \\\r\n-o jsonpath='{.data.timeout\\.reconciliation}'<\/pre>\n<p>My <code>timeout.reconciliation<\/code> was set to 20s. Let\u2019s say we want to change this value to 60s.<\/p>\n<p>Now that we know the exact value to change within the argocd-cm ConfigMap, let\u2019s figure out how to put this change in our runtime\u2019s Git repo. Since we\u2019re going to be configuring Argo CD in this example, our work will be in this directory path: <strong>bootstrap\/argo-cd\/<\/strong><\/p>\n<p>Right now, you should see 1 file in that directory:<\/p>\n<p>bootstrap\/argo-cd\/kustomization.yaml<\/p>\n<pre>apiVersion: kustomize.config.k8s.io\/v1beta1\r\nconfigMapGenerator:\r\n- behavior: merge\r\n  literals:\r\n  - |\r\n    repository.credentials=- passwordSecret:\r\n        key: git_token\r\n        name: autopilot-secret\r\n      url: https:\/\/github.com\/\r\n      usernameSecret:\r\n        key: git_username\r\n        name: autopilot-secret\r\n  name: argocd-cm\r\nkind: Kustomization\r\nnamespace: MY_RUNTIME_NAMESPACE\r\nresources:\r\n- github.com\/codefresh-io\/cli-v2\/manifests\/argo-cd?ref=v0.0.244\r\n<\/pre>\n<p>In case you\u2019re not familiar with Kustomize, I\u2019ll explain what\u2019s going on. In the <code>resources<\/code> section, we\u2019re grabbing a manifest which contains Codefresh\u2019s full enterprise deployment of Argo CD for the version of the CSDP runtime that I have installed (0.0.244 at the time of this writing). Before applying this manifest to Kubernetes, Kustomize is going to apply any patches that are specified in this kustomization.yaml file.<\/p>\n<p>There are multiple ways to define patches in Kustomize, but in this case, we have a <code>configMapGenerator<\/code> section, with <code>behavior: merge<\/code> (merge = patch). On line 13, you can see that the patch is being applied to the ConfigMap we need, <code>name: argocd-cm<\/code>. Currently, it is patching the repository.credentials key. We just need to add an additional key for our timeout.reconciliation setting.<\/p>\n<p>I inserted this key at line 13.<\/p>\n<pre>apiVersion: kustomize.config.k8s.io\/v1beta1\r\nconfigMapGenerator:\r\n- behavior: merge\r\n  literals:\r\n  - |\r\n    repository.credentials=- passwordSecret:\r\n        key: git_token\r\n        name: autopilot-secret\r\n      url: https:\/\/github.com\/\r\n      usernameSecret:\r\n        key: git_username\r\n        name: autopilot-secret\r\n  - timeout.reconciliation='60s'\r\n  name: argocd-cm\r\nkind: Kustomization\r\nnamespace: MY_RUNTIME_NAMESPACE\r\nresources:\r\n- github.com\/codefresh-io\/cli-v2\/manifests\/argo-cd?ref=v0.0.244\r\n<\/pre>\n<p>Now we could commit and push this change to our runtime\u2019s Git repo. However, in order for the Argo CD to see the change, we would <em>also<\/em> need to cycle the argocd-repo-server Deployment, like this:<\/p>\n<pre>kubectl -n MY_RUNTIME_NAMESPACE rollout restart deploy\/argocd-repo-server<\/pre>\n<p>But let\u2019s <em>not<\/em> do that. Manually cycling a Deployment like this goes against one of the core rules of GitOps, which says that GitOps is the single source of truth that drives all changes. Instead of making a manual change, what we really need is to add a mechanism to our Deployment that will let it know when the ConfigMap has changed. One common Kubernetes technique for this is to add an annotation to the Deployment that records a hash of its dependent ConfigMap YAML. Since a hash is deterministic, it will only change when the YAML of the ConfigMap changes. When the Deployment\u2019s annotation changes to reflect a change in the ConfigMap YAML, it will automatically re-deploy its pods to give them the new annotation.<\/p>\n<p>To that end, we\u2019ll be adding an annotation to the Deployment that contains a sha256 hash of our argocd-cm ConfigMap. We can use the commands below to get the sha256 hash. Be sure to install <a href=\"https:\/\/github.com\/mikefarah\/yq\" target=\"_blank\" rel=\"noopener\">yq v4.X<\/a> on your workstation if you haven\u2019t already, and note the slightly different hash command for Linux vs Mac.<\/p>\n<pre># From a clone of the runtime's Git repo, change to the Argo CD deployment\r\ncd bootstrap\/argo-cd\r\n\r\n# Get a sha256 hash of the argocd-cm ConfigMap\r\n# Use 'sha256sum' on Linux, or 'shasum -a 256' on Mac\r\nkubectl kustomize | yq e '. | select(.kind == \"ConfigMap\") | select(.metadata.name == \"argocd-cm\")' - | shasum -a 256 | awk '{print $1}'<\/pre>\n<p>Since this is a long command, I\u2019ll explain what it\u2019s doing. It starts with <code>kubectl kustomize<\/code> to render <em>all<\/em> of the Argo CD manifests that are defined in Kustomize. Next, <code>yq<\/code> isolates just the YAML for the argocd-cm ConfigMap. Then <code>shasum<\/code> or <code>sha256sum<\/code> gets the sha256 hash of that YAML. Finally, <code>awk<\/code> strips away any extra characters after the sha256 hash.<\/p>\n<p>My argocd-cm ConfigMap had a sha256 hash of 350826b2b65bba9e7ccfa5f7fa2a747f9e9876d866e681a46c10c00470e95aad. To add the corresponding annotation to our argocd-server Deployment, we\u2019ll add another patch to our kustomization.yaml file. This time, we\u2019ll define our patch within the kustomization.yaml by adding a <a href=\"https:\/\/kubectl.docs.kubernetes.io\/references\/kustomize\/kustomization\/patches\/\" target=\"_blank\" rel=\"noopener\">patches<\/a> section.<\/p>\n<p>bootstrap\/argo-cd\/kustomization.yaml<\/p>\n<pre>apiVersion: kustomize.config.k8s.io\/v1beta1\r\nconfigMapGenerator:\r\n- behavior: merge\r\n  literals:\r\n  - |\r\n    repository.credentials=- passwordSecret:\r\n        key: git_token\r\n        name: autopilot-secret\r\n      url: https:\/\/github.com\/\r\n      usernameSecret:\r\n        key: git_username\r\n        name: autopilot-secret\r\n  - timeout.reconciliation='60s'\r\n  name: argocd-cm\r\nkind: Kustomization\r\nnamespace: MY_RUNTIME_NAMESPACE\r\nresources:\r\n- github.com\/codefresh-io\/cli-v2\/manifests\/argo-cd?ref=v0.0.244\r\npatches:\r\n  - patch: |-\r\n      apiVersion: apps\/v1\r\n      kind: Deployment\r\n      metadata:\r\n        name: argocd-repo-server\r\n      spec:\r\n        template:\r\n          metadata:\r\n            annotations:\r\n              argocd-cm-hash: \"350826b2b65bba9e7ccfa5f7fa2a747f9e9876d866e681a46c10c00470e95aad\"\r\n<\/pre>\n<p>We\u2019re finally ready to commit and push this change to your runtime\u2019s Git repo. Argo CD will sync the change, and after a few seconds you can verify that the new setting is live in your cluster.<\/p>\n<p>First, let\u2019s verify that the ConfigMap has been updated with the new 60s setting. After that, let\u2019s verify that the addition of our annotation has caused the argocd-repo-server Deployment to cycle.<\/p>\n<pre>$ kubectl -n MY_RUNTIME_NAMESPACE get configmap\/argocd-cm \\\r\n-o jsonpath='{.data.timeout\\.reconciliation}'\r\n60s\r\n\r\n$ kubectl -n MY_RUNTIME_NAMESPACE get pod | grep argocd-repo-server\r\nargocd-repo-server-6d6c9bb8bc-2ljr7 0\/1 Terminating 0 12d\r\nargocd-repo-server-7b8948bc76-hq542 1\/1 Running 0 18s<\/pre>\n<p>Looking good!<\/p>\n<h2>Example 2: Configure logging for Argo Workflows<\/h2>\n<p>The default runtime configuration for Argo Workflows (\u201cDelivery Pipelines\u201d in the Codefresh UI) is to keep your workflow logs for 24 hours. After a workflow is 24 hours old, Argo Workflows will clean up its completed pods, which include the workflow\u2019s logs. The common best practice is to keep workflow logs after their pods are cleaned up by configuring an artifact repository for long-term storage.<\/p>\n<p>Artifact repositories are defined via a ConfigMap. When defining this artifact repository, there are lots of options for its backend storage, such as S3, GCS, Minio, Artifactory, etc. You can check out this summary in <a href=\"https:\/\/argoproj.github.io\/argo-workflows\/configure-artifact-repository\/\" target=\"_blank\" rel=\"noopener\">the documentation<\/a>, and perhaps we\u2019ll do a deeper-dive blog article on this topic in the future. For this article, however, I chose to use an S3 bucket for my artifact repository.<\/p>\n<p>I started by following the <a href=\"https:\/\/argoproj.github.io\/argo-workflows\/configure-artifact-repository\/#configuring-aws-s3\" target=\"_blank\" rel=\"noopener\">documented steps<\/a> for creating my S3 bucket, and associated IAM policy, IAM role, and access key. Your access key should look something like this:<\/p>\n<p>access-key.json<\/p>\n<pre>{\r\n    \"AccessKey\": {\r\n        \"UserName\": \"Bob\",\r\n        \"Status\": \"Active\",\r\n        \"CreateDate\": \"2022-02-09T18:39:23.411Z\",\r\n        \"SecretAccessKey\": \"wJalrXUtnFEMI\/K7MDENG\/bPxRfiCYzEXAMPLEKEY\",\r\n        \"AccessKeyId\": \"AKIAIOSFODNN7EXAMPLE\"\r\n    }\r\n}\r\n<\/pre>\n<p>Next, we\u2019ll need to create a secret in our runtime with the SecretAccessKey and AccessKeyId fields. For testing purposes in your lab, you can manually create this secret in your cluster, and then later on you can create a secure Kubernetes manifest to put in the runtime\u2019s Git repository (more on that in a moment).<\/p>\n<p>Here is the manual creation command. Again, replace MY_RUNTIME_NAMESPACE with the name of your runtime.<\/p>\n<pre>kubectl -n MY_RUNTIME_NAMESPACE create secret generic s3-cred \\\r\n--from-literal=SecretAccessKey=\"wJalrXUtnFEMI\/K7MDENG\/bPxRfiCYzEXAMPLEKEY\" \\\r\n--from-literal=AccessKeyId=\"AKIAIOSFODNN7EXAMPLE\"<\/pre>\n<p>For testing purposes in your personal lab, it\u2019s not critical to add this secret to your runtime\u2019s git repo immediately. But since the principles of GitOps dictate that Git should be our source of truth, before you put this into a real environment you\u2019ll want to place this secret into a <em>secure<\/em> manifest file using a tool like <a href=\"https:\/\/github.com\/bitnami-labs\/sealed-secrets\" target=\"_blank\" rel=\"noopener\">Bitnami Sealed Secrets<\/a> or the <a href=\"https:\/\/github.com\/external-secrets\/external-secrets\" target=\"_blank\" rel=\"noopener\">External Secrets Operator<\/a>.<\/p>\n<p>Now we can create our ConfigMap, which will tell Argo Workflows to send its workflow logs to our S3 bucket using the credentials from the secret. To construct my ConfigMap, I used this example of the <a href=\"https:\/\/argoproj.github.io\/argo-workflows\/artifact-repository-ref\/\" target=\"_blank\" rel=\"noopener\">artifact-repositories ConfigMap<\/a>, as well as this <a href=\"https:\/\/github.com\/argoproj\/argo-workflows\/blob\/master\/docs\/workflow-controller-configmap.yaml\" target=\"_blank\" rel=\"noopener\">documentation of the S3 fields<\/a> (skip down to the \u201cartifactRepository\u201d section). And yes, for fans of using IAM roles instead of an Access Key, this documentation includes the S3 fields needed for that, too.<\/p>\n<p>configmap-artifact-repositories.yaml<\/p>\n<pre>apiVersion: v1\r\nkind: ConfigMap\r\nmetadata:\r\n  name: artifact-repositories\r\n  annotations:\r\n    workflows.argoproj.io\/default-artifact-repository: default-v1\r\ndata:\r\n  default-v1: |\r\n    archiveLogs: true\r\n    s3:\r\n      endpoint: s3.amazonaws.com\r\n      bucket: my-bucket\r\n      region: us-east-2\r\n      accessKeySecret:\r\n        name: s3-cred\r\n        key: AccessKeyId\r\n      secretKeySecret:\r\n        name: s3-cred\r\n        key: SecretAccessKey\r\n<\/pre>\n<p>While I happen to know that this ConfigMap isn\u2019t included in the default configuration of the runtime\u2019s Git repository, it\u2019s always a good idea to double check &#8211; if we find that it already exists, then we may just want to patch it with the needed fields, as opposed to defining the whole ConfigMap in its entirety.<\/p>\n<pre>$ kubectl -n MY_RUNTIME_NAMESPACE get configmap\/artifact-repositories\r\nError from server (NotFound): configmaps \"artifact-repositories\" not found<\/pre>\n<p>OK, good &#8211; we can proceed with adding the whole configmap-artifact-repositories.yaml file to our Kustomize for Argo Workflows. But where exactly in our runtime Git repository should we place this file? Since this is for Argo Workflows, let\u2019s start by looking in apps\/workflows. You should see these subdirectories (MY_RUNTIME will be the actual name of your CSDP runtime).<\/p>\n<ul>\n<li>apps\/workflows\/\n<ul>\n<li>base\/<\/li>\n<li>overlays\/\n<ul>\n<li>MY_RUNTIME\/<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>I\u2019ll provide a bit more background on how Kustomize streamlines these configurations. Kustomize has the concept of a base layer and overlay layers. The idea is that you define a base layer for a complete, working deployment, and then create overlay layers which patch and add to the base layer to create variations.<\/p>\n<p>In our case, we will be adding our configmap-artifact-repositories.yaml to the overlay layer that is specific to our runtime: apps\/workflows\/overlays\/MY_RUNTIME. When you create a secure manifest for your s3-cred secret, you can place it in this directory too.<\/p>\n<p>Just like in example #1, we\u2019re going to need to cycle a Deployment in order for its pods to see the ConfigMap. In this case we need to cycle the workflow-controller Deployment, so let\u2019s grab the hashmap of the configmap-artifact-repositories.yaml file we just created.<\/p>\n<pre>shasum -a 256 configmap-artifact-repositories.yaml | awk '{print $1}'<\/pre>\n<p>My hash was 04253bf475ade629b6dc2baae36c3fe68ce9c8871aea826b954b0f4a4a04ef8f.<\/p>\n<p>Finally, we need to tell Kustomize about the manifests for our ConfigMap and (optional) secured secret. I added this to the last 2 lines, below. I also added an additional patch to add the annotation to the workflow-controller Deployment.<\/p>\n<p>apps\/workflows\/overlays\/MY_RUNTIME\/kustomization.yaml<\/p>\n<pre>apiVersion: kustomize.config.k8s.io\/v1beta1\r\nkind: Kustomization\r\nnamespace: MY_RUNTIME_NAMESPACE\r\npatches:\r\n- path: ingress-patch.json\r\n  target:\r\n    group: apps\r\n    kind: Deployment\r\n    name: argo-server\r\n    version: v1\r\n- patch: |-\r\n    apiVersion: apps\/v1\r\n    kind: Deployment\r\n    metadata:\r\n      name: workflow-controller\r\n    spec:\r\n      template:\r\n        metadata:\r\n          annotations:\r\n            artifact-repositories-hash: \"04253bf475ade629b6dc2baae36c3fe68ce9c8871aea826b954b0f4a4a04ef8f\"\r\nresources:\r\n- ..\/..\/base\r\n- ingress.yaml\r\n# Next 2 lines are for logging Workflows to S3\r\n- configmap-artifact-repositories.yaml\r\n- sealedsecret-s3-creds.yaml  # Omit this if you haven't created it yet\r\n<\/pre>\n<p>The <code>resources<\/code> field in kustomization.yaml is where we\u2019re adding our files this time because they are complete manifest files, as opposed to patches. If you do a git status, you should see that the following files have been modified\/created:<\/p>\n<ul>\n<li>apps\/workflows\/overlays\/MY_RUNTIME\/kustomization.yaml<\/li>\n<li>apps\/workflows\/overlays\/MY_RUNTIME\/configmap-artifact-repositories.yaml<\/li>\n<li>apps\/workflows\/overlays\/MY_RUNTIME\/sealedsecret-s3-creds.yaml (optional)<\/li>\n<\/ul>\n<p>Commit this change and push it to your runtime\u2019s Git repository. Give it a few seconds to sync, and then you can verify the changes:<\/p>\n<pre>$ kubectl -n MY_RUNTIME_NAMESPACE get configmap\/artifact-repositories\r\nNAME DATA AGE\r\nartifact-repositories 1 11s\r\n\r\n$ kubectl -n MY_RUNTIME_NAMESPACE get pod | grep workflow-controller\r\nworkflow-controller-676f77b769-p2h8f 1\/1 Running 0 1m8s<\/pre>\n<p>The next time a Delivery Pipeline runs in Codefresh, you should see that a new log directory named after its workflow has been created in your S3 bucket. Woohoo!<\/p>\n<h2>Summary<\/h2>\n<p>Congratulations on making your first configurations to Argo CD and Argo Workflows &#8211; GitOps style!<\/p>\n<p>In this article, we saw how one can read about configurations in the Argo documentation and apply them via the CSDP runtime. First, we examined the directory structure of the runtime\u2019s Git repository so we know the correct place to make changes. Then we made Kustomize changes that included patching an existing ConfigMap, as well as creating a new ConfigMap and Secret. With this technique, you\u2019re now well-equipped to configure the Argo services in your CSDP runtime!<\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"21827\"\/>","protected":false},"excerpt":{"rendered":"<p>The Codefresh Software Delivery Platform (CSDP) brings together the complete open source Argo toolset (Workflows, Events, CD, and Rollouts) into a single platform for enhanced efficiency and visibility of software deployments at massive scale. If you\u2019re a new CSDP user, one of the first things you\u2019ll do is install the CSDP runtime in one of &hellip; <a href=\"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/\">Read more<\/a><\/p>\n","protected":false},"author":93,"featured_media":21820,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[5703,5722,1657],"tags":[44,59,4322,5725,5737],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>How to Kustomize your Codefresh\/Argo Runtime | Codefresh<\/title>\n<meta name=\"description\" content=\"Learn how to configure the Argo services in your CSDP runtime with 2 examples.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"How to Kustomize your Codefresh\/Argo Runtime\" \/>\n<meta property=\"og:description\" content=\"Learn how to configure the Argo services in your CSDP runtime with 2 examples.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2022-03-22T13:48:31+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-03-29T11:47:55+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/Kustomize_Social-edit.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1200\" \/>\n\t<meta property=\"og:image:height\" content=\"627\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@codefresh\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Ted Spinks\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"11 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/Kustomize_Social-edit.jpg\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/Kustomize_Social-edit.jpg\",\"width\":1200,\"height\":627},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/#webpage\",\"url\":\"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/\",\"name\":\"How to Kustomize your Codefresh\/Argo Runtime | Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/#primaryimage\"},\"datePublished\":\"2022-03-22T13:48:31+00:00\",\"dateModified\":\"2022-03-29T11:47:55+00:00\",\"description\":\"Learn how to configure the Argo services in your CSDP runtime with 2 examples.\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"How to Kustomize your Codefresh\/Argo Runtime\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/ae174f0651c1ef30c23e7209de3a9968\"},\"headline\":\"How to Kustomize your Codefresh\/Argo Runtime\",\"datePublished\":\"2022-03-22T13:48:31+00:00\",\"dateModified\":\"2022-03-29T11:47:55+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/#webpage\"},\"wordCount\":2229,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/Kustomize_Blog_Header.png\",\"keywords\":[\"Kubernetes\",\"codefresh\",\"GitOps\",\"Kustomize\",\"Codefresh Software Delivery Platform\"],\"articleSection\":[\"GitOps\",\"Argo Platform\",\"Kubernetes Tutorials\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/ae174f0651c1ef30c23e7209de3a9968\",\"name\":\"Ted Spinks\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/702f043f00b77f71ae58a18b11daaef3?s=96&d=blank&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/702f043f00b77f71ae58a18b11daaef3?s=96&d=blank&r=g\",\"caption\":\"Ted Spinks\"},\"description\":\"Ted Spinks is a Senior Solutions Architect at Codefresh. He is huge fan of DevOps automation. He loves writing code, diving into new APIs, and solving automation challenges. Before Codefresh, Ted worked as a CI\/CD engineer for an autonomous driving software company, Zenuity, and as a consultant at AHEAD and VMware.\",\"url\":\"https:\/\/codefresh.io\/author\/ted-spinks\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"How to Kustomize your Codefresh\/Argo Runtime | Codefresh","description":"Learn how to configure the Argo services in your CSDP runtime with 2 examples.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/","og_locale":"en_US","og_type":"article","og_title":"How to Kustomize your Codefresh\/Argo Runtime","og_description":"Learn how to configure the Argo services in your CSDP runtime with 2 examples.","og_url":"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2022-03-22T13:48:31+00:00","article_modified_time":"2022-03-29T11:47:55+00:00","og_image":[{"width":1200,"height":627,"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/Kustomize_Social-edit.jpg","type":"image\/jpeg"}],"twitter_card":"summary_large_image","twitter_creator":"@codefresh","twitter_site":"@codefresh","twitter_misc":{"Written by":"Ted Spinks","Est. reading time":"11 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/Kustomize_Social-edit.jpg","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/Kustomize_Social-edit.jpg","width":1200,"height":627},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/#webpage","url":"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/","name":"How to Kustomize your Codefresh\/Argo Runtime | Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/#primaryimage"},"datePublished":"2022-03-22T13:48:31+00:00","dateModified":"2022-03-29T11:47:55+00:00","description":"Learn how to configure the Argo services in your CSDP runtime with 2 examples.","breadcrumb":{"@id":"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"How to Kustomize your Codefresh\/Argo Runtime"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/ae174f0651c1ef30c23e7209de3a9968"},"headline":"How to Kustomize your Codefresh\/Argo Runtime","datePublished":"2022-03-22T13:48:31+00:00","dateModified":"2022-03-29T11:47:55+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/#webpage"},"wordCount":2229,"commentCount":0,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/Kustomize_Blog_Header.png","keywords":["Kubernetes","codefresh","GitOps","Kustomize","Codefresh Software Delivery Platform"],"articleSection":["GitOps","Argo Platform","Kubernetes Tutorials"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/argo-platform\/how-to-kustomize-your-codefresh-argo-runtime\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/ae174f0651c1ef30c23e7209de3a9968","name":"Ted Spinks","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/702f043f00b77f71ae58a18b11daaef3?s=96&d=blank&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/702f043f00b77f71ae58a18b11daaef3?s=96&d=blank&r=g","caption":"Ted Spinks"},"description":"Ted Spinks is a Senior Solutions Architect at Codefresh. He is huge fan of DevOps automation. He loves writing code, diving into new APIs, and solving automation challenges. Before Codefresh, Ted worked as a CI\/CD engineer for an autonomous driving software company, Zenuity, and as a consultant at AHEAD and VMware.","url":"https:\/\/codefresh.io\/author\/ted-spinks\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/21827"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/93"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=21827"}],"version-history":[{"count":23,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/21827\/revisions"}],"predecessor-version":[{"id":21996,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/21827\/revisions\/21996"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/21820"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=21827"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=21827"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=21827"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}