{"id":2737,"date":"2017-04-24T09:18:55","date_gmt":"2017-04-24T09:18:55","guid":{"rendered":"https:\/\/codefresh.io\/?p=2737"},"modified":"2022-02-15T14:23:33","modified_gmt":"2022-02-15T14:23:33","slug":"node_docker_multistage","status":"publish","type":"post","link":"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/","title":{"rendered":"Create lean Node.js image with Docker multi-stage build"},"content":{"rendered":"<h2 id=\"tldr\">TL;DR<\/h2>\n<p>Starting from Docker 17.05+, you can create a single <code>Dockerfile<\/code> that can build multiple helper images with compilers, tools, and tests and use files from above images to produce the <strong>final<\/strong> Docker image.\u00a0Read this simple tutorial and <strong><a href=\"https:\/\/g.codefresh.io\/signup?utm_source=Blog&amp;utm_medium=Post&amp;utm_campaign=CreatleanT\">create a free Codefresh account<\/a><\/strong> \u00a0to build, test and deploy images instantly.<\/p>\n<p><img class=\"aligncenter size-full wp-image-2741\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/04\/multi_stage_build.png\" alt=\"\" width=\"886\" height=\"526\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/04\/multi_stage_build.png 886w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/04\/multi_stage_build-300x178.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/04\/multi_stage_build-768x456.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/04\/multi_stage_build-552x328.png 552w\" sizes=\"(max-width: 886px) 100vw, 886px\" \/><\/p>\n<h2 id=\"thecoreprincipleofdockerfile\">The \u201ccore principle\u201d of Dockerfile<\/h2>\n<p>Docker can build images by reading the instructions from a <code>Dockerfile<\/code>. A <code>Dockerfile<\/code> is a text file that contains a list of all the commands needed to build a new Docker image. The syntax of <code>Dockerfile<\/code> is pretty simple and the Docker team tries to keep it intact between Docker engine releases.<\/p>\n<p>The core principle is very simple: <code>1 Dockerfile -&gt; 1 Docker Image<\/code>.<\/p>\n<p>This principle works just fine for basic use cases, where you just need to demonstrate Docker capabilities or put some \u201cstatic\u201d content into a Docker image.<\/p>\n<p>Once you advance with Docker and would like to create secure and lean Docker images, a single <code>Dockerfile<\/code> is not enough.<\/p>\n<p>People who insist on following the above principle find themselves with slow Docker builds, huge Docker images (several GB size images), slow deployment time and lots of CVE violations embedded into these images.<\/p>\n<h2 id=\"thedockerbuildcontainerpattern\">The Docker Build Container pattern<\/h2>\n<p><a href=\"https:\/\/medium.com\/@alexeiled\/docker-pattern-the-build-container-b0d0e86ad601\">Docker Pattern: The Build Container<\/a><\/p>\n<p>The basic idea behind <strong>Build Container<\/strong> pattern is simple:<\/p>\n<blockquote><p>Create additional Docker images with required tools (compilers, linters, testing tools) and use these images to produce lean, secure and production ready Docker image.<\/p><\/blockquote>\n<hr \/>\n<p>An example of the <strong>Build Container<\/strong> pattern for typical Node.js application:<\/p>\n<ol>\n<li>Derive <code>FROM<\/code> a Node base image (for example <code>node:6.10-alpine<\/code>) <code>node<\/code> and <code>npm<\/code> installed (<code>Dockerfile.build<\/code>)<\/li>\n<li>Add <code>package.json<\/code><\/li>\n<li>Install all node modules from <code>dependency<\/code> and <code>devDependency<\/code><\/li>\n<li>Copy application code<\/li>\n<li>Run compilers, code coverage, linters, code analysis and testing tools<\/li>\n<li>Create the <strong>production<\/strong> Docker image; derive <code>FROM<\/code> same or other Node base image<\/li>\n<li>install node modules required for runtime (<code>npm install --only=production<\/code>)<\/li>\n<li>expose <code>PORT<\/code> and define a default <code>CMD<\/code> (command to run your application)<\/li>\n<li>Push the <strong>production<\/strong> image to some Docker registry<\/li>\n<\/ol>\n<p>This flow assumes that you are using two or more\u00a0<code>Dockerfile<\/code>s and a shell script or flow tool to orchestrate all steps above.<\/p>\n<h3 id=\"example\">Example<\/h3>\n<p>I use a fork of <a href=\"https:\/\/github.com\/sdelements\/lets-chat\">Let\u2019s Chat<\/a> node.js application. Here is the link to our <a href=\"https:\/\/github.com\/codefreshdemo\/demochat\">fork<\/a>.<\/p>\n<h4 id=\"builderdockerimagewitheslintmochaandgulp\">Builder Docker image with eslint, mocha and gulp<\/h4>\n<pre class=\"lang:sh decode:true\" title=\"Dockerfile.builder\">FROM alpine:3.5\r\n\r\n# install node \r\nRUN apk add --no-cache nodejs\r\n# set working directory\r\nWORKDIR \/root\/chat\r\n# copy project file\r\nCOPY package.json .\r\n# install node packages\r\nRUN npm set progress=false &amp;&amp; \\\r\n    npm config set depth 0 &amp;&amp; \\\r\n    npm install\r\n# copy app files\r\nCOPY . .\r\n# run linter, setup and tests\r\nCMD npm run lint &amp;&amp; npm run setup &amp;&amp; npm run test<\/pre>\n<h4><strong>Production<\/strong> Docker image with \u2018<em>production<\/em>\u2019 node modules only<\/h4>\n<pre class=\"lang:sh decode:true\" title=\"Dockerfile\">FROM alpine:3.5\r\n\r\n# install node\r\nRUN apk add \u2013no-cache nodejs tini\r\n# set working directory\r\nWORKDIR \/root\/chat\r\n# copy project file\r\nCOPY package.json .\r\n# install node packages\r\nRUN npm set progress=false &amp;&amp; \\\r\n    npm config set depth 0 &amp;&amp; \\\r\n    npm install --only=production &amp;&amp; \\\r\n    npm cache clean\r\n# copy app files\r\nCOPY . .\r\n# Set tini as entrypoint\r\nENTRYPOINT [\u201c\/sbin\/tini\u201d, \u201c--\u201d]\r\n# application server port\r\nEXPOSE 5000\r\n# default run command\r\nCMD npm run start<\/pre>\n<h2 id=\"whatisdockermulti-stagebuild\">What is Docker multi-stage build?<\/h2>\n<p>Docker 17.05 extends <code>Dockerfile<\/code> syntax to support new <strong>multi-stage<\/strong> build, by extending two commands: <code>FROM<\/code> and <code>COPY<\/code>.<\/p>\n<p>The <strong>multi-stage<\/strong> build allows using multiple <code>FROM<\/code> commands in the same Dockerfile. The last <code>FROM<\/code> command produces the final Docker image, all other images are intermediate images (no final Docker image is produced, but <em>all layers are cached<\/em>).<\/p>\n<p>The <code>FROM<\/code> syntax also supports <code>AS<\/code> keyword. Use <code>AS<\/code> keyword to give the current image a logical name and reference to it later by this name.<\/p>\n<p>To copy files from intermediate images use <code>COPY --from=&lt;image_AS_name|image_number&gt;<\/code>, where number starts from <code>0<\/code> (but better to use logical name through <code>AS<\/code> keyword).<\/p>\n<h2 id=\"creatingamulti-stagedockerfilefornode.jsapplication\">Creating a multi-stage Dockerfile for Node.js application<\/h2>\n<p>The <code>Dockerfile<\/code> below makes the <strong>Build Container<\/strong> pattern obsolete, allowing to achieve the same result with the single file.<\/p>\n<pre class=\"lang:sh decode:true\" title=\"Dockerfile\">#\r\n# ---- Base Node ----\r\nFROM alpine:3.5 AS base\r\n# install node\r\nRUN apk add --no-cache nodejs-current tini\r\n# set working directory\r\nWORKDIR \/root\/chat\r\n# Set tini as entrypoint\r\nENTRYPOINT [\"\/sbin\/tini\", \"--\"]\r\n# copy project file\r\nCOPY package.json .\r\n\r\n#\r\n# ---- Dependencies ----\r\nFROM base AS dependencies\r\n# install node packages\r\nRUN npm set progress=false &amp;&amp; npm config set depth 0\r\nRUN npm install --only=production \r\n# copy production node_modules aside\r\nRUN cp -R node_modules prod_node_modules\r\n# install ALL node_modules, including 'devDependencies'\r\nRUN npm install\r\n\r\n#\r\n# ---- Test ----\r\n# run linters, setup and tests\r\nFROM dependencies AS test\r\nCOPY . .\r\nRUN  npm run lint &amp;&amp; npm run setup &amp;&amp; npm run test\r\n\r\n#\r\n# ---- Release ----\r\nFROM base AS release\r\n# copy production node_modules\r\nCOPY --from=dependencies \/root\/chat\/prod_node_modules .\/node_modules\r\n# copy app sources\r\nCOPY . .\r\n# expose port and define CMD\r\nEXPOSE 5000\r\nCMD npm run start<\/pre>\n<p>&nbsp;<\/p>\n<p>The above <code>Dockerfile<\/code> creates 3 intermediate Docker images and single <strong>release<\/strong> Docker image (the final <code>FROM<\/code>).<\/p>\n<ol>\n<li>First image <code>FROM alpine:3.5 AS bas<\/code> &#8211; is a base Node image with: <code>node<\/code>, <code>npm<\/code>, <code>tini<\/code> (init app) and <code>package.json<\/code><\/li>\n<li>Second image <code>FROM base AS dependencies<\/code> &#8211; contains all node modules from <code>dependencies<\/code> and <code>devDependencies<\/code> with additional copy of <code>dependencies<\/code> required for final image only<\/li>\n<li>Third image <code>FROM dependencies AS test<\/code> &#8211; runs linters, setup and tests (with <code>mocha<\/code>); if this run command fail not final image is produced<\/li>\n<li>The final image <code>FROM base AS release<\/code> &#8211; is a base Node image with application code and all node modules from <code>dependencies<\/code><\/li>\n<\/ol>\n<h2 id=\"trydockermulti-stagebuildtoday\">Try Docker multi-stage build today<\/h2>\n<p>In order to try Docker <strong>multi-stage<\/strong> build, you need to get Docker 17.05, which is going to be released in May and currently available on the <em>beta<\/em> channel.<\/p>\n<p>So, you have two options:<\/p>\n<ol>\n<li>Use <em>beta<\/em> channel to get Docker 17.05<\/li>\n<li>Run <em>dind<\/em> container (docker-in-docker)<\/li>\n<\/ol>\n<h3 id=\"runningdocker-in-docker17.0.5beta\">Running Docker-in-Docker 17.05 (beta)<\/h3>\n<p>Running Docker 17.05 (beta) in docker container (<code>--privileged<\/code> is required):<code><br \/>\n<\/code><\/p>\n<pre class=\"lang:sh decode:true\">$ docker run -d --rm --privileged -p 23751:2375 --name dind \\\r\n    docker:17.05.0-ce-dind --storage-driver overlay2<\/pre>\n<p>Try <strong>mult-stage<\/strong> build. Add <code>--host=:23751<\/code> to every Docker command, or set <code>DOCKER_HOST<\/code> environment variable.<\/p>\n<pre class=\"lang:sh decode:true \">$ # using --host\r\n$ docker --host=:23751 build -t local\/chat:multi-stage .\r\n\r\n$ # OR: setting DOCKER_HOST\r\n$ export DOCKER_HOST=localhost:23751\r\n$ docker build -t local\/chat:multi-stage .<\/pre>\n<h2>Summary<\/h2>\n<p>With Docker <strong>multi-stage<\/strong> build feature, it\u2019s possible to implement an advanced Docker image build pipeline using a single <span class=\"lang:default decode:true crayon-inline \">Dockerfile<\/span>\u00a0.<\/p>\n<p>Kudos to Docker team for such a useful feature!<\/p>\n<hr \/>\n<p>Hope, you find this post useful. I look forward to your comments and any questions you have.<\/p>\n<p><b>PS Codefresh just added multi-stage build support, Please go on and <\/b><strong><a href=\"https:\/\/g.codefresh.io\/signup?utm_source=Blog&amp;utm_medium=Post&amp;utm_campaign=CreatLeanB\">create a free Codefresh account<\/a><\/strong><b> to try this out.<\/b><\/p>\n<p><span style=\"font-weight: 400;\">New to Codefresh? <\/span><strong><a href=\"https:\/\/codefresh.io\/request-a-demo\/\">Schedule a FREE onboarding and start making pipelines fast<\/a>.<\/strong><span style=\"font-weight: 400;\"> and start building, testing and deploying Docker images faster than ever.<\/span><\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"2737\"\/>","protected":false},"excerpt":{"rendered":"<p>TL;DR Starting from Docker 17.05+, you can create a single Dockerfile that can build multiple helper images with compilers, tools, and tests and use files from above images to produce the final Docker image.\u00a0Read this simple tutorial and create a free Codefresh account \u00a0to build, test and deploy images instantly. The \u201ccore principle\u201d of Dockerfile &hellip; <a href=\"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/\">Read more<\/a><\/p>\n","protected":false},"author":28,"featured_media":2732,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[8],"tags":[14,19,53,54,97,98,99],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Create lean Node.js image with Docker multi-stage build | Codefresh<\/title>\n<meta name=\"description\" content=\"With multi-sage Docker build, it&#039;s possible to create an effective build flow to assemble lean and secure Node.js image using single Dockerfile.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Create lean Node.js image with Docker multi-stage build\" \/>\n<meta property=\"og:description\" content=\"With multi-sage Docker build, it&#039;s possible to create an effective build flow to assemble lean and secure Node.js image using single Dockerfile.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2017-04-24T09:18:55+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-02-15T14:23:33+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/04\/Dockerhub-integrate-Codefresh.png\" \/>\n\t<meta property=\"og:image:width\" content=\"1000\" \/>\n\t<meta property=\"og:image:height\" content=\"495\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@alexeiled\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Alexei Ledenev\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"6 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/04\/Dockerhub-integrate-Codefresh.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/04\/Dockerhub-integrate-Codefresh.png\",\"width\":1000,\"height\":495},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/#webpage\",\"url\":\"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/\",\"name\":\"Create lean Node.js image with Docker multi-stage build | Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/#primaryimage\"},\"datePublished\":\"2017-04-24T09:18:55+00:00\",\"dateModified\":\"2022-02-15T14:23:33+00:00\",\"description\":\"With multi-sage Docker build, it's possible to create an effective build flow to assemble lean and secure Node.js image using single Dockerfile.\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Create lean Node.js image with Docker multi-stage build\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/33798ced90c48c116c3a9a59ae74af50\"},\"headline\":\"Create lean Node.js image with Docker multi-stage build\",\"datePublished\":\"2017-04-24T09:18:55+00:00\",\"dateModified\":\"2022-02-15T14:23:33+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/#webpage\"},\"wordCount\":740,\"commentCount\":29,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/04\/Dockerhub-integrate-Codefresh.png\",\"keywords\":[\"docker\",\"node.js\",\"CI\/CD\",\"build\",\"dockerfile\",\"multi-stage\",\"docker build\"],\"articleSection\":[\"Docker Tutorials\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/33798ced90c48c116c3a9a59ae74af50\",\"name\":\"Alexei Ledenev\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/53d5ff05d62acd594ea97300543a62a5?s=96&d=blank&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/53d5ff05d62acd594ea97300543a62a5?s=96&d=blank&r=g\",\"caption\":\"Alexei Ledenev\"},\"description\":\"Alexei is an experienced software architect and HPE distinguished technologist. He currently works at Codefresh as the Chief Researcher, focusing lately on #docker, #golang and #aws. In his spare time, Alexei maintains a couple of Docker-centric open-source projects, writes tech blog posts, and enjoys traveling and playing with his kids. https:\/\/github.com\/gaia-adm\/pumba\",\"sameAs\":[\"https:\/\/medium.com\/@alexeiled\/\",\"https:\/\/twitter.com\/alexeiled\"],\"url\":\"https:\/\/codefresh.io\/author\/alexei\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Create lean Node.js image with Docker multi-stage build | Codefresh","description":"With multi-sage Docker build, it's possible to create an effective build flow to assemble lean and secure Node.js image using single Dockerfile.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/","og_locale":"en_US","og_type":"article","og_title":"Create lean Node.js image with Docker multi-stage build","og_description":"With multi-sage Docker build, it's possible to create an effective build flow to assemble lean and secure Node.js image using single Dockerfile.","og_url":"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2017-04-24T09:18:55+00:00","article_modified_time":"2022-02-15T14:23:33+00:00","og_image":[{"width":1000,"height":495,"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/04\/Dockerhub-integrate-Codefresh.png","type":"image\/png"}],"twitter_card":"summary_large_image","twitter_creator":"@alexeiled","twitter_site":"@codefresh","twitter_misc":{"Written by":"Alexei Ledenev","Est. reading time":"6 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/04\/Dockerhub-integrate-Codefresh.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/04\/Dockerhub-integrate-Codefresh.png","width":1000,"height":495},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/#webpage","url":"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/","name":"Create lean Node.js image with Docker multi-stage build | Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/#primaryimage"},"datePublished":"2017-04-24T09:18:55+00:00","dateModified":"2022-02-15T14:23:33+00:00","description":"With multi-sage Docker build, it's possible to create an effective build flow to assemble lean and secure Node.js image using single Dockerfile.","breadcrumb":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Create lean Node.js image with Docker multi-stage build"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/33798ced90c48c116c3a9a59ae74af50"},"headline":"Create lean Node.js image with Docker multi-stage build","datePublished":"2017-04-24T09:18:55+00:00","dateModified":"2022-02-15T14:23:33+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/#webpage"},"wordCount":740,"commentCount":29,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/04\/Dockerhub-integrate-Codefresh.png","keywords":["docker","node.js","CI\/CD","build","dockerfile","multi-stage","docker build"],"articleSection":["Docker Tutorials"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/docker-tutorial\/node_docker_multistage\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/33798ced90c48c116c3a9a59ae74af50","name":"Alexei Ledenev","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/53d5ff05d62acd594ea97300543a62a5?s=96&d=blank&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/53d5ff05d62acd594ea97300543a62a5?s=96&d=blank&r=g","caption":"Alexei Ledenev"},"description":"Alexei is an experienced software architect and HPE distinguished technologist. He currently works at Codefresh as the Chief Researcher, focusing lately on #docker, #golang and #aws. In his spare time, Alexei maintains a couple of Docker-centric open-source projects, writes tech blog posts, and enjoys traveling and playing with his kids. https:\/\/github.com\/gaia-adm\/pumba","sameAs":["https:\/\/medium.com\/@alexeiled\/","https:\/\/twitter.com\/alexeiled"],"url":"https:\/\/codefresh.io\/author\/alexei\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/2737"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/28"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=2737"}],"version-history":[{"count":1,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/2737\/revisions"}],"predecessor-version":[{"id":21511,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/2737\/revisions\/21511"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/2732"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=2737"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=2737"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=2737"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}