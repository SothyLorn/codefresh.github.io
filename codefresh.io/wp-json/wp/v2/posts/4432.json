{"id":4432,"date":"2017-08-21T16:20:36","date_gmt":"2017-08-21T16:20:36","guid":{"rendered":"https:\/\/codefresh.io\/?p=4432"},"modified":"2022-03-24T20:38:55","modified_gmt":"2022-03-24T20:38:55","slug":"docker-jenkins-pipelines","status":"publish","type":"post","link":"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/","title":{"rendered":"Docker CI\/CD Pipelines with Jenkins Codefresh Plugin v1.5"},"content":{"rendered":"<p><img class=\"alignnone wp-image-647 size-full\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/07\/Plug-in-for-Jenkins-1.jpg\" alt=\"docker with codefresh and jenkins\" width=\"830\" height=\"400\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/07\/Plug-in-for-Jenkins-1.jpg 830w, https:\/\/codefresh.io\/wp-content\/uploads\/2016\/07\/Plug-in-for-Jenkins-1-300x145.jpg 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2016\/07\/Plug-in-for-Jenkins-1-768x370.jpg 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2016\/07\/Plug-in-for-Jenkins-1-628x303.jpg 628w\" sizes=\"(max-width: 830px) 100vw, 830px\" \/><\/p>\n<h2>Introduction<\/h2>\n<p>Docker has quickly become the ultimate enabler for continuous delivery practices. But all-in containerization is a disruptive change. It requires us to re-think each step along our delivery stream.<\/p>\n<p>Many brownfield projects have learned to rely on <strong>Jenkins<\/strong> for the orchestration of their build, test and packaging tasks. Now they are starting to ship their first application containers and looking at how to integrate Docker with their existing procedures.<\/p>\n<p>There&#8217;s an abundance of powerful Docker-related plugins in <strong>Jenkins<\/strong> ecosystem. But they all share\u00a0 the same downside: at the end of the day one has to manage Docker infastructure on their own. While a great, super-flexible scheduler and orchestrator &#8211; <strong>Jenkins<\/strong> wasn&#8217;t built with Docker in mind. It can&#8217;t (and probably shouldn&#8217;t) provide the native, out-of-the-box Docker experience that Codefresh has to offer.<\/p>\n<p>That&#8217;s why we&#8217;ve created the <strong>Jenkins Codefresh plugin<\/strong>: to allow easy, seamless integration of Docker-native pipelines with your existing, well-trusted jenkins processes.<\/p>\n<h2>The New Release<\/h2>\n<p>We&#8217;ve just released the new version of the plugin. Version number is 1.5 and it brings the following features:<\/p>\n<ul>\n<li>Separate build steps for Codefresh pipeline builds and composition launches.<\/li>\n<li>Codefresh process logs in Jenkins console output.<\/li>\n<li>Passing environment variables to both pipeline builds and launched environments.<\/li>\n<li>Support for <strong>Blue Ocean<\/strong> pipeline editor.<\/li>\n<\/ul>\n<h2>A walkthrough<\/h2>\n<h2>Step 1: Install the plugin<\/h2>\n<p>The plugin is hosted on the official Jenkins plugin repository, so the installation is the standard Jenkins procedure:<\/p>\n<p>In your Jenkins instance UI go to: Manage Jenkins -&gt; Manage Plugins. Click on the &#8216;Available&#8217; tab and type &#8216;codefresh&#8217; in the &#8216;Filter&#8217; textbox at the top on the right.\u00a0 Choose &#8216;Codefresh Integration Plugin&#8217; and click on\u00a0 &#8216;Install without restart&#8217; button at the bottom of the page.<\/p>\n<p>Result:<\/p>\n<p><img class=\"alignnone wp-image-4484 size-full\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/Screen-Shot-2017-08-21-at-11.18.33-AM.png\" alt=\"docker-native ci\/cd with Jenkins and codefresh plugin\" width=\"1250\" height=\"212\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/Screen-Shot-2017-08-21-at-11.18.33-AM.png 1250w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/Screen-Shot-2017-08-21-at-11.18.33-AM-300x51.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/Screen-Shot-2017-08-21-at-11.18.33-AM-768x130.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/Screen-Shot-2017-08-21-at-11.18.33-AM-1024x174.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/Screen-Shot-2017-08-21-at-11.18.33-AM-628x107.png 628w\" sizes=\"(max-width: 1250px) 100vw, 1250px\" \/><\/p>\n<p>Once Jenkins tells you the plugin got installed &#8211; you can proceed to configuration.<\/p>\n<h2>Step 2: Configure the integration<\/h2>\n<p>Define the connection to Codefresh in Jenkins system config (Manage Jenkins-&gt;Configure system-&gt; scroll down to find &#8216;<em>Define Codefesh Integration<\/em>&#8216;).<\/p>\n<p>This requires filling out your username and Codefresh auth token. You can verify the authentication by using the &#8216;<em>Test Connection<\/em>&#8216; button.<\/p>\n<p>To find your auth token:<\/p>\n<ul>\n<li>Login to Codefresh (use your Github, Gitlab or Bitbucket account) and then open<a href=\"https:\/\/g.codefresh.io\/api\/\"> https:\/\/g.codefresh.io\/api\/<\/a> in another tab of the same browser.<\/li>\n<li>Copy your token from the right-hand text field on the Swagger header.<\/li>\n<\/ul>\n<p>Screenshot:<br \/>\n<a href=\"https:\/\/camo.githubusercontent.com\/32623f74ca6582f8cd95953667d8503d3242b3d0\/687474703a2f2f6f746f6d61746f2e6c696e6b2f77702d636f6e74656e742f75706c6f6164732f323031362f30372f53637265656e2d53686f742d323031362d30372d32312d61742d31312e31352e34342d414d2e706e67\" target=\"_blank\" rel=\"noopener\"><img class=\"alignnone\" src=\"https:\/\/camo.githubusercontent.com\/32623f74ca6582f8cd95953667d8503d3242b3d0\/687474703a2f2f6f746f6d61746f2e6c696e6b2f77702d636f6e74656e742f75706c6f6164732f323031362f30372f53637265656e2d53686f742d323031362d30372d32312d61742d31312e31352e34342d414d2e706e67\" alt=\"docker-native ci\/cd with Jenkins and codefresh plugin\" width=\"1085\" height=\"208\" data-canonical-src=\"http:\/\/otomato.link\/wp-content\/uploads\/2016\/07\/Screen-Shot-2016-07-21-at-11.15.44-AM.png\" \/><\/a><\/p>\n<h2>Step 3: Trigger a Docker Pipeline<\/h2>\n<p>This step has many faces. You can trigger Codefresh pipelines either from traditional freestyle Jenkins jobs or from Jenkins Groovy-DSL pipeline scripts. Either with or without environment variables.<\/p>\n<p>In this post we&#8217;ll provide an example of using Codefresh with freestyle jobs and then describe the pogrammatic usage pattern with Jenkins pipelines in part 2.<\/p>\n<h3>The Demo Project<\/h3>\n<p>For the purpose of this demostration we will be building a small RESTful api webservice written in Golang. The service will store and retrieve software build results using MongoDB as the storage backend. The name of the service is &#8216;<em>bringon<\/em>&#8216; (that&#8217;s for <strong>B<\/strong>uild <strong>R<\/strong>ecorder <strong>In<\/strong> <strong>GO<\/strong>la<strong>N<\/strong>g). The source code\u00a0 with all the Docker-, Codefresh- and Jenkins-related files can be found here: <a href=\"https:\/\/github.com\/otomato-gh\/bringon\">https:\/\/github.com\/otomato-gh\/bringon<\/a><\/p>\n<h4><strong>The Dockerfile:<\/strong><\/h4>\n<p>Our service is built with the help of the following <a href=\"https:\/\/codefresh.io\/docker-guides\/docker-multi-stage-builds\/\">multi-stage Dockerfile<\/a>:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">FROM golang:1.7.3 AS builder\r\nWORKDIR \/go\/src\/github.com\/antweiss\/bringon\r\nADD . .\r\nRUN go get -u github.com\/golang\/dep\/cmd\/dep &amp;&amp; dep ensure\r\nRUN CGO_ENABLED=0 GOOS=linux go build -o bringon\r\n\r\nFROM alpine:latest\r\nRUN apk --no-cache add ca-certificates\r\nWORKDIR \/root\/\r\nEXPOSE 8091\r\nCOPY --from=builder \/go\/src\/github.com\/antweiss\/bringon\/bringon .\r\nCMD [\".\/bringon\"]<\/pre>\n<p>As you can see &#8211; we&#8217;re using the official golang:1.7.3 build for the compilation and the brand-new Go dependency manager <a href=\"https:\/\/github.com\/golang\/dep\">dep<\/a> to fetch the dependency packages.<\/p>\n<p>We then package the resulting binary in a lightweight alpine-based image for execution.<\/p>\n<h4>The Codefresh Pipeline<\/h4>\n<p>The first step here is, of course, adding the repository to my Codefresh account.<\/p>\n<p>Once that is done &#8211; we can start defining the pipeline.<\/p>\n<p>In the Codefresh pipeline we will be using the brand new <a href=\"https:\/\/codefresh.io\/kubernetes-deploy\/\">Google cloud integration<\/a> to deploy our service to a Kubernetes cluster running on GKE.<\/p>\n<p>I am using a codefresh.yml pipeline defintion but you can configure a similar pipeline from the simple to use GUI.<\/p>\n<p>Here&#8217;s my Codefresh flow:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\">version: '1.0'\r\nsteps:\r\n  BuildingDockerImage:\r\n    title: Building Docker Image\r\n    type: build\r\n    image_name: otomato\/bringon\r\n    working_directory: .\/\r\n    dockerfile: Dockerfile\r\n    tag: '${{CF_BRANCH_TAG_NORMALIZED}}'\r\n  PushingToDockerRegistry:\r\n    title: Pushing to Docker Registry\r\n    type: push\r\n    candidate: '${{BuildingDockerImage}}'\r\n    tag: '${{CF_BRANCH_TAG_NORMALIZED}}'\r\n    registry: dockerhub\r\n  RunningDeployScript:\r\n    title: Running Deploy Script\r\n    type: deploy\r\n    kind: kubernetes\r\n    cluster: cftest@otomato-auth\r\n    namespace: default\r\n    service: bringon\r\n    when:\r\n      branch:\r\n        only:\r\n          - master\r\n    candidate:\r\n      image: '${{BuildingDockerImage}}'\r\n      registry: dockerhub\r\n  \r\n<\/pre>\n<p>Let&#8217;s go through it step by step.<\/p>\n<ul>\n<li>So first &#8211; we&#8217;re building the docker image &#8216;otomato\/bringon&#8217; and tagging it with the branch name.<\/li>\n<li>Then &#8211; we&#8217;re pushing the image to Dockerhub. Again &#8211; with the same branch-named tag.<\/li>\n<li>And then &#8211; we&#8217;re deployng the newly built image to a service that&#8217;s running in our Codefresh-integrated GKE cluster.<\/li>\n<\/ul>\n<p>Pretty easy and straightforward, isn&#8217;t it?<\/p>\n<h4>Don&#8217;t forget the DB<\/h4>\n<p>It&#8217;s worth mentioning that our demo service requires a database (MongoDB) connection in order to do any work.\u00a0 This means we&#8217;ll need to deploy a db instance inside the same GKE cluster. The service expects to find the database by static name &#8216;mongo&#8217; &#8211; so this is the name we will give our MongoDB service.<\/p>\n<h4>The Jenkins Job<\/h4>\n<p>Now that our repository has all it needs to build the Docker image and run a Codefresh pipeline &#8211; it&#8217;s time to define the Jenkins job.<\/p>\n<p>We create a new job by clicking &#8216;New Item&#8217; and choosing &#8216;Freestyle project&#8217;.<\/p>\n<p>In the job creation window we click on the &#8216;Build&#8217; tab and then\u00a0 &#8211; on the &#8216;add build step&#8217; button.<\/p>\n<p>Choose &#8216;Run Codefresh Pipeline&#8217; from the available steps list.<\/p>\n<p>If your Jenkins job has a git SCM definiton &#8211; the step will try to find a relevant Codefresh pipeline. But we haven&#8217;t defined any SCM configuration, so we&#8217;ll check the &#8216;Choose service to build&#8217; checkbox. This will show a drop-down list\u00a0 of all\u00a0 Codefresh pipelines in the connected account.<\/p>\n<p>We will choose the default &#8216;bringon&#8217; pipeline.<\/p>\n<p>If we need to pass environment variables to the pipeline\u00a0 execution, we will check the &#8216;Set Codefresh Pipeline Variables&#8217; option and add the needed parameters. For example we may want to set <strong><em>DEBUG=true<\/em><\/strong> for our CI pipeline configuration.<\/p>\n<p>Screenshot:<\/p>\n<p><img class=\"alignnone wp-image-4450 size-large\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/Screen-Shot-2017-08-15-at-4.44.33-PM-1024x386.png\" alt=\"docker-native ci\/cd with Jenkins and codefresh plugin\" width=\"1024\" height=\"386\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/Screen-Shot-2017-08-15-at-4.44.33-PM-1024x386.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/Screen-Shot-2017-08-15-at-4.44.33-PM-300x113.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/Screen-Shot-2017-08-15-at-4.44.33-PM-768x289.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/Screen-Shot-2017-08-15-at-4.44.33-PM-628x237.png 628w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/Screen-Shot-2017-08-15-at-4.44.33-PM.png 1439w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/p>\n<p>Now we can save the job and click on &#8216;Build Now&#8217;.<\/p>\n<p>This will trigger the Codefresh pipeline and add a badge with a link to the Codefresh build output on the Jenkins build page.<\/p>\n<h2>Step 4: Launch a Docker composition from Jenkins<\/h2>\n<p>As we&#8217;ve seen\u00a0 &#8211; Codefresh integration makes deploying services to Kubernetes a breeze. But for lightweight\u00a0 ephemeral testing environments many of us still prefer the simple syntax of <strong>docker-compose<\/strong>.<\/p>\n<p>It&#8217;s easy to define, deploy and share Docker compositions on Codefresh. And now it&#8217;s even more powerful with Jenkins integration.<\/p>\n<p>The composition we will be using looks as follows:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\">version: \"3\"\r\n\r\nservices:\r\n  bringon:\r\n    image: otomato\/bringon:master\r\n    ports:\r\n      - 8091\r\n  mongo:\r\n    image: mongo\r\n    ports:\r\n      - 27017\r\n<\/pre>\n<p>We will save it on Codefresh UI with the name bringon-mongo.<\/p>\n<p>Now on our Jenkins job we will add another build step: &#8220;Launch Codefresh Composition&#8221; and choose &#8216;bringon-mongo&#8217; form the drop-down list of composition names.<\/p>\n<p>We can also define environment variables for our composition launch &#8211; exactly as in the case of pipeline execution.<\/p>\n<p>Screenshot:<\/p>\n<p><img class=\"alignnone wp-image-4451 size-large\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/Screen-Shot-2017-08-15-at-5.15.49-PM-1024x282.png\" alt=\"docker-native ci\/cd with Jenkins and codefresh plugin\" width=\"1024\" height=\"282\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/Screen-Shot-2017-08-15-at-5.15.49-PM-1024x282.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/Screen-Shot-2017-08-15-at-5.15.49-PM-300x82.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/Screen-Shot-2017-08-15-at-5.15.49-PM-768x211.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/Screen-Shot-2017-08-15-at-5.15.49-PM-628x173.png 628w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/Screen-Shot-2017-08-15-at-5.15.49-PM.png 1033w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/p>\n<p>&nbsp;<\/p>\n<p>Now a composition environment will get launched every time we run the Jenkins job.<\/p>\n<h4>Terminating the Environment<\/h4>\n<p>Running compositions is often used for creating ephemeral temporary environments for component-level testing. Many times when the tests are green &#8211; we don&#8217;t need the environment anymore.<\/p>\n<p>You can terminate the composition environment you&#8217;ve launched in the build step using the post-build action called &#8220;Terminate Codefresh Environment&#8221;<\/p>\n<p>By default the environment will only get terminated if the job succeeded. This way\u00a0 &#8211; if there are failed tests\u00a0 &#8211; it&#8217;s stll available for debugging. Optionally you can choose to temirnate it even when the job fails.<\/p>\n<p>Screenshot:<\/p>\n<p><img class=\"alignnone wp-image-4452 size-large\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/Screen-Shot-2017-08-15-at-5.22.27-PM-1024x97.png\" alt=\"docker-native ci\/cd with Jenkins and codefresh plugin\" width=\"1024\" height=\"97\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/Screen-Shot-2017-08-15-at-5.22.27-PM-1024x97.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/Screen-Shot-2017-08-15-at-5.22.27-PM-300x28.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/Screen-Shot-2017-08-15-at-5.22.27-PM-768x73.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/Screen-Shot-2017-08-15-at-5.22.27-PM-628x60.png 628w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/Screen-Shot-2017-08-15-at-5.22.27-PM.png 1107w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/p>\n<p>And that&#8217;s it for today.<\/p>\n<p>Stay tuned for part 2 of this post where we will show how to trigger Codefresh from Jenkins groovy pipelines.<\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"4432\"\/>","protected":false},"excerpt":{"rendered":"<p>Introduction Docker has quickly become the ultimate enabler for continuous delivery practices. But all-in containerization is a disruptive change. It requires us to re-think each step along our delivery stream. Many brownfield projects have learned to rely on Jenkins for the orchestration of their build, test and packaging tasks. Now they are starting to ship &hellip; <a href=\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/\">Read more<\/a><\/p>\n","protected":false},"author":9,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[8],"tags":[13,14,117],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Docker CI\/CD Pipelines with Jenkins Codefresh Plugin v1.5 | Codefresh<\/title>\n<meta name=\"description\" content=\"Codefresh plugin provides seamless integration of Docker-native pipelines with your existing Jenkins processes. Now with environment variables support.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Docker CI\/CD Pipelines with Jenkins Codefresh Plugin v1.5\" \/>\n<meta property=\"og:description\" content=\"Codefresh plugin provides seamless integration of Docker-native pipelines with your existing Jenkins processes. Now with environment variables support.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2017-08-21T16:20:36+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-03-24T20:38:55+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/07\/Plug-in-for-Jenkins-1.jpg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@antweiss\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Anton Weiss\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"7 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/07\/Plug-in-for-Jenkins-1.jpg\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/07\/Plug-in-for-Jenkins-1.jpg\",\"width\":830,\"height\":400},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/#webpage\",\"url\":\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/\",\"name\":\"Docker CI\/CD Pipelines with Jenkins Codefresh Plugin v1.5 | Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/#primaryimage\"},\"datePublished\":\"2017-08-21T16:20:36+00:00\",\"dateModified\":\"2022-03-24T20:38:55+00:00\",\"description\":\"Codefresh plugin provides seamless integration of Docker-native pipelines with your existing Jenkins processes. Now with environment variables support.\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Docker CI\/CD Pipelines with Jenkins Codefresh Plugin v1.5\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/93d9834241a4b1b862a21e1d9a42a39f\"},\"headline\":\"Docker CI\/CD Pipelines with Jenkins Codefresh Plugin v1.5\",\"datePublished\":\"2017-08-21T16:20:36+00:00\",\"dateModified\":\"2022-03-24T20:38:55+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/#webpage\"},\"wordCount\":1226,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/07\/Plug-in-for-Jenkins-1.jpg\",\"keywords\":[\"jenkins\",\"docker\",\"docker pipelines\"],\"articleSection\":[\"Docker Tutorials\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/93d9834241a4b1b862a21e1d9a42a39f\",\"name\":\"Anton Weiss\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/74279e1c79e1997c40057ee2c54a6454?s=96&d=blank&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/74279e1c79e1997c40057ee2c54a6454?s=96&d=blank&r=g\",\"caption\":\"Anton Weiss\"},\"description\":\"Ant(on) Weiss is a DevOps Evangelist and Enabler. He's been architecting software delivery processes at large and small companies for the last 15 years. Today he's the CEO and Principal Consultant at Otomato. When not evangelising for Codefresh, he's deeply involved with technical training and public speaking.\",\"sameAs\":[\"http:\/\/antweiss.com\",\"https:\/\/twitter.com\/antweiss\"],\"url\":\"https:\/\/codefresh.io\/author\/anton\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Docker CI\/CD Pipelines with Jenkins Codefresh Plugin v1.5 | Codefresh","description":"Codefresh plugin provides seamless integration of Docker-native pipelines with your existing Jenkins processes. Now with environment variables support.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/","og_locale":"en_US","og_type":"article","og_title":"Docker CI\/CD Pipelines with Jenkins Codefresh Plugin v1.5","og_description":"Codefresh plugin provides seamless integration of Docker-native pipelines with your existing Jenkins processes. Now with environment variables support.","og_url":"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2017-08-21T16:20:36+00:00","article_modified_time":"2022-03-24T20:38:55+00:00","og_image":[{"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/07\/Plug-in-for-Jenkins-1.jpg"}],"twitter_card":"summary_large_image","twitter_creator":"@antweiss","twitter_site":"@codefresh","twitter_misc":{"Written by":"Anton Weiss","Est. reading time":"7 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/07\/Plug-in-for-Jenkins-1.jpg","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/07\/Plug-in-for-Jenkins-1.jpg","width":830,"height":400},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/#webpage","url":"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/","name":"Docker CI\/CD Pipelines with Jenkins Codefresh Plugin v1.5 | Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/#primaryimage"},"datePublished":"2017-08-21T16:20:36+00:00","dateModified":"2022-03-24T20:38:55+00:00","description":"Codefresh plugin provides seamless integration of Docker-native pipelines with your existing Jenkins processes. Now with environment variables support.","breadcrumb":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Docker CI\/CD Pipelines with Jenkins Codefresh Plugin v1.5"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/93d9834241a4b1b862a21e1d9a42a39f"},"headline":"Docker CI\/CD Pipelines with Jenkins Codefresh Plugin v1.5","datePublished":"2017-08-21T16:20:36+00:00","dateModified":"2022-03-24T20:38:55+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/#webpage"},"wordCount":1226,"commentCount":0,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/07\/Plug-in-for-Jenkins-1.jpg","keywords":["jenkins","docker","docker pipelines"],"articleSection":["Docker Tutorials"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-pipelines\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/93d9834241a4b1b862a21e1d9a42a39f","name":"Anton Weiss","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/74279e1c79e1997c40057ee2c54a6454?s=96&d=blank&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/74279e1c79e1997c40057ee2c54a6454?s=96&d=blank&r=g","caption":"Anton Weiss"},"description":"Ant(on) Weiss is a DevOps Evangelist and Enabler. He's been architecting software delivery processes at large and small companies for the last 15 years. Today he's the CEO and Principal Consultant at Otomato. When not evangelising for Codefresh, he's deeply involved with technical training and public speaking.","sameAs":["http:\/\/antweiss.com","https:\/\/twitter.com\/antweiss"],"url":"https:\/\/codefresh.io\/author\/anton\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/4432"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/9"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=4432"}],"version-history":[{"count":4,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/4432\/revisions"}],"predecessor-version":[{"id":21976,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/4432\/revisions\/21976"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=4432"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=4432"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=4432"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}