{"id":4488,"date":"2017-08-28T18:02:01","date_gmt":"2017-08-28T18:02:01","guid":{"rendered":"https:\/\/codefresh.io\/?p=4488"},"modified":"2022-02-11T21:32:37","modified_gmt":"2022-02-11T21:32:37","slug":"docker-jenkins-codefresh-part-2","status":"publish","type":"post","link":"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/","title":{"rendered":"Docker CI\/CD with Jenkins and Codefresh Plugin v1.5 &#8211; part 2"},"content":{"rendered":"<p><em>We&#8217;ve recently released version 1.5 of <a href=\"https:\/\/wiki.jenkins.io\/display\/JENKINS\/Codefresh+Plugin\">Codefresh plugin for Jenkins<\/a>. The new release allows easy, seamless integration of docker-native ci\/cd pipelines with Jenkins workflows. In <a href=\"https:\/\/codefresh.io\/blog\/docker-jenkins-pipelines\">part 1<\/a> of this guide we showed how to integrate Codefresh with Jenkins legacy freestyle jobs. In today&#8217;s post we&#8217;ll see how to call Codefresh from Jenkins groovy-based pipelines.<br \/>\n<\/em><\/p>\n<p><em>(Note: Version 1.6 of the plugin is on <\/em><em>the way with support for on-prem enterprise-ready Codefresh installations and pipeline API improvements)<br \/>\n<\/em><\/p>\n<h2>Going Groovy<\/h2>\n<p>Groovy-dsl pipelines-as-code is the best thing that happened to Jenkins in the last 5 years. They allow one to script a CI\/CD workflow of any complexity using loops, conditional expressions and shared libraries. The Codefresh plugin supports for groovy pipelines starting with version 1.2. Now it&#8217;s even more intuitive with full separation of build and launch steps and unified syntax for Codefresh environment variable definition.<\/p>\n<p>Let&#8217;s see how this is done.<\/p>\n<h2>Running Docker-native Pipelines<\/h2>\n<p>The basic Jenkins -&gt; Codefresh flow that we observe today goes as follows: Jenkins does some non-Docker-related work (let&#8217;s say &#8211; builds a library), then passes the control to Codefresh for building, deploying and testing the Docker image\/s and then comes back to Jenkins for post-processing and reporting. As shown in the following diagram:<\/p>\n<p><img class=\"alignnone wp-image-4491\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/cf-jenkins.png\" alt=\"docker ci\/cd with jenkins and codefresh\" width=\"723\" height=\"269\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/cf-jenkins.png 1181w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/cf-jenkins-300x112.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/cf-jenkins-768x285.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/cf-jenkins-1024x381.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/cf-jenkins-628x233.png 628w\" sizes=\"(max-width: 723px) 100vw, 723px\" \/><\/p>\n<h3>The Demo Project<\/h3>\n<p>Let&#8217;s see how this can be done for our demo project named <strong>bringon. <\/strong>This is the same project we&#8217;ve been building in <a href=\"https:\/\/codefresh.io\/blog\/docker-jenkins-pipelines\" target=\"_blank\" rel=\"noopener\">part 1 <\/a> of this blog. It&#8217;s an example of a software build registry webservice written in Golang.\u00a0 If you study the source code of <a href=\"https:\/\/github.com\/codefreshdemo\/bringon\/blob\/master\/model.go\">model.go<\/a> you&#8217;ll see that it uses a library named <strong>buildinfo. <\/strong>The library is responsible for the definition and implementation of the <em><strong>BuildInfo<\/strong><\/em> data structure:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"go\">import (\r\n    \"time\"\r\n        \/\/import the buldinfo library\r\n    \"github.com\/otomato-gh\/buildinfo\"\r\n)\r\n\r\ntype Build struct {\r\n    Name      string    `json:\"name\"`\r\n    Completed bool      `json:\"completed\"`\r\n    TimeStamp time.Time `json:\"due\"`\r\n        \/\/use the BuildInfo struct\r\n    info      buildinfo.BuildInfo\r\n}<\/pre>\n<p>The code\u00a0 for this library resides in a separate github repositry and is brought in by the <a href=\"https:\/\/github.com\/golang\/dep\">dep<\/a> dependency manager as defined in <a href=\"https:\/\/github.com\/codefreshdemo\/bringon\/blob\/master\/Gopkg.toml\">Gopkg.toml<\/a>:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">[[constraint]]\r\n  version = \"0.1\"\r\n  name = \"github.com\/otomato-gh\/buildinfo\"<\/pre>\n<p>Therefore our flow for continuous integration of library changes with service code can be defined as follows:<\/p>\n<p><img class=\"alignnone wp-image-4498 size-full\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/lib-docker-flow.png\" alt=\"build a library in Jenkins -&gt; test with Docker on Codefresh\" width=\"721\" height=\"82\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/lib-docker-flow.png 721w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/lib-docker-flow-300x34.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/lib-docker-flow-628x71.png 628w\" sizes=\"(max-width: 721px) 100vw, 721px\" \/><\/p>\n<h3>Building a Library in Golang<\/h3>\n<p>In order to better explain the flow &#8211; let&#8217;s see what the <strong>buildinfo<\/strong> library does. (Not much at this stage ;))<\/p>\n<p>buildinfo source tree:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">.\r\n\u251c\u2500\u2500 Jenkinsfile\r\n\u251c\u2500\u2500 README.md\r\n\u251c\u2500\u2500 buildinfo.go\r\n\u251c\u2500\u2500 model.go\r\n\u2514\u2500\u2500 rate_test.go\r\n\r\n0 directories, 5 files<\/pre>\n<p>Basically there&#8217;s the file named <strong>model.go<\/strong> that defines the BuildInfo struct. And the main file <strong>buildinfo.go <\/strong>that implements a basic completeness rating routine for build information. Currently this function just goes over all the struct fields. If any of them are empty &#8211; the overall rating is lowered by their relative weight. There&#8217;s also a testing routine called\u00a0<strong>TestRate<\/strong> located in file <strong>rate_test.go<\/strong> that provides a unit test to check the rating accuracy.<\/p>\n<p>All this allows us to build and test our library using <em><strong>&#8216;go test&#8217;<\/strong><\/em>.<\/p>\n<p>Here&#8217;s what our Jenkins pipeline for the library looks like:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">pipeline {\r\n  agent {\r\n    node {\r\n      label 'golang'\r\n    }\r\n  }\r\n  stages {\r\n    stage('Build') {\r\n      steps {\r\n        sh 'go test'\r\n      }\r\n    }\r\n    stage('Push') {\r\n      steps {\r\n        withEnv([\"BUILD_NUMBER=${env.BUILD_NUMBER}\"]){\r\n            withCredentials([usernamePassword(credentialsId: '18887cf4-97dc-4c1f-90c6-6140f072cc6e', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {\r\n              sh(\"git tag -a v0.${BUILD_NUMBER} -m 'Jenkins tested'\")\r\n              sh('git push https:\/\/${GIT_USERNAME}:${GIT_PASSWORD}@github.com\/otomato-gh\/buildinfo.git v0.${BUILD_NUMBER}')\r\n            }\r\n        }\r\n      }\r\n    }\r\n    stage('Test with bringon') {\r\n      steps {\r\n        codefreshRun (cfPipeline: 'bringon', cfBranch: 'master', cfVars: [['Value' : \"${env.BUILD_NUMBER}\", 'Variable' : 'BUILD_NUMBER']] )\r\n      }\r\n    }\r\n  }\r\n}<\/pre>\n<h3>Jenkins Pipeline Explained<\/h3>\n<p>Let&#8217;s walk through the code.<\/p>\n<p>At first we tell Jenkins to get a node that has golang installed.<\/p>\n<p>Then we enter a pipeline stage named &#8216;<strong>Build<\/strong>&#8216; where we invoke the &#8216;<em><strong>go test<\/strong><\/em>&#8216; command to build and test our library.<\/p>\n<p>If tests are successfull\u00a0 &#8211; we continue to the <strong>Push<\/strong> stage which creates a new tag (marked with Jenkins build number) in the library github repo.<\/p>\n<p>Once we got our new version published\u00a0 &#8211; we go to the stage named\u00a0 <strong>&#8216;Test with bringon&#8217;.<\/strong>\u00a0 This is where we trigger a Codefresh pipeline for the bringon repo. Note we&#8217;re passing\u00a0 a map of <em><strong>cfVars<\/strong><\/em>. This holds\u00a0 Jenkins built-in BUILD_NUMBER variable as a parameter for Codefresh build.<\/p>\n<p>As a result &#8211; we can use this environment variable in the Codefresh pipeline. An example\u00a0 fo this is found in codefresh.yml of the <strong>bringon<\/strong> repository. Here&#8217;s a snippet:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\"> PushingToDockerRegistry:\r\n    title: Pushing to Docker Registry\r\n    type: push\r\n    candidate: '${{BuildingDockerImage}}'\r\n    tag: 'buildinfo_v0.${{BUILD_NUMBER}}'\r\n    registry: dockerhub<\/pre>\n<p>In this way we can tag the resulting docker image with the library version that it uses.<\/p>\n<h2>Testing With Codefresh<\/h2>\n<p>When integrating with Jenkins\u00a0 &#8211; you&#8217;re free to choose how to test your Docker images. And &#8211; two obvious options are:<\/p>\n<ol>\n<li>Making the tests part of Codefresh pipeline<\/li>\n<li>Bringing up a Codefresh environment (composition-based or Kubernetes-based) and then testing it externally\u00a0 &#8211; i.e. sending requests from Jenkins.<\/li>\n<\/ol>\n<p>We will provide more examples on how to test with Codefresh in the near future. For now\u00a0 &#8211; let&#8217;s see how to launch Codefresh composition-based ephemeral environments for your tests.<\/p>\n<h2>Launching a Composition Environment<\/h2>\n<p>Sometimes we don&#8217;t want to run a full pipeline. Rather &#8211;\u00a0 all we want to do is quickly bring up a docker-compose environment that we can then run our tests against.<\/p>\n<p>In Jenkins pipeline this can be done using the <strong>codefreshLaunch<\/strong> step as follows:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">stage('Launch Codefresh composition'){\r\n  steps {\r\n    codefreshLaunch cfComposition: 'bringon-mongo', cfVars: [[Value: 'true', Variable: 'DEBUG']]\r\n  }\r\n}<\/pre>\n<p>This will launch a composition that is defined in the following docker-compose.yml:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">version: \"3\"\r\n\r\nservices:\r\n  bringon:\r\n    image: otomato\/bringon:master\r\n    ports:\r\n      - 8091\r\n  mongo:\r\n    image: mongo\r\n    ports:\r\n      - 27017\r\n<\/pre>\n<p>Consequently we can use that environment for testing.<\/p>\n<p>As we already said &#8211; the upcoming plugin release will provide further Jenkins pipeline support. Expect advanced\u00a0 data retrieval and environment termination functionality.<\/p>\n<p>And it&#8217;s coming very soon &#8211; watch for updates.<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"4488\"\/>","protected":false},"excerpt":{"rendered":"<p>We&#8217;ve recently released version 1.5 of Codefresh plugin for Jenkins. The new release allows easy, seamless integration of docker-native ci\/cd pipelines with Jenkins workflows. In part 1 of this guide we showed how to integrate Codefresh with Jenkins legacy freestyle jobs. In today&#8217;s post we&#8217;ll see how to call Codefresh from Jenkins groovy-based pipelines. (Note: &hellip; <a href=\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/\">Read more<\/a><\/p>\n","protected":false},"author":9,"featured_media":4491,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[8],"tags":[13,14,15,362],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Docker CI\/CD with Jenkins and Codefresh Plugin v1.5 - part 2 | Codefresh<\/title>\n<meta name=\"description\" content=\"Integrate Jenkins with Codefresh for Docker-native flows in your groovy pipelines. Launch enterprise-ready containerized software testing environments.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Docker CI\/CD with Jenkins and Codefresh Plugin v1.5 - part 2\" \/>\n<meta property=\"og:description\" content=\"Integrate Jenkins with Codefresh for Docker-native flows in your groovy pipelines. Launch enterprise-ready containerized software testing environments.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2017-08-28T18:02:01+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-02-11T21:32:37+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/cf-jenkins.png\" \/>\n\t<meta property=\"og:image:width\" content=\"1181\" \/>\n\t<meta property=\"og:image:height\" content=\"439\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@antweiss\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Anton Weiss\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/cf-jenkins.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/cf-jenkins.png\",\"width\":1181,\"height\":439},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/#webpage\",\"url\":\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/\",\"name\":\"Docker CI\/CD with Jenkins and Codefresh Plugin v1.5 - part 2 | Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/#primaryimage\"},\"datePublished\":\"2017-08-28T18:02:01+00:00\",\"dateModified\":\"2022-02-11T21:32:37+00:00\",\"description\":\"Integrate Jenkins with Codefresh for Docker-native flows in your groovy pipelines. Launch enterprise-ready containerized software testing environments.\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Docker CI\/CD with Jenkins and Codefresh Plugin v1.5 &#8211; part 2\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/93d9834241a4b1b862a21e1d9a42a39f\"},\"headline\":\"Docker CI\/CD with Jenkins and Codefresh Plugin v1.5 &#8211; part 2\",\"datePublished\":\"2017-08-28T18:02:01+00:00\",\"dateModified\":\"2022-02-11T21:32:37+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/#webpage\"},\"wordCount\":807,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/cf-jenkins.png\",\"keywords\":[\"jenkins\",\"docker\",\"continuous integration\",\"golang\"],\"articleSection\":[\"Docker Tutorials\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/93d9834241a4b1b862a21e1d9a42a39f\",\"name\":\"Anton Weiss\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/74279e1c79e1997c40057ee2c54a6454?s=96&d=blank&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/74279e1c79e1997c40057ee2c54a6454?s=96&d=blank&r=g\",\"caption\":\"Anton Weiss\"},\"description\":\"Ant(on) Weiss is a DevOps Evangelist and Enabler. He's been architecting software delivery processes at large and small companies for the last 15 years. Today he's the CEO and Principal Consultant at Otomato. When not evangelising for Codefresh, he's deeply involved with technical training and public speaking.\",\"sameAs\":[\"http:\/\/antweiss.com\",\"https:\/\/twitter.com\/antweiss\"],\"url\":\"https:\/\/codefresh.io\/author\/anton\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Docker CI\/CD with Jenkins and Codefresh Plugin v1.5 - part 2 | Codefresh","description":"Integrate Jenkins with Codefresh for Docker-native flows in your groovy pipelines. Launch enterprise-ready containerized software testing environments.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/","og_locale":"en_US","og_type":"article","og_title":"Docker CI\/CD with Jenkins and Codefresh Plugin v1.5 - part 2","og_description":"Integrate Jenkins with Codefresh for Docker-native flows in your groovy pipelines. Launch enterprise-ready containerized software testing environments.","og_url":"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2017-08-28T18:02:01+00:00","article_modified_time":"2022-02-11T21:32:37+00:00","og_image":[{"width":1181,"height":439,"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/cf-jenkins.png","type":"image\/png"}],"twitter_card":"summary_large_image","twitter_creator":"@antweiss","twitter_site":"@codefresh","twitter_misc":{"Written by":"Anton Weiss","Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/cf-jenkins.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/cf-jenkins.png","width":1181,"height":439},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/#webpage","url":"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/","name":"Docker CI\/CD with Jenkins and Codefresh Plugin v1.5 - part 2 | Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/#primaryimage"},"datePublished":"2017-08-28T18:02:01+00:00","dateModified":"2022-02-11T21:32:37+00:00","description":"Integrate Jenkins with Codefresh for Docker-native flows in your groovy pipelines. Launch enterprise-ready containerized software testing environments.","breadcrumb":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Docker CI\/CD with Jenkins and Codefresh Plugin v1.5 &#8211; part 2"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/93d9834241a4b1b862a21e1d9a42a39f"},"headline":"Docker CI\/CD with Jenkins and Codefresh Plugin v1.5 &#8211; part 2","datePublished":"2017-08-28T18:02:01+00:00","dateModified":"2022-02-11T21:32:37+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/#webpage"},"wordCount":807,"commentCount":0,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/08\/cf-jenkins.png","keywords":["jenkins","docker","continuous integration","golang"],"articleSection":["Docker Tutorials"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/docker-tutorial\/docker-jenkins-codefresh-part-2\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/93d9834241a4b1b862a21e1d9a42a39f","name":"Anton Weiss","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/74279e1c79e1997c40057ee2c54a6454?s=96&d=blank&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/74279e1c79e1997c40057ee2c54a6454?s=96&d=blank&r=g","caption":"Anton Weiss"},"description":"Ant(on) Weiss is a DevOps Evangelist and Enabler. He's been architecting software delivery processes at large and small companies for the last 15 years. Today he's the CEO and Principal Consultant at Otomato. When not evangelising for Codefresh, he's deeply involved with technical training and public speaking.","sameAs":["http:\/\/antweiss.com","https:\/\/twitter.com\/antweiss"],"url":"https:\/\/codefresh.io\/author\/anton\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/4488"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/9"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=4488"}],"version-history":[{"count":1,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/4488\/revisions"}],"predecessor-version":[{"id":21483,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/4488\/revisions\/21483"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/4491"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=4488"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=4488"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=4488"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}