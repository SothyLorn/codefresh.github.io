{"id":4876,"date":"2017-10-04T14:57:35","date_gmt":"2017-10-04T14:57:35","guid":{"rendered":"http:\/\/codefresh.io\/?p=4876"},"modified":"2021-11-01T21:48:48","modified_gmt":"2021-11-01T21:48:48","slug":"chaos_testing_docker","status":"publish","type":"post","link":"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/","title":{"rendered":"Chaos Testing for Docker Containers"},"content":{"rendered":"<p>A few weeks ago I presented, <em>Chaos Testing for Docker Containers<\/em> at <a href=\"https:\/\/2017.container.camp\/uk\">ContainerCamp<\/a> in London. You can find the original recording and slides at the end of this post and I&#8217;ve made some small\u00a0edits to the text for readability and added some links for more context.\u00a0 <span style=\"font-weight: 400;\">Once you are done reading it, please go on and <\/span><strong><a href=\"https:\/\/g.codefresh.io\/signup?utm_source=Blog&amp;utm_medium=Post&amp;utm_campaign=ChaosT\">create a free Codefresh account<\/a><\/strong><span style=\"font-weight: 400;\">, and start building, testing and deploying Docker containers instantly. <\/span><span style=\"font-weight: 400;\">\u00a0<\/span><\/p>\n<h2>Intro<\/h2>\n<p>Software development is about building software services that support business needs. The more complex businesses processes we want to automate and integrate with, the more complex the software system we build. Solution complexity tends to grow over time and scope.<\/p>\n<p>The reasons for growing complexity can vary. Some systems handle too many concerns or require lots of integrations with external services and internal legacy systems. These systems are written and rewritten multiple times over several years by different people with different skills, trying to satisfy changing business requirements, using different technologies, following different technology and architecture trends.<\/p>\n<p>So, my point is that building software, that unintentionally becomes more and more complex over time, is easy. We&#8217;ve all done it before and probably do it now. Building a &#8220;good&#8221; software architecture for complex systems and preserving it&#8217;s &#8220;good&#8221; abilities for some period of time, is really hard.<\/p>\n<p>When you have too many &#8220;moving&#8221; parts, integrations and constantly changing requirements, while dealing with code changes, security upgrades, hardware modernization, multiple network communication channels and etc, it can become a &#8220;Mission Impossible&#8221; to avoid unexpected failures.<\/p>\n<h2>Stuff happens!<\/h2>\n<p>All systems fail from time to time. And your software system will fail too. Take this as a fact of life. There will always be something that can \u2014 and will \u2014 go wrong. No matter how hard we try, we can\u2019t build perfect software, nor can the companies we depend on. Even the most stable and respected services from companies, that practice CI\/CD, test-driven development (TDD\/BDD), have huge QA departments and well-defined release procedures, fail.<\/p>\n<p>Just a few examples from the last year outages:<\/p>\n<ol>\n<li><strong>IBM, January 26<\/strong><\/li>\n<\/ol>\n<p>&#8211; IBM&#8217;s cloud credibility took a hit at the start of the year when a management portal used by customers to access its Bluemix cloud infrastructure went down for several hours. While no underlying infrastructure actually failed, users were frustrated to find they couldn&#8217;t manage their applications, add or remove cloud resources powering workloads.<br \/>\n&#8211; IBM said the problem was intermittent and stemmed from a botched update to the interface.<br \/>\n2. <strong>GitLab, January 31<\/strong><br \/>\n&#8211; GitLab&#8217;s popular online code repository, GibLab.com, suffered an 18-hour service outage that ultimately couldn&#8217;t be fully remediated.<br \/>\n&#8211; The problem resulted when an employee removed a database directory from the wrong database server during maintenance procedures.<br \/>\n3. <strong>AWS, February 28<\/strong><br \/>\n&#8211; <a href=\"http:\/\/www.crn.com\/news\/cloud\/300083958\/aws-storage-outage-wreaking-havoc-on-web-services-providers.htm\">This was the outage<\/a> that shook the industry.<br \/>\n&#8211; An Amazon Web Services engineer trying to debug an S3 storage system in the provider&#8217;s Virginia data center accidentally typed a command incorrectly, and much of the Internet \u2013 including many enterprise platforms like Slack, Quora, and Trello \u2013 was down for four hours.<br \/>\n4. <strong>Microsoft Azure, March 16<\/strong><br \/>\n&#8211; Storage availability issues plagued Microsoft&#8217;s Azure public cloud for more than eight hours, mostly affecting customers in the Eastern U.S.<br \/>\n&#8211; Some users had trouble provisioning new storage or accessing existing resources in the region. A Microsoft engineering team later identified the culprit as a storage cluster that lost power and became unavailable.<\/p>\n<p>Visit <a href=\"http:\/\/outage.report\">Outage.Report<\/a> or <a href=\"http:\/\/downdetector.com\">Downdetector<\/a> to see a constantly updating long list of outages reported by end-users.<\/p>\n<h2>Chasing Software Quality<\/h2>\n<p>As software engineers, we want to be proud of software systems we are building. We want theses systems to be of high quality, without functional bugs, security holes, providing exceptional performance, resilient to unexpected failures, self-healing, always available and easy to maintain and modernize.<\/p>\n<p>Every new project starts with &#8220;high quality&#8221; picture in mind and no one wants to create crappy software, but very few of us (or none) are able to achieve and keep intact all good &#8220;abilities&#8221;. So, what we can do to improve overall system quality? Should we do more testing?<\/p>\n<p>I tend to say &#8220;Yes&#8221; &#8211; software testing is critical. But just running unit, functional and performance testing is not enough.<\/p>\n<p>Today, building complex distributed system is much easier with all the new amazing technology we have. Microservice Architecture is a real trend nowadays and miscellaneous container technologies support this architecture. It&#8217;s much easier to deploy, scale, link, monitor, update and manage distributed systems, composed from multiple &#8220;microservices&#8221; than it used to be.<\/p>\n<p>When we build distributed systems, we choose <strong>P<\/strong> (<em>Partition Tolerance<\/em>) from the <a href=\"https:\/\/en.wikipedia.org\/wiki\/CAP_theorem\">CAP theorem<\/a> and second to it either <strong>A<\/strong> (<em>Availability<\/em> &#8211; the most popular choice) or <strong>C<\/strong> (<em>Consistency<\/em>). So, we need to find a good approach for testing <strong>AP<\/strong> or <strong>CP<\/strong> systems.<\/p>\n<p>Traditional testing disciplines and tools do not provide a good answer to <em>how does your distributed system behave when unexpected stuff happens in production?<\/em>.<br \/>\nSure, you can learn from previous failures, after the fact, and you should definitely do it. But, learning from past experience should not be the only way to prepare for the future failures.<\/p>\n<p>Waiting for things to break in production is not an option. <em>But what\u2019s the alternative?<\/em><\/p>\n<h2>Chaos Engineering<\/h2>\n<p>The alternative is to break things on purpose. And Chaos Engineering is an approach for doing just that. The idea of Chaos Engineering is to <em>embrace the failure!<\/em><\/p>\n<p>Chaos Engineering for distributed software systems was originally popularized by Netflix.<\/p>\n<p>Chaos Engineering defines an empirical approach to resilience testing of distributed software systems. You are testing a system by conducting <em>chaos experiments<\/em>.<\/p>\n<p>Typical <em>chaos experiment<\/em>:<\/p>\n<ul>\n<li>define a <em>normal\/steady<\/em> state of the system (e.g. by monitoring a set of system and business metrics)<\/li>\n<li>pseudo-randomly inject faults (e.g. by terminating VMs, killing containers or changing network behavior)<\/li>\n<li>try to discover system weaknesses by deviation from expected or steady-state behavior<\/li>\n<\/ul>\n<p>The harder it is to disrupt the steady state, the more confidence we have in the behavior of the system.<\/p>\n<h2>Chaos Engineering tools<\/h2>\n<p>Of course, it&#8217;s possible to practice Chaos Engineering manually. But there are some nice tools to use.<\/p>\n<p>Netflix built a number <a href=\"https:\/\/github.com\/Netflix\/SimianArmy\/wiki\">useful tools<\/a> for practicing Chaos Engineering in a public cloud (AWS):<\/p>\n<ul>\n<li>Chaos Monkey &#8211; kill EC2, kill processes, burn CPU, fill disk, detach volumes, add network latency, etc<\/li>\n<li>Chaos Kong &#8211; remove whole AWS Regions<\/li>\n<\/ul>\n<p>These are very good tools, I encourage you to use them. But when I started my new container-based project (2 years ago), it felt like these tools provided the <em>wrong<\/em> granularity for <em>chaos<\/em> I wanted to create. I wanted to create <em>chaos<\/em> not only in real cluster, but also on single developer machine, to be able to debug and tune my application. I searched Google for <em>Chaos Monkey for Docker<\/em>, but did not find anything besides some basic Bash scripts.<\/p>\n<p>So, I decided to create my own tool. From day one, I&#8217;ve shared it with the community as an open source project. It&#8217;s a Chaos ~~Monkey~~ Warthog for Docker &#8211; <a href=\"https:\/\/github.com\/gaia-adm\/pumba\">Pumba<\/a><\/p>\n<h2>Pumba &#8211; Chaos Testing for Docker<\/h2>\n<p><em>What is Pumba(a)?<\/em><\/p>\n<p>Those of us who have kids or were kids in 90s should remember this character from Disney&#8217;s animated film <strong>The Lion King<\/strong>. In Swahili,\u00a0<strong>pumbaa<\/strong>\u00a0means &#8220;<em>to be foolish, silly, weak-minded, careless, negligent<\/em>&#8220;. I like the Swahili meaning. It matched perfectly with the tool I wanted to create.<\/p>\n<h3>What Pumba can do?<\/h3>\n<p>Pumba disturbs running Docker runtime environment by injecting different failures. Pumba can <code>kill<\/code>, <code>stop<\/code>, <code>remove<\/code> or <code>pause<\/code> Docker containers.<\/p>\n<p>Pumba can also do a network emulation, simulating different network failures, like: delay, packet loss (using different probability loss models), bandwidth rate limits and more. For network emulation, Pumba uses Linux kernel traffic control <code>tc<\/code> with\u00a0<code>netem<\/code>\u00a0queueing discipline, read more <a href=\"http:\/\/man7.org\/linux\/man-pages\/man8\/tc-netem.8.html\">here<\/a>. If <code>tc<\/code> is not available within target container, Pumba uses a <em>sidekick<\/em> container with <code>tc<\/code> on-board, attaching it to the target container network.<\/p>\n<p>You can pass list of containers to Pumba or just write a regular expression to select matching containers. If you do not specify containers, Pumba will try to disturb all running containers. Use <code>--random<\/code> option, to randomly select only one target containers from a provided list. It&#8217;s also possible to define a repeatable time interval and duration parameters to better control the amount of <em>chaos<\/em> you want to create.<\/p>\n<p>Pumba is available as a single binary file for Linux, MacOS and Windows, or as a Docker container.<\/p>\n<pre><code class=\"sh\"># Download binary from https:\/\/github.com\/gaia-adm\/pumba\/releases\ncurl https:\/\/github.com\/gaia-adm\/pumba\/releases\/download\/0.4.6\/pumba_linux_amd64 --output \/usr\/local\/bin\/pumba\nchmod +x \/usr\/local\/bin\/pumba &amp;&amp; pumba --help\n\n# Install with Homebrew (MacOS only)\nbrew install pumba &amp;&amp; pumba --help\n\n# Use Docker image\ndocker run gaiaadm\/pumba pumba --help\n\n<\/code><\/pre>\n<h3>Pumba commands examples<\/h3>\n<p>First of all, run <code>pumba --help<\/code> to get help about available commands and options and <code>pumba &amp;lt;command&amp;gt; --help<\/code> to get help for the specific command and sub-command.<\/p>\n<pre><code class=\"sh\"># pumba help\npumba --help\n\n# pumba kill help\npumba kill --help\n\n# pumba netem delay help\npumba netem delay --help\n<\/code><\/pre>\n<p>Killing randomly chosen Docker container from <code>^test<\/code> regex list.<\/p>\n<pre><code class=\"sh\"># on main pane\/screen, run 7 test containers that do nothing\nfor i in {0..7}; do docker run -d --rm --name test$i alpine tail -f \/dev\/null; done\n# run an additional container with 'skipme' name\ndocker run -d --rm --name skipme alpine tail -f \/dev\/null\n\n# run this command in another pane\/screen to see running docker containers\nwatch docker ps -a\n\n# go back to main pane\/screen and kill (once in 10s) random 'test' container, ignoring 'skipme'\npumba --random --interval 10s kill re2:^test\n# press Ctrl-C to stop Pumba at any time\n<\/code><\/pre>\n<p>Adding a <code>3000ms<\/code> (<code>+-50ms<\/code>) delay to the <em>engress<\/em> traffic for the <code>ping<\/code> container for <code>20<\/code> seconds, using <em>normal<\/em> distribution model.<\/p>\n<pre><code class=\"sh\"># run \"ping\" container on one screen\/pane\ndocker run -it --rm --name ping alpine ping 8.8.8.8\n\n# on second screen\/pane, run pumba netem delay command, disturbing \"ping\" container; sidekick a \"tc\" helper container\npumba netem --duration 20s --tc-image gaiadocker\/iproute2 delay --time 3000 jitter 50 --distribution normal ping\n# pumba will exit after 20s, or stop it with Ctrl-C\n<\/code><\/pre>\n<p>To demonstrate packet loss capability, we will need three screens\/panes. I will use <code>iperf<\/code> network bandwidth measurement <a href=\"https:\/\/iperf.fr\">tool<\/a>.<br \/>\nOn the first pane, run <em>server<\/em> docker container with <code>iperf<\/code> on-board and start there a UDP server. On the second pane, start <em>client<\/em> docker container with <code>iperf<\/code> and send datagrams to the <em>server<\/em> container. Then, on the third pane, run <code>pumba netem loss<\/code> command, adding a packet loss to the <em>client<\/em> container. Enjoy the chaos.<\/p>\n<pre><code class=\"sh\"># create docker network\ndocker network create -d bridge testnet\n\n# &amp;gt; Server Pane\n# run server container\ndocker run -it --name server --network testnet --rm alpine sh -c \"apk add --no-cache iperf; sh\"\n# shell inside server container: run a UDP Server listening on UDP port 5001\nsh$ iperf -s -u -i 1\n\n# &amp;gt; Client Pane\n# run client container\ndocker run -it --name client --network testnet --rm alpine sh -c \"apk add --no-cache iperf; sh\"\n# shell inside client container: send datagrams to the server -&amp;gt; see no packet loss\nsh$ iperf -c server -u\n\n# &amp;gt; Server Pane\n# see server receives datagrams without any packet loss\n\n# &amp;gt; Pumba Pane\n# inject 20% packet loss into client container, for 1m\npumba netem --duration 1m --tc-image gaiadocker\/iproute2 loss --percent 20 client\n\n# &amp;gt; Client Pane\n# shell inside client container: send datagrams to the server -&amp;gt; see ~20% packet loss\nsh$ iperf -c server -u\n\n<\/code><\/pre>\n<p><span style=\"font-weight: 400;\">Now, let\u2019s get you on-boarded, just <\/span><strong><a href=\"https:\/\/g.codefresh.io\/signup?utm_source=Blog&amp;utm_medium=Post&amp;utm_campaign=ChaosB\">create a free Codefresh account<\/a><\/strong><span style=\"font-weight: 400;\"> and start building, testing and deploying Docker images much faster!<\/span><\/p>\n<h2>Session and slides<\/h2>\n<h2>ContainerCamp UK 2017 session<\/h2>\n<p>&nbsp;<\/p>\n<p><a href=\"https:\/\/codefresh.io\/codefresh-signup?utm_source=Blog&amp;utm_medium=Post&amp;utm_campaign=BannerB\"><img class=\"size-full wp-image-5645 aligncenter\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/Pasted-image-at-2017_11_23-04_46-PM.png\" alt=\"\" width=\"728\" height=\"90\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/Pasted-image-at-2017_11_23-04_46-PM.png 728w, https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/Pasted-image-at-2017_11_23-04_46-PM-300x37.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/Pasted-image-at-2017_11_23-04_46-PM-628x78.png 628w\" sizes=\"(max-width: 728px) 100vw, 728px\" \/><\/a><\/p>\n<p><iframe title=\"Chaos Testing for Docker Containers - Alexei Ledenev (Codefresh)\" width=\"500\" height=\"281\" src=\"https:\/\/www.youtube.com\/embed\/68ZepHa5UVg?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe><\/p>\n<h3>Slides from above session<\/h3>\n<p><iframe title=\"Chaos Engineering for Docker\" src=\"https:\/\/www.slideshare.net\/slideshow\/embed_code\/key\/19z9NfMt0foBvs\" width=\"427\" height=\"356\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> <\/iframe> <\/p>\n<div style=\"margin-bottom:5px\"> <strong> <a href=\"https:\/\/www.slideshare.net\/alexLM\/chaos-engineering-for-docker\" title=\"Chaos Engineering for Docker\" target=\"_blank\">Chaos Engineering for Docker<\/a> <\/strong> from <strong><a href=\"https:\/\/www.slideshare.net\/alexLM\" target=\"_blank\">Alexei Ledenev<\/a><\/strong> <\/div>\n<hr \/>\n<p>Hope, you find this post useful. I look forward to your comments and any questions you have.<\/p>\n<p>&nbsp;<\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"4876\"\/>","protected":false},"excerpt":{"rendered":"<p>A few weeks ago I presented, Chaos Testing for Docker Containers at ContainerCamp in London. You can find the original recording and slides at the end of this post and I&#8217;ve made some small\u00a0edits to the text for readability and added some links for more context.\u00a0 Once you are done reading it, please go on &hellip; <a href=\"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/\">Read more<\/a><\/p>\n","protected":false},"author":28,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[8],"tags":[14,65,114,700,701,702,703],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Chaos Testing for Docker Containers | Codefresh<\/title>\n<meta name=\"description\" content=\"What follows is the text of my presentation, &quot;Chaos Testing for Docker Containers&quot; that I gave at ContainerCamp in London this year.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Chaos Testing for Docker Containers\" \/>\n<meta property=\"og:description\" content=\"What follows is the text of my presentation, &quot;Chaos Testing for Docker Containers&quot; that I gave at ContainerCamp in London this year.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2017-10-04T14:57:35+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-11-01T21:48:48+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/Pasted-image-at-2017_11_23-04_46-PM.png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@alexeiled\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Alexei Ledenev\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"10 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/Pasted-image-at-2017_11_23-04_46-PM.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/Pasted-image-at-2017_11_23-04_46-PM.png\",\"width\":728,\"height\":90},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/#webpage\",\"url\":\"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/\",\"name\":\"Chaos Testing for Docker Containers | Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/#primaryimage\"},\"datePublished\":\"2017-10-04T14:57:35+00:00\",\"dateModified\":\"2021-11-01T21:48:48+00:00\",\"description\":\"What follows is the text of my presentation, \\\"Chaos Testing for Docker Containers\\\" that I gave at ContainerCamp in London this year.\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Chaos Testing for Docker Containers\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/33798ced90c48c116c3a9a59ae74af50\"},\"headline\":\"Chaos Testing for Docker Containers\",\"datePublished\":\"2017-10-04T14:57:35+00:00\",\"dateModified\":\"2021-11-01T21:48:48+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/#webpage\"},\"wordCount\":1585,\"commentCount\":6,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/Pasted-image-at-2017_11_23-04_46-PM.png\",\"keywords\":[\"docker\",\"testing\",\"Chaos Testing\",\"pumba\",\"chaos monkey\",\"netem\",\"network emulation\"],\"articleSection\":[\"Docker Tutorials\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/33798ced90c48c116c3a9a59ae74af50\",\"name\":\"Alexei Ledenev\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/53d5ff05d62acd594ea97300543a62a5?s=96&d=blank&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/53d5ff05d62acd594ea97300543a62a5?s=96&d=blank&r=g\",\"caption\":\"Alexei Ledenev\"},\"description\":\"Alexei is an experienced software architect and HPE distinguished technologist. He currently works at Codefresh as the Chief Researcher, focusing lately on #docker, #golang and #aws. In his spare time, Alexei maintains a couple of Docker-centric open-source projects, writes tech blog posts, and enjoys traveling and playing with his kids. https:\/\/github.com\/gaia-adm\/pumba\",\"sameAs\":[\"https:\/\/medium.com\/@alexeiled\/\",\"https:\/\/twitter.com\/alexeiled\"],\"url\":\"https:\/\/codefresh.io\/author\/alexei\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Chaos Testing for Docker Containers | Codefresh","description":"What follows is the text of my presentation, \"Chaos Testing for Docker Containers\" that I gave at ContainerCamp in London this year.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/","og_locale":"en_US","og_type":"article","og_title":"Chaos Testing for Docker Containers","og_description":"What follows is the text of my presentation, \"Chaos Testing for Docker Containers\" that I gave at ContainerCamp in London this year.","og_url":"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2017-10-04T14:57:35+00:00","article_modified_time":"2021-11-01T21:48:48+00:00","og_image":[{"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/Pasted-image-at-2017_11_23-04_46-PM.png"}],"twitter_card":"summary_large_image","twitter_creator":"@alexeiled","twitter_site":"@codefresh","twitter_misc":{"Written by":"Alexei Ledenev","Est. reading time":"10 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/Pasted-image-at-2017_11_23-04_46-PM.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/Pasted-image-at-2017_11_23-04_46-PM.png","width":728,"height":90},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/#webpage","url":"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/","name":"Chaos Testing for Docker Containers | Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/#primaryimage"},"datePublished":"2017-10-04T14:57:35+00:00","dateModified":"2021-11-01T21:48:48+00:00","description":"What follows is the text of my presentation, \"Chaos Testing for Docker Containers\" that I gave at ContainerCamp in London this year.","breadcrumb":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Chaos Testing for Docker Containers"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/33798ced90c48c116c3a9a59ae74af50"},"headline":"Chaos Testing for Docker Containers","datePublished":"2017-10-04T14:57:35+00:00","dateModified":"2021-11-01T21:48:48+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/#webpage"},"wordCount":1585,"commentCount":6,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/Pasted-image-at-2017_11_23-04_46-PM.png","keywords":["docker","testing","Chaos Testing","pumba","chaos monkey","netem","network emulation"],"articleSection":["Docker Tutorials"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/docker-tutorial\/chaos_testing_docker\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/33798ced90c48c116c3a9a59ae74af50","name":"Alexei Ledenev","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/53d5ff05d62acd594ea97300543a62a5?s=96&d=blank&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/53d5ff05d62acd594ea97300543a62a5?s=96&d=blank&r=g","caption":"Alexei Ledenev"},"description":"Alexei is an experienced software architect and HPE distinguished technologist. He currently works at Codefresh as the Chief Researcher, focusing lately on #docker, #golang and #aws. In his spare time, Alexei maintains a couple of Docker-centric open-source projects, writes tech blog posts, and enjoys traveling and playing with his kids. https:\/\/github.com\/gaia-adm\/pumba","sameAs":["https:\/\/medium.com\/@alexeiled\/","https:\/\/twitter.com\/alexeiled"],"url":"https:\/\/codefresh.io\/author\/alexei\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/4876"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/28"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=4876"}],"version-history":[{"count":1,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/4876\/revisions"}],"predecessor-version":[{"id":20483,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/4876\/revisions\/20483"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=4876"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=4876"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=4876"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}