{"id":4907,"date":"2017-10-09T15:13:04","date_gmt":"2017-10-09T15:13:04","guid":{"rendered":"http:\/\/codefresh.io\/?p=4907"},"modified":"2022-03-01T17:22:12","modified_gmt":"2022-03-01T17:22:12","slug":"how-to-test-microservice-integration-with-pact","status":"publish","type":"post","link":"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/","title":{"rendered":"How to Test Microservice Integration with Pact"},"content":{"rendered":"<h2>The Challenge : Microservice Integration Testing<\/h2>\n<p>The move to microservices brings new challenges with regards to testing our systems. In theory each microservice should be able to operate in isolation. But in practice a service usually isn\u2019t worth much without its counterparts. On the other hand \u2013 bringing up the full system topology for testing just one service cancels out the benefits of modularity and encapsulation that microservices are expected to bring.<\/p>\n<p>The challenge here is verifying that integration with other services isn\u2019t broken. We want to do this as early as possible. And we don\u2019t want to to replicate the complex production environment for this. Traditionally this verification was the function of integration or so-called end-to-end tests. \u00a0But the fact is that the more complex our systems grow &#8211; \u00a0the less value end-to-end tests bring. The sheer amount of interdependencies leads to multiple false negatives and excessively long execution times. Effectively making such tests too expensive to manage and debug.<\/p>\n<p>There\u2019s even an accepted concept of a test pyramid (first described by Mike Cohn in his book \u2018Succeeding with Agile\u2019) which basically says that for optimal effect you should have much more low-level unit tests than high-level end-to-end tests.<\/p>\n<p>Psst, read this article and make sure<a href=\"https:\/\/codefresh.io\/codefresh-signup\/?utm_source=Blog&amp;utm_medium=Post&amp;utm_campaign=pactT\"> to check out Codefresh<\/a>, it\u2019s the best CI for Docker out there.<\/p>\n<figure id=\"attachment_4910\" aria-describedby=\"caption-attachment-4910\" style=\"width: 399px\" class=\"wp-caption aligncenter\"><img class=\"wp-image-4910\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/10\/CDC-testing-on-Codefresh-1024x768.png\" alt=\"\" width=\"399\" height=\"300\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/10\/CDC-testing-on-Codefresh.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/10\/CDC-testing-on-Codefresh-300x225.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/10\/CDC-testing-on-Codefresh-768x576.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/10\/CDC-testing-on-Codefresh-437x328.png 437w\" sizes=\"(max-width: 399px) 100vw, 399px\" \/><figcaption id=\"caption-attachment-4910\" class=\"wp-caption-text\">The Test Pyramid<\/figcaption><\/figure>\n<p>Unit tests are great! But with all the benefits they bring &#8211; they provide no value for testing integration with other services.<\/p>\n<p>So how do we allow each service team to iterate independently but still preserve the overall health of our system? How do we enable Continuous Delivery, small batch sizes and short feedback loops without breaking interdependent services on every other change?<\/p>\n<p>One of the possible answers is Consumer-Driven Contract (CDC) testing. This testing strategy is based on a service evolution pattern first defined more than a decade ago. And it\u2019s getting wider adoption now that distributed systems are becoming more and more commonplace.<\/p>\n<p>&nbsp;<\/p>\n<h2>Consumer-Driven Contracts:<\/h2>\n<p>I\u2019ll try to explain this in very basic terms. Consumer-Driven Contracts are all about service-oriented relationship between\u2026 well, services. What this means is that instead of a provider dictating what the interface and service level will be (while consumers try their best to adapt) &#8211; now the consumers lead the dance. Each consumer defines what it expects the provider to deliver and the provider has to do the checking. It\u2019s about shifting the responsibility for the integration to the providing side.<\/p>\n<p>Which leads to the following flow:<\/p>\n<p><img class=\"alignnone size-full wp-image-4911\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/10\/CDC-testing-on-Codefresh-2.png\" alt=\"\" width=\"774\" height=\"162\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/10\/CDC-testing-on-Codefresh-2.png 774w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/10\/CDC-testing-on-Codefresh-2-300x63.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/10\/CDC-testing-on-Codefresh-2-768x161.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/10\/CDC-testing-on-Codefresh-2-628x131.png 628w\" sizes=\"(max-width: 774px) 100vw, 774px\" \/><\/p>\n<p>In business terms this is usually described as \u2018putting the customer first\u2019 or \u2018listening to your customers\u2019. Because in order to provide great service we need to do what our customers expect and need. Not what we may assume the right thing to do is.<\/p>\n<p>When talking about evolving microservices &#8211; this becomes especially important in a large enterprise setting where each service may be developed by a separate team. Sometimes these teams may also reside in different geographical and temporal regions. This prevents the immediacy of communication and makes collaborative evolution of business functionality ever more challenging.<\/p>\n<h2>Contract Testing Frameworks<\/h2>\n<p>Consumer-driven contracts can of course be managed by investing in communication and collaboration between teams. And also by using structured serialization formats such as <i>protobuf<\/i>, <i>thrift<\/i> or <i>messagepack<\/i>. But to manage a defined flow &#8211; it\u2019s great to have a framework. Especially if it\u2019s an open-source one.<\/p>\n<p>And such frameworks have indeed emerged. The most prominent and actively developed ones are <strong>Pact<\/strong> and <strong>Spring Cloud Contract<\/strong>. The latter is only targeting the JVM-based projects. Pact, on the other hand was initially written for Ruby but has since been ported to quite a number of languages, including Java, Go, Python and Javascript. Which makes it a perfect choice for a complex, polyglot microservice system.<\/p>\n<p>Today we will see how to use Pact in order to define and verify the contract between 2 services. A consumer service written in Python. And a provider service written in Go. The testing will occur as a part of our CI\/CD process &#8211; right inside the Codefresh pipeline.<\/p>\n<h2>Pact<\/h2>\n<p>So, how does Pact work? Well, it all starts with the consumer.<\/p>\n<p>The developer of the consumer service writes a test. The test defines an interaction with a provider. This includes a state the provider should be in, the body of the request and the expected response. Based on this definition Pact creates and spins up a provider stub against which the test executes. The output of this test is one or more json files that look something like this:<\/p>\n<pre class=\"lang:js decode:true\" title=\"a pact file\">{\r\n  \"consumer\": {\r\n    \"name\": \"billy\"\r\n  },\r\n  \"provider\": {\r\n    \"name\": \"bobby\"\r\n  },\r\n  \"interactions\": [\r\n    {\r\n      \"description\": \"My test\",\r\n      \"providerState\": \"User billy exists\",\r\n      \"request\": {\r\n        \"method\": \"POST\",\r\n        \"path\": \"\/users\/login\",\r\n        \"headers\": {\r\n          \"Content-Type\": \"application\/json\",\r\n        },\r\n        \"body\": {\r\n          \"username\":\"billy\",\r\n          \"password\":\"issilly\"\r\n        }\r\n      },\r\n      \"response\": {\r\n        \"status\": 200,\r\n      }\r\n    },\r\n  ],\r\n  \"metadata\": {\r\n    \"pactSpecification\": {\r\n      \"version\": \"2.0.0\"\r\n    }\r\n  }\r\n}\r\n<\/pre>\n<p>These are the contracts, the pacts. They are now passed on to the provider service. This can be done by committing them to a shared git repo, by uploading to a shared file storage or by using a special Pact Broker application.<\/p>\n<p>Once the contract gets updated &#8211; the provider has to test if it still obeys it. It now runs its own verification tests against a real-life version of its service, using the shared pact file. If all the interactions go as expected and all the tests succeed &#8211; we\u2019re good to go. \u00a0If not &#8211; the developers of the provider should notify the developers of the consumer. Then, together they can analyze what led to contract breach.<\/p>\n<h2>Our example:<\/h2>\n<p>We will be testing the integration of 2 small services.<\/p>\n<p>The <i>provider<\/i> is the same service we\u2019ve used in our <a href=\"http:\/\/codefresh.io\/blog\/docker-jenkins-pipelines\/\">Jenkins plugin example<\/a>. It\u2019s called <b>\u2018bringon\u2019<\/b>, is written in Go and is a mongoDB-backed registry of software build information.<\/p>\n<p>Our <i>consumer<\/i> will be a tiny python-based client that currently knows only how to fetch build information by build number from the <b>bringon<\/b> service.<\/p>\n<p>As consumer comes first in CDC &#8211; we\u2019ll start with it.<\/p>\n<p>The whole code of the consumer currently consists of one client.py file that has 2 functions in it. We\u2019re only concerned with the function called \u2018build\u2019 &#8211; as this is the functionality we will be testing.<\/p>\n<p>&nbsp;<\/p>\n<pre class=\"lang:python decode:true\">import requests\r\n\r\n\u2026\r\n\r\ndef getbuild(host, port, buildnum):\r\n    \"\"\"Fetch a build by number .\"\"\"\r\n    uri = 'http:\/\/' + host + ':' + port + '\/builds\/' + str(buildnum)\r\n    return requests.get(uri).json()\r\n<\/pre>\n<p>&nbsp;<\/p>\n<p>In order to generate a pact for it &#8211; we created a test file build_test.py which looks like this:<\/p>\n<pre class=\"lang:python decode:true\" title=\"pact test in Python\">import atexit\r\nimport unittest\r\nimport client\r\n\r\nfrom pact import Consumer, Provider\r\n\r\npact = Consumer('buildReader').has_pact_with(Provider('bringon'))\r\npact.start_service()\r\natexit.register(pact.stop_service)\r\n\r\nclass GetBuildInfoContract(unittest.TestCase):\r\n  def test_get_build(self):\r\n    true = True\r\n    expected = {\r\n      u'name':u'#3455',\r\n      u'completed': true, #boolean\r\n      u'info':{\r\n        u'coverage':30,\r\n        u'apiversion':0.1,\r\n        u'swaggerlink':u'http:\/\/swagger',\r\n        u'buildtime':230}\r\n    }\r\n\r\n    (pact\r\n     .given('build 3455 exists')\r\n     .upon_receiving('a request for build 3455')\r\n     .with_request('get', '\/builds\/3455')\r\n     .will_respond_with(200, body=expected))\r\n\r\n    with pact:\r\n      result = client.build(3455)\r\n\r\n    self.assertEqual(result, expected)\r\n<\/pre>\n<p>It\u2019s pretty straightforward &#8211; we\u2019re spinning up a mock service, defining an expected http response code and body, and then calling the <i>client.build()<\/i> routine to make sure the interaction occurs as expected.<\/p>\n<p>If all goes well &#8211; a pact file named <em><strong>buildreader-bringon.json<\/strong><\/em> gets written in our working directory.<\/p>\n<p>Now we can share this file with the <b>bringon<\/b> developers so they can test the pact against their service.<\/p>\n<p>This can be done with the help of <em>pact-go<\/em> &#8211; the Golang port of the framework. The test would look something like this:<\/p>\n<pre class=\"lang:go decode:true\" title=\"Pact provider verification for golang with pact-go \">func TestPact(t *testing.T) {\r\n    go startInstrumentedBringon()\r\n    pact := createPact()\r\n    \/\/ Verify the Provider with local Pact Files\r\n    log.Println(\"Start verify \", []string{filepath.ToSlash(fmt.Sprintf(\"%s\/buildreader-bringon.json\", pactDir))},\r\n        fmt.Sprintf(\"http:\/\/localhost:%d\/setup\", port), fmt.Sprintf(\"http:\/\/localhost:%d\", port), fmt.Sprintf(\"%s\/buildReader-bringon.json\", pactDir))\r\n    err := pact.VerifyProvider(types.VerifyRequest{\r\n        ProviderBaseURL:        fmt.Sprintf(\"http:\/\/localhost:%d\", port),\r\n        PactURLs:               []string{filepath.ToSlash(fmt.Sprintf(\"%s\/buildReader-bringon.json\", pactDir))},\r\n        ProviderStatesSetupURL: fmt.Sprintf(\"http:\/\/localhost:%d\/setup\", port),\r\n    })\r\n\r\n    if err != nil {\r\n        t.Fatal(\"Error:\", err)\r\n    }\r\n\r\n}\r\n<\/pre>\n<p>&nbsp;<\/p>\n<p>Note this requires quite a bit more work. We need to implement the <em>startInstrumentedBringon()<\/em> function which starts our service with an additional &#8216;<b>\/setup&#8217; <\/b>endpoint for defining the service state. In our case this will be used for creating a build entry which fits our consumer\u2019s expectations. And we\u2019ll also need to create a Pact client object that takes care of verifying all the interactions. Like this:<\/p>\n<pre class=\"lang:go decode:true\" title=\"A Pact client for golang\">func createPact() dsl.Pact {\r\n    \/\/ Create Pact connecting to local Daemon\r\n    log.Println(\"Creating pact\")\r\n    return dsl.Pact{\r\n        Consumer: \"buildreader\",\r\n        Provider: \"bringon\",\r\n        LogDir:   logDir,\r\n        PactDir:  pactDir,\r\n    }\r\n}\r\n<\/pre>\n<p>One downside of using pact-go in its current form is it requires you to run a daemon in the background. The daemon takes care of service initiation, shutdown and pact verification.<\/p>\n<p>Not really a good fit for running one-off ephemeral processes inside containers.<\/p>\n<p>So if all we want to do is test the pacts against our service &#8211; we can instead use the lightweight <strong>pact-provider-verifier<\/strong> utility that comes packed with pact-go.<\/p>\n<p>Like this:<\/p>\n<pre class=\"lang:sh decode:true\">pact-provider-verifier --pact-urls &lt;path_to&gt;\/buildreader-bringon.json --provider-base-url http:\/\/localhost:8091 --provider-states-setup-url http:\/\/localhost:8091\/setup<\/pre>\n<p>&nbsp;<\/p>\n<p>Please note that in this case we\u2019ll have to implement and build the <strong>\u2018\/setup<\/strong>\u2019 endpoint as a part of our service. Which can be a good idea if we want to make our service ultimately testable.<\/p>\n<p>The code for both services can be found on our Github:<\/p>\n<p style=\"padding-left: 30px;\"><b>bringon<\/b> (or The Provider) :<\/p>\n<p style=\"padding-left: 30px;\"><a href=\"https:\/\/github.com\/codefreshdemo\/bringon\">https:\/\/github.com\/codefreshdemo\/bringon<\/a><\/p>\n<p style=\"padding-left: 30px;\"><b>buildreader <\/b>(or The Consumer):<\/p>\n<p style=\"padding-left: 30px;\"><a href=\"https:\/\/github.com\/antweiss\/cdc-pact-demo\">https:\/\/github.com\/antweiss\/cdc-pact-demo<\/a><\/p>\n<p style=\"padding-left: 30px;\"><b>Pact<\/b> sources and examples are here:<\/p>\n<p style=\"padding-left: 30px;\"><a href=\"https:\/\/github.com\/pact-foundation\">https:\/\/github.com\/pact-foundation<\/a><\/p>\n<p>In the next installment of this blog we will show how to run the contract test as a part of your <strong>Codefresh pipeline<\/strong>.<\/p>\n<p>And what\u2019s your favorite strategy for testing <strong>microservice integration<\/strong>?<\/p>\n<p><span style=\"font-weight: 400;\">New to Codefresh? <\/span><strong><a href=\"https:\/\/codefresh.io\/request-a-demo\/\">Schedule a FREE onboarding and start making pipelines fast<\/a>.<\/strong><span style=\"font-weight: 400;\"> and start building, testing and deploying Docker images faster than ever.<\/span><\/p>\n<p>&nbsp;<\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"4907\"\/>","protected":false},"excerpt":{"rendered":"<p>The Challenge : Microservice Integration Testing The move to microservices brings new challenges with regards to testing our systems. In theory each microservice should be able to operate in isolation. But in practice a service usually isn\u2019t worth much without its counterparts. On the other hand \u2013 bringing up the full system topology for testing &hellip; <a href=\"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/\">Read more<\/a><\/p>\n","protected":false},"author":9,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[8],"tags":[55,64,362,738,739,740],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>How to Test Microservice Integration with Pact | Codefresh<\/title>\n<meta name=\"description\" content=\"How to test microservice integration with contract-driven testing using the Pact framework.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"How to Test Microservice Integration with Pact\" \/>\n<meta property=\"og:description\" content=\"How to test microservice integration with contract-driven testing using the Pact framework.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2017-10-09T15:13:04+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-03-01T17:22:12+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/10\/CDC-testing-on-Codefresh-1024x768.png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@antweiss\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Anton Weiss\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"8 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/10\/CDC-testing-on-Codefresh.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/10\/CDC-testing-on-Codefresh.png\",\"width\":1024,\"height\":768},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/#webpage\",\"url\":\"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/\",\"name\":\"How to Test Microservice Integration with Pact | Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/#primaryimage\"},\"datePublished\":\"2017-10-09T15:13:04+00:00\",\"dateModified\":\"2022-03-01T17:22:12+00:00\",\"description\":\"How to test microservice integration with contract-driven testing using the Pact framework.\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"How to Test Microservice Integration with Pact\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/93d9834241a4b1b862a21e1d9a42a39f\"},\"headline\":\"How to Test Microservice Integration with Pact\",\"datePublished\":\"2017-10-09T15:13:04+00:00\",\"dateModified\":\"2022-03-01T17:22:12+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/#webpage\"},\"wordCount\":1412,\"commentCount\":13,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/10\/CDC-testing-on-Codefresh-1024x768.png\",\"keywords\":[\"integration testing\",\"microservices\",\"golang\",\"consumer-driven contracts\",\"pact\",\"python\"],\"articleSection\":[\"Docker Tutorials\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/93d9834241a4b1b862a21e1d9a42a39f\",\"name\":\"Anton Weiss\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/74279e1c79e1997c40057ee2c54a6454?s=96&d=blank&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/74279e1c79e1997c40057ee2c54a6454?s=96&d=blank&r=g\",\"caption\":\"Anton Weiss\"},\"description\":\"Ant(on) Weiss is a DevOps Evangelist and Enabler. He's been architecting software delivery processes at large and small companies for the last 15 years. Today he's the CEO and Principal Consultant at Otomato. When not evangelising for Codefresh, he's deeply involved with technical training and public speaking.\",\"sameAs\":[\"http:\/\/antweiss.com\",\"https:\/\/twitter.com\/antweiss\"],\"url\":\"https:\/\/codefresh.io\/author\/anton\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"How to Test Microservice Integration with Pact | Codefresh","description":"How to test microservice integration with contract-driven testing using the Pact framework.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/","og_locale":"en_US","og_type":"article","og_title":"How to Test Microservice Integration with Pact","og_description":"How to test microservice integration with contract-driven testing using the Pact framework.","og_url":"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2017-10-09T15:13:04+00:00","article_modified_time":"2022-03-01T17:22:12+00:00","og_image":[{"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/10\/CDC-testing-on-Codefresh-1024x768.png"}],"twitter_card":"summary_large_image","twitter_creator":"@antweiss","twitter_site":"@codefresh","twitter_misc":{"Written by":"Anton Weiss","Est. reading time":"8 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/10\/CDC-testing-on-Codefresh.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/10\/CDC-testing-on-Codefresh.png","width":1024,"height":768},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/#webpage","url":"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/","name":"How to Test Microservice Integration with Pact | Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/#primaryimage"},"datePublished":"2017-10-09T15:13:04+00:00","dateModified":"2022-03-01T17:22:12+00:00","description":"How to test microservice integration with contract-driven testing using the Pact framework.","breadcrumb":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"How to Test Microservice Integration with Pact"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/93d9834241a4b1b862a21e1d9a42a39f"},"headline":"How to Test Microservice Integration with Pact","datePublished":"2017-10-09T15:13:04+00:00","dateModified":"2022-03-01T17:22:12+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/#webpage"},"wordCount":1412,"commentCount":13,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/10\/CDC-testing-on-Codefresh-1024x768.png","keywords":["integration testing","microservices","golang","consumer-driven contracts","pact","python"],"articleSection":["Docker Tutorials"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/docker-tutorial\/how-to-test-microservice-integration-with-pact\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/93d9834241a4b1b862a21e1d9a42a39f","name":"Anton Weiss","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/74279e1c79e1997c40057ee2c54a6454?s=96&d=blank&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/74279e1c79e1997c40057ee2c54a6454?s=96&d=blank&r=g","caption":"Anton Weiss"},"description":"Ant(on) Weiss is a DevOps Evangelist and Enabler. He's been architecting software delivery processes at large and small companies for the last 15 years. Today he's the CEO and Principal Consultant at Otomato. When not evangelising for Codefresh, he's deeply involved with technical training and public speaking.","sameAs":["http:\/\/antweiss.com","https:\/\/twitter.com\/antweiss"],"url":"https:\/\/codefresh.io\/author\/anton\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/4907"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/9"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=4907"}],"version-history":[{"count":2,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/4907\/revisions"}],"predecessor-version":[{"id":21744,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/4907\/revisions\/21744"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=4907"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=4907"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=4907"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}