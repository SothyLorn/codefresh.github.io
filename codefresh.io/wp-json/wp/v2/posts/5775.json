{"id":5775,"date":"2017-12-29T19:31:43","date_gmt":"2017-12-29T19:31:43","guid":{"rendered":"https:\/\/codefresh.io\/?post_type=kubernetesguides&#038;p=5775"},"modified":"2022-03-01T17:41:47","modified_gmt":"2022-03-01T17:41:47","slug":"deploying-openfaas-kubernetes-using-codefresh","status":"publish","type":"post","link":"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/","title":{"rendered":"Deploying OpenFaaS on Kubernetes Using Codefresh"},"content":{"rendered":"<p>OpenFaas is a framework for building Serverless functions on top of containers. If you want to take advantage of the new functions and programming style, but still benefit from the robustness of containers for shipping and managing your code in production, then OpenFass combines the best of these 2 worlds. OpenFass is available on GitHub: <a href=\"https:\/\/github.com\/openfaas\/faas\">https:\/\/github.com\/openfaas\/faas<\/a> .<\/p>\n<p>In this blog post, we will explore using OpenFaaS together with Codefresh. Codefresh has native integration with Kubernetes, and is the best way to continuously deploy code to Kubernetes.<\/p>\n<h2>Prerequisites<\/h2>\n<p>Before we begin, let\u2019s make sure you are set up with the basics:<\/p>\n<ul>\n<li>You have a functioning Kubernetes cluster. We have a blog post on setting up a cluster here: <a href=\"https:\/\/docs.codefresh.io\/v1.0\/docs\/adding-non-gke-kubernetes-cluster\">https:\/\/docs.codefresh.io\/v1.0\/docs\/adding-non-gke-kubernetes-cluster<\/a><\/li>\n<li>You have a Codefresh account. Codefresh is free to sign at <a href=\"https:\/\/g.codefresh.io\/signup\">https:\/\/g.codefresh.io\/signup<\/a> .<\/li>\n<li>Your Codefresh account is configured to connect with your Kubernetes cluster. This is easy to set up as described here:<a href=\"https:\/\/docs.codefresh.io\/v1.0\/docs\/adding-non-gke-kubernetes-cluster\"> Adding a Kubernetes cluster to Codefresh<\/a>.<\/li>\n<\/ul>\n<h2>Setup OpenFaaS on Kubernetes<\/h2>\n<p>Follow the documentation to install.<\/p>\n<ul>\n<li><a href=\"https:\/\/github.com\/openfaas\/faas-netes\/blob\/master\/HELM.md#deploy-openfaas-via-helm\">Install using Helm<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/openfaas\/faas-netes\/blob\/master\/HELM.md#deploy-openfaas-via-helm\">Install using Kubectl apply<\/a><\/li>\n<\/ul>\n<p>We can view the Kubernetes resources right in Codefresh under the Kubernetes tab on your Codefresh home page. Codefresh provides an aggregative Kubernetes dashboard that shows Kubernetes entities in a user-friendly, service-oriented way. In this view, you can see that everything is successfully created and is in a healthy state. You can see I&#8217;ve deployed using the two namespace model using Helm.<\/p>\n<p>&nbsp;<\/p>\n<p>Next, let\u2019s go the the OpenFaaS dashboard: navigate to the node where the API Gateway is deployed, and access the UI with the port defined in the service. The default port is 31112. At this point you should clone the faas-cli and deploy the sample functions, so people can at least try one function after all the investment so far.<\/p>\n<h2>Building with Codefresh<\/h2>\n<p>Next, let\u2019s create our function. There are many ways to accomplish this, but all you need to do is create a Docker container that can respond to a REST call. For this tutorial, we created a very simple Python script that accepts a string as a payload and returns a sentence along with that string. This is then deployed in a Docker container.<\/p>\n<p>There is a command line tool used by the OpenFaaS community to build functions into Docker containers. To use this tool, follow the <a href=\"https:\/\/github.com\/openfaas\/faas-cli\">instructions here<\/a>. This is the method we used for this guide.<\/p>\n<p>At this stage you should have created a GitHub repository, with a Dockerfile and function folder. The repo we will use in this guide is located here for your reference: <a href=\"https:\/\/github.com\/badamsbb\/sample-func\">https:\/\/github.com\/badamsbb\/sample-func<\/a> .<\/p>\n<h3>Add your Function to Codefresh<\/h3>\n<p>Once you&#8217;ve uploaded your repository to GitHub:<\/p>\n<ol>\n<li>Go to Codefresh (<a href=\"http:\/\/g.codefresh.io\">http:\/\/g.codefresh.io<\/a>), and select Create Build.<\/li>\n<li>Select the repository that contains your function code and continue.<\/li>\n<li>The repo I used for this process is called \u201csample-func\u201d.<\/li>\n<li>Select your repository, and click &#8220;NEXT.&#8221;<\/li>\n<li>We already have a Dockerfile in our repo so we&#8217;ll use that Dockerfile to run our build in Codefresh.<\/li>\n<li>After selecting the Dockerfile-based build, Codefresh will show you the execution command it will use to build your container. For this example, we need to set the build context to the \u201chello-python\u201d folder, and the image name to our sample image. Because we are using the internal Codefresh registry, our image name must use the following format: &lt;username&gt;\/&lt;image&gt;:&lt;tag&gt;.<\/li>\n<li>The next step allows us to review the Dockerfile, accept that, and select \u201cCreate\u201d to finalize your pipeline.<\/li>\n<li>Selecting Build will immediately build this image, you can go ahead and do so.<\/li>\n<\/ol>\n<h2>Deploying with Codefresh<\/h2>\n<h3>Link Codefresh Registry<\/h3>\n<p>Before we get to the Codefresh deployment, there is one other link we must make between our Kubernetes cluster and our Codefresh platform. To do that, perform the following steps:<\/p>\n<p>We need to give Kubernetes access to our internal Codefresh registry. We can do that by first creating access credentials from within our dashboard.<\/p>\n<p>Follow the instructions<a href=\"https:\/\/docs.codefresh.io\/v1.0\/docs\/codefresh-registry\"> here to generate an API token<\/a>, then use the following kubectl command to create a docker-registry secret within your Kubernetes cluster.<\/p>\n<pre class=\"lang:default decode:true\">kubectl create secret docker-registry regsecret \\\r\n--docker-server=r.cfcr.io \\\r\n--docker-username=&lt;codefresh-user&gt; \\\r\n--docker-password=&lt;api-token&gt; \\\r\n--docker-email=&lt;codefresh-email&gt;<\/pre>\n<p>Run this command where you previously installed the kubectl binary.<\/p>\n<p>Replace the\u00a0<span class=\"lang:default decode:true crayon-inline \">codefresh-user<\/span>\u00a0, <span class=\"lang:default decode:true crayon-inline \">api-token<\/span>\u00a0, and <span class=\"lang:default decode:true crayon-inline \">codefresh-email<\/span>\u00a0 with your own values.<\/p>\n<p>Remember what you name this secret, we&#8217;ll need it in the configuration of our deployment file.<\/p>\n<h2>Deployment file<\/h2>\n<p>The ultimate goal of this pipeline is to build and deploy a service to Kubernetes, that makes available a function in OpenFaaS.<\/p>\n<p>A YAML file called <span class=\"lang:default decode:true crayon-inline \">deployment.yml<\/span>\u00a0 is contained within this repo. This file contains the Kubernetes spec needed to create the function within our cluster. I&#8217;ve posted it below.<\/p>\n<p>Note: Pay close attention to the labels on the objects; they tell the OpenFaaS framework to register this service as an available function. The \u201cimagePullSecret\u201d is the value from the previous step. It allows any Pods created here to access our private Codefresh registry and pull the image. This image is named with the same name we gave it in the Build step in Codefresh.<\/p>\n<pre class=\"lang:default decode:true\">kind: Deployment\r\napiVersion: extensions\/v1beta1\r\nmetadata: null\r\nname: hello-python\r\nnamespace: default\r\nlabels: null\r\nfaas_function: hello-python\r\nspec: null\r\nreplicas: 1\r\nselector: null\r\nmatchLabels: null\r\ntemplate: null\r\ncontainers:\r\n  -\r\n    name: hello-python\r\nimage: r.cfcr.io\/badamsbb\/hello-python\r\nports:\r\n  -\r\n    containerPort: 8080\r\nprotocol: TCP\r\nenv:\r\n  -\r\n    name: fprocess\r\nvalue: 'python index.py'\r\nimagePullPolicy: IfNotPresent\r\nimagePullSecrets:\r\n  -\r\n    name: regsecret\r\nrestartPolicy: Always\r\n<\/pre>\n<h2>Deployment Step<\/h2>\n<p>To configure your build pipeline to deploy to your Kubernetes cluster, follow the steps below:<\/p>\n<ol>\n<li>Navigate to your repositories in Codefresh and select your function repository.<\/li>\n<li>Choose the first header option, Pipelines.<\/li>\n<li>Scroll down to the Deploy Script section, and choose Kubernetes.<\/li>\n<li>Select your cluster from the drop-down and fill in the required values.<\/li>\n<li>Select Kubernetes Deployment File in Repository, and enter the name of the deployment file to be used. In our case, it is simply <span class=\"lang:default decode:true crayon-inline \">deployment.yml<\/span>\u00a0.<\/li>\n<li>Scroll down, save the changes, and build.<\/li>\n<li>You&#8217;ll be able to see the build running on the Builds tab. Follow along if you&#8217;d like. You can walk through the steps it takes to build our container according to the Dockerfile, push to its internal repo, then deploy to the linked Kubernetes cluster using the <span class=\"lang:default decode:true crayon-inline \">deployment.yml<\/span>\u00a0 file.<\/li>\n<li>Once that&#8217;s finished, there&#8217;s one last step to take. We need to expose the service we&#8217;ve created in order for OpenFaaS to expose it as a function. This last step is performed by a simple <span class=\"lang:default decode:true crayon-inline \">kubectl<\/span>\u00a0 command:<\/li>\n<\/ol>\n<pre class=\"lang:default decode:true \">kubectl expose deployment hello-python<\/pre>\n<p>Once that is run, take a look at the list of services in your Kubernetes cluster, you&#8217;ll see your deployed function.<\/p>\n<p>If you navigate to your OpenFaaS dashboard, you should be able to see and interact with your function.<\/p>\n<h2>Summary<\/h2>\n<p>And that&#8217;s it! We learned how to easily deploy OpenFaaS on Kubernetes, and then how to deploy new functions to your OpenFaaS instance using Codefresh. Phew! Normally this would take a lot of work, but Codefresh makes this entire process very easy.<\/p>\n<p>New to Codefresh? <a href=\"https:\/\/codefresh.io\/codefresh-signup\/?utm_source=Blog&amp;utm_medium=Post&amp;utm_campaign=DepB\">Create Your Free Account Today!<\/a><\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"5775\"\/>","protected":false},"excerpt":{"rendered":"<p>OpenFaas is a framework for building Serverless functions on top of containers. If you want to take advantage of the new functions and programming style, but still benefit from the robustness of containers for shipping and managing your code in production, then OpenFass combines the best of these 2 worlds. OpenFass is available on GitHub: &hellip; <a href=\"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/\">Read more<\/a><\/p>\n","protected":false},"author":27,"featured_media":3057,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[1657],"tags":[44,1229,1230],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Deploying OpenFaaS on Kubernetes Using Codefresh | Codefresh<\/title>\n<meta name=\"description\" content=\"If you want to take advantage of the new functions and programming style, but still benefit from the robustness of containers for shipping and managing ...\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Deploying OpenFaaS on Kubernetes Using Codefresh\" \/>\n<meta property=\"og:description\" content=\"If you want to take advantage of the new functions and programming style, but still benefit from the robustness of containers for shipping and managing ...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2017-12-29T19:31:43+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-03-01T17:41:47+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/deploy.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"387\" \/>\n\t<meta property=\"og:image:height\" content=\"300\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@todaywasawesome\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Dan Garfield\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"6 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/deploy.jpg\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/deploy.jpg\",\"width\":387,\"height\":300},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/#webpage\",\"url\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/\",\"name\":\"Deploying OpenFaaS on Kubernetes Using Codefresh | Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/#primaryimage\"},\"datePublished\":\"2017-12-29T19:31:43+00:00\",\"dateModified\":\"2022-03-01T17:41:47+00:00\",\"description\":\"If you want to take advantage of the new functions and programming style, but still benefit from the robustness of containers for shipping and managing ...\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Deploying OpenFaaS on Kubernetes Using Codefresh\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/17aca6389be0f81b999f1b138a0b44a4\"},\"headline\":\"Deploying OpenFaaS on Kubernetes Using Codefresh\",\"datePublished\":\"2017-12-29T19:31:43+00:00\",\"dateModified\":\"2022-03-01T17:41:47+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/#webpage\"},\"wordCount\":1119,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/deploy.jpg\",\"keywords\":[\"Kubernetes\",\"open faas\",\"faas\"],\"articleSection\":[\"Kubernetes Tutorials\"],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/17aca6389be0f81b999f1b138a0b44a4\",\"name\":\"Dan Garfield\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/d4a38809809980ed49dc7e696a8e3938?s=96&d=blank&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/d4a38809809980ed49dc7e696a8e3938?s=96&d=blank&r=g\",\"caption\":\"Dan Garfield\"},\"description\":\"Dan is the Co-Founder and Chief Open Source Officer at Codefresh. His work in open source includes being an Argo Maintainer, and co-chair of the GitOps Working Group. As a technology leader with a background in full-stack engineering, evangelism, and communications, he led Codefresh's go-to-market strategy and now leads open source strategy. You can follow him at twitter.com\/todaywasawesome\",\"sameAs\":[\"https:\/\/twitter.com\/todaywasawesome\"],\"url\":\"https:\/\/codefresh.io\/author\/dang\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Deploying OpenFaaS on Kubernetes Using Codefresh | Codefresh","description":"If you want to take advantage of the new functions and programming style, but still benefit from the robustness of containers for shipping and managing ...","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/","og_locale":"en_US","og_type":"article","og_title":"Deploying OpenFaaS on Kubernetes Using Codefresh","og_description":"If you want to take advantage of the new functions and programming style, but still benefit from the robustness of containers for shipping and managing ...","og_url":"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2017-12-29T19:31:43+00:00","article_modified_time":"2022-03-01T17:41:47+00:00","og_image":[{"width":387,"height":300,"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/deploy.jpg","type":"image\/jpeg"}],"twitter_card":"summary_large_image","twitter_creator":"@todaywasawesome","twitter_site":"@codefresh","twitter_misc":{"Written by":"Dan Garfield","Est. reading time":"6 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/deploy.jpg","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/deploy.jpg","width":387,"height":300},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/#webpage","url":"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/","name":"Deploying OpenFaaS on Kubernetes Using Codefresh | Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/#primaryimage"},"datePublished":"2017-12-29T19:31:43+00:00","dateModified":"2022-03-01T17:41:47+00:00","description":"If you want to take advantage of the new functions and programming style, but still benefit from the robustness of containers for shipping and managing ...","breadcrumb":{"@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Deploying OpenFaaS on Kubernetes Using Codefresh"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/17aca6389be0f81b999f1b138a0b44a4"},"headline":"Deploying OpenFaaS on Kubernetes Using Codefresh","datePublished":"2017-12-29T19:31:43+00:00","dateModified":"2022-03-01T17:41:47+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/#webpage"},"wordCount":1119,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/deploying-openfaas-kubernetes-using-codefresh\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/deploy.jpg","keywords":["Kubernetes","open faas","faas"],"articleSection":["Kubernetes Tutorials"],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/17aca6389be0f81b999f1b138a0b44a4","name":"Dan Garfield","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/d4a38809809980ed49dc7e696a8e3938?s=96&d=blank&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/d4a38809809980ed49dc7e696a8e3938?s=96&d=blank&r=g","caption":"Dan Garfield"},"description":"Dan is the Co-Founder and Chief Open Source Officer at Codefresh. His work in open source includes being an Argo Maintainer, and co-chair of the GitOps Working Group. As a technology leader with a background in full-stack engineering, evangelism, and communications, he led Codefresh's go-to-market strategy and now leads open source strategy. You can follow him at twitter.com\/todaywasawesome","sameAs":["https:\/\/twitter.com\/todaywasawesome"],"url":"https:\/\/codefresh.io\/author\/dang\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/5775"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/27"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=5775"}],"version-history":[{"count":1,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/5775\/revisions"}],"predecessor-version":[{"id":21755,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/5775\/revisions\/21755"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/3057"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=5775"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=5775"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=5775"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}