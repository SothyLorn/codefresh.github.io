{"id":6750,"date":"2017-06-05T18:54:49","date_gmt":"2017-06-05T18:54:49","guid":{"rendered":"https:\/\/codefresh.io\/?post_type=dockerguides&#038;p=6750"},"modified":"2019-04-18T18:47:31","modified_gmt":"2019-04-18T18:47:31","slug":"c-sharp-in-docker","status":"publish","type":"post","link":"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/","title":{"rendered":"Dockerize your C# Application"},"content":{"rendered":"<p><a href=\"https:\/\/codefresh.io\/docs\/docs\/docker-registries\/codefresh-registry\/\"><\/a><\/p>\n<h2><span style=\"font-weight: 400;\">Microsoft&#8217;s open source push<\/span><\/h2>\n<p>In late 2014, Scott Guthrie <a href=\"https:\/\/weblogs.asp.net\/scottgu\/announcing-open-source-of-net-core-framework-net-core-distribution-for-linux-osx-and-free-visual-studio-community-edition\">announced<\/a> that Microsoft is open sourcing .NET. It took Microsoft a while, and change came in bits and pieces. But the end-result is many more open-source projects, some of them being built in the open.<\/p>\n<p>The projects aren&#8217;t minor ones either; many are projects the open source community has embraced. Fast forward to 2017: we now have several ways to run <a href=\"https:\/\/www.hanselman.com\/blog\/NETAndDocker.aspx\">C# and .NET code on Linux<\/a>, in containers, using Docker, running at scale.<\/p>\n<h2><span style=\"font-weight: 400;\">Why Do It?<\/span><\/h2>\n<p><span style=\"font-weight: 400;\">Having written way more code in NodeJS and Go in the last 3 years, I know you&#8217;re thinking: &#8220;but why should I even care?&#8221;<\/span><\/p>\n<p><span style=\"font-weight: 400;\">There are 8 notable reasons:<\/span><\/p>\n<ol>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">C# is a great language. It contains tons of development patterns, and includes async\/await, parallel execution, generics, interoperability, lots of syntactic sugar and it&#8217;s actively developed.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">It has many smaller features like tuples, function multi-return value returns and amazing tooling.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">It has tons of open source packages, an active community and millions of developers out there.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Breaks down monoliths running on Windows, and making pieces platform agnostic.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Enterprises need to become more nimble. Containerization allows them to slowly break down the large, complicated code bases into smaller ones.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Docker makes it easier to adopt micro-services. Engineers are now free to mix C#, .NET and other technologies on the same infrastructure.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">&#8216;Use the right tool for the right problem&#8217; is no longer a slogan. With Docker and containers, it becomes reality.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Enjoy all the Docker cultural and technological enablement. Technology independence, docker image re-use, multi-cloud deployments and portability, developer empowerment and much more.<\/span><\/li>\n<\/ol>\n<h2><span style=\"font-weight: 400;\">How to Do it<\/span><\/h2>\n<p><span style=\"font-weight: 400;\">Due to the history of .NET, not all variants of C# code can run the same way. Older .NET 4.5.x C# projects were heavily tied to Windows, and no Microsoft supported framework exists to run it on Linux. The newer <\/span><a href=\"https:\/\/www.microsoft.com\/net\/core\"><span style=\"font-weight: 400;\">.NET (Core)<\/span><\/a><span style=\"font-weight: 400;\"> framework runs C# natively on Linux, but with a much smaller API surface provided by the .NET platform. There are 3 likely scenarios that are leading you to run C# code on Docker, each will require a slightly different approach:<\/span><\/p>\n<ol>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Move existing Windows C# workloads to Linux and Docker<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Start fresh with C# on Linux<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Containerize an existing ASP.NET Core or .NET Core app<\/span><\/li>\n<\/ol>\n<h2><span style=\"font-weight: 400;\">Move Windows Workloads to Linux and Docker<\/span><\/h2>\n<p><span style=\"font-weight: 400;\">Legacy enterprise solutions tend to use the full .NET 4.5.x framework. The stack is powerful, but built in a time when we had 1 huge program running on a huge machine.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">It&#8217;s an all or nothing package of APIs as well. This approach was convenient when Internet speeds were slow, but made it difficult to port over the entire .NET framework to Linux as-is.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">What that means, is that you can&#8217;t package a .NET 4.5.x C# app today and just expect it to run on Linux.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">This is the toughest scenario of all, but there are solutions. Microsoft bought and now sponsors (but doesn\u2019t support) an open-source project called <\/span><a href=\"http:\/\/www.mono-project.com\/\"><span style=\"font-weight: 400;\">Mono<\/span><\/a><span style=\"font-weight: 400;\"> .<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Mono is an open source, to the spec implementation of the .NET that runs cross platform.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">It covers a good part of the .NET API surface, yet still requires you to port over pieces of your code base.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Making your app run on Mono, on Linux and Docker, entails work, with rewards.<\/span><\/p>\n<h2><span style=\"font-weight: 400;\">Dockerizing and Running a Simple Mono C# App<\/span><\/h2>\n<p><span style=\"font-weight: 400;\">Let&#8217;s learn how to dockerize a Mono C# app. We&#8217;ll download a sample web server I prepared, dockerize it and run it locally.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">In a folder on your local machine, clone this github repo. Now run the following commands:<\/span><\/p>\n<pre class=\"lang:default decode:true\">git clone https:\/\/github.com\/AlaShiban\/mono-nancysampleapp.git\ncd mono-nancysampleapp\ndocker build -t learndocker\/mono-sampleapp .\ndocker run -p 4321:4321 -t learndocker\/mono-sampleapp<\/pre>\n<p><span style=\"font-weight: 400;\">The first line clones a <\/span><a href=\"http:\/\/nancyfx.org\/\"><span style=\"font-weight: 400;\">Nancy-based<\/span><\/a><span style=\"font-weight: 400;\"> C# project from github. Nancy is a lightweight library used to create web APIs, like ASP.NET or Hapi on NodeJS.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Once in the folder of the code, we run two docker commands &#8211; one to build the image locally, the other to run it.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">When the build finishes and you run the local docker image, you&#8217;ll see an output like this:<\/span><\/p>\n<pre class=\"lang:default decode:true\">Running on http:\/\/0.0.0.0:4321<\/pre>\n<p><span style=\"font-weight: 400;\">Opening that URL in a browser will reveal the C# code running and serving a simple web page that looks like this:<\/span><\/p>\n<p><img class=\"aligncenter size-full wp-image-3088\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/1.helloworld.png\" alt=\"\" width=\"818\" height=\"263\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/1.helloworld.png 818w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/1.helloworld-300x96.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/1.helloworld-768x247.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/1.helloworld-628x202.png 628w\" sizes=\"(max-width: 818px) 100vw, 818px\" \/><\/p>\n<p><span style=\"font-weight: 400;\">Let&#8217;s crack open the Dockerfile:<\/span><\/p>\n<pre class=\"lang:default decode:true\">FROM mono\nEXPOSE 4321\nADD . \/src\nWORKDIR \/src\nRUN mono nuget.exe restore\nRUN xbuild \/p:Configuration=Release\nCMD [ \"mono\", \"\/src\/Mono-MyFirstNancy\/bin\/Release\/Mono-MyFirstNancy.exe\" ]<\/pre>\n<h3><span style=\"font-weight: 400;\">Understanding the Mono Dockerfile<\/span><\/h3>\n<ol>\n<li><span style=\"font-weight: 400;\">Line 1 means that we&#8217;ll be using the latest official mono docker base image. This image gives us the mono runtime so we can run .NET .exe&#8217;s.<\/span><\/li>\n<li><span style=\"font-weight: 400;\">Line 2 lets Docker know that the port we&#8217;re using inside the container is <\/span><span style=\"font-weight: 400;\">4321<\/span><\/li>\n<li><span style=\"font-weight: 400;\">Line 3 and 4 copy all the source and folder contents we&#8217;re currently running into a folder within the docker container. The folder is called \/src<\/span><\/li>\n<li><span style=\"font-weight: 400;\">Line 5 uses mono to run the nuget.exe package manager and re-acquires all missing NuGet packages. This is similar to how <\/span><span style=\"font-weight: 400;\">npm install<\/span><span style=\"font-weight: 400;\"> works on NodeJS.<\/span><\/li>\n<li><span style=\"font-weight: 400;\">Line 6 builds the project with the Release flag. It tells the compiler to run optimizations and avoid generating debug information. The output folder will be \/bin\/Release\/ based on conventions.<\/span><\/li>\n<li><span style=\"font-weight: 400;\">Line 7 defines the docker entry-point when someone runs our image. It will call mono and pass it the produced .exe name as a parameter. This runs the Nancy-based web server in a docker container.<\/span><\/li>\n<\/ol>\n<p><span style=\"font-weight: 400;\">That&#8217;s the barebones conceptual workflow you&#8217;ll have with Mono projects. Special sauce might be needed depending on how complex your original .NET 4.5.x C# project is.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Be patient and port diligently when it makes business and technological sense.<\/span><\/p>\n<h2><span style=\"font-weight: 400;\">Start fresh with C# on Linux<\/span><\/h2>\n<p><span style=\"font-weight: 400;\">The .NET API surface, runtime and C# compilation toolchain on Linux is called .NET Core. The main reason it was born was to accommodate growing forces within Microsoft to compete with popular and available web stacks on Linux.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Technologies like NodeJS, Ruby on Rails and others were gaining developer mindshare. Developers were also saying non-cross-platform development platforms were a non-starter. So the ASP.NET team built one.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Once other .NET teams jumped on the bandwagon, .NET Core was born. The community embraced it and ported many of the most popular packages to support it.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">.NET Core and C# are now becoming a true contender on Linux.<\/span><\/p>\n<h3><span style=\"font-weight: 400;\">Dockerizing and Running a .NET Core App<\/span><\/h3>\n<p><span style=\"font-weight: 400;\">Let&#8217;s take a web app based on NancyFX, available on github, clone it, docker build it, then run it locally. Throughout this post, we&#8217;ll explain the Dockerfile line by line. The goal is for you to understand the anatomy of the why and how .NET Core apps run on docker within a Linux host.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">First, clone the Nancy core-compatible project from github so you have the code locally:<\/span><\/p>\n<pre class=\"toolbar:2 nums:false lang:default decode:true\">git clone https:\/\/github.com\/AlaShiban\/dotnetcore-nancysampleapp\ncd dotnetcore-nancysampleapp<\/pre>\n<p><span style=\"font-weight: 400;\">Let&#8217;s now run the docker build command to have Docker create the image specified in the Dockerfile. This will run similar functions to the Mono scenario we described earlier:<\/span><\/p>\n<ol>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Restore nuget packages<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Compile C# source into runnable bits<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Define Docker execution entry point<\/span><\/li>\n<\/ol>\n<p><span style=\"font-weight: 400;\">Unlike Mono projects, .NET Core follows a model like nodejs. You<\/span><code>dotnet run<\/code><\/p>\n<p><span style=\"font-weight: 400;\">an application defined in a config file, much like a package.json and npm start in NodeJS.<\/span><\/p>\n<h2><span style=\"font-weight: 400;\">Building the .NET Core App Docker Image<\/span><\/h2>\n<p><span style=\"font-weight: 400;\">Let&#8217;s get the docker image built on our system by using the same build command we used before, labeling the image differently:<\/span><\/p>\n<pre class=\"toolbar:2 nums:false lang:default decode:true\">docker build -t learndocker\/dotnetcore-sampleapp .<\/pre>\n<p><span style=\"font-weight: 400;\">You&#8217;ll see the toolchain kick in and start transforming the source to runnable bits for the platform.<\/span><\/p>\n<p><img class=\"aligncenter size-full wp-image-3090\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/dotnetcore-nancy-buildprocess.2.png\" alt=\"\" width=\"1004\" height=\"425\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/dotnetcore-nancy-buildprocess.2.png 1004w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/dotnetcore-nancy-buildprocess.2-300x127.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/dotnetcore-nancy-buildprocess.2-768x325.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/dotnetcore-nancy-buildprocess.2-628x266.png 628w\" sizes=\"(max-width: 1004px) 100vw, 1004px\" \/><\/p>\n<p><span style=\"font-weight: 400;\">.NET is more like Java, where source compiles into an intermediate runnable language. In recent years, more and more bits can compile ahead of time to binary code as well.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">That&#8217;s why when you choose a base-image for your .NET Core app, you should choose an image that has build tools and package managers in it to build correctly. Once you get comfortable with the toolchain, you can use the Docker multi-stage pattern to use runtime-only images for C# code thas you\u2019ve previously compiled.<\/span><\/p>\n<p>Let&#8217;s crack open the Dockerfile for this project and check out how we built the .NET Core app for Docker:<\/p>\n<pre class=\"toolbar:2 lang:default decode:true\">FROM microsoft\/aspnetcore-build\nEXPOSE 4321\nWORKDIR \/app\nCOPY . .\nRUN dotnet restore\nENTRYPOINT [\"dotnet\", \"run\"]<\/pre>\n<ol>\n<li><span style=\"font-weight: 400;\">Line 1 gets not only the .NET Core framework, as you&#8217;d expect, but the ASP.NET Core package as well. That base-image contains many useful tools and libraries especially when developing web tools.\u00a0<\/span><span style=\"font-weight: 400;\">For a Nancy web-server project, we wind up using some of the hosting libraries found in ASP.NET Core.<\/span><\/li>\n<li><span style=\"font-weight: 400;\">Line 2 lets Docker know that the port we&#8217;re using inside the container is <\/span><span style=\"font-weight: 400;\">4321<\/span><\/li>\n<li><span style=\"font-weight: 400;\">Lines 3 and 4 are like the Mono project, where we copy the source files into the \/app folder on the container.<\/span><\/li>\n<li><span style=\"font-weight: 400;\">Line 5 is a .NET Core command that tells the package manager to download all the missing packages. This is like <\/span><span style=\"font-weight: 400;\">npm install<\/span><span style=\"font-weight: 400;\"> for NodeJS apps.<\/span><\/li>\n<li><span style=\"font-weight: 400;\">Line 6 describes what happens when the docker image is run. Docker will call <\/span><span style=\"font-weight: 400;\">dotnet run<\/span><span style=\"font-weight: 400;\"> just like <\/span><span style=\"font-weight: 400;\">npm start<\/span><span style=\"font-weight: 400;\"> scripts<\/span><\/li>\n<li><span style=\"font-weight: 400;\">That&#8217;s the barebones way to get a .NET Core app running, even with some web components in there.<\/span><\/li>\n<\/ol>\n<h3><span style=\"font-weight: 400;\">Containerizing an ASP.NET or .NET Core App<\/span><\/h3>\n<p><span style=\"font-weight: 400;\">This one becomes much simpler now that we went over the previous section. Follow the same pattern of adding a Dockerfile to your <\/span><a href=\"https:\/\/docs.microsoft.com\/en-us\/aspnet\/core\/\"><span style=\"font-weight: 400;\">ASP.NET Core<\/span><\/a><span style=\"font-weight: 400;\"> or .NET Core app. Then, run the same commands as the samples above. Most of the time it will look like this:<\/span><\/p>\n<pre class=\"toolbar:2 lang:default decode:true\">FROM microsoft\/aspnetcore-build\nEXPOSE 4321\nWORKDIR \/app\nCOPY . .\nRUN dotnet restore\nENTRYPOINT [\"dotnet\", \"run\"]<\/pre>\n<p><span style=\"font-weight: 400;\">Replacing 4321 to the port you normally use while developing your app, like 80 or 8080.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Once you have a Dockerfile in place, you&#8217;ll build your first Docker image of your app like so:<\/span><\/p>\n<pre class=\"toolbar:2 nums:false lang:default decode:true\">docker build -t rockstardev\/dotnetcore-mycoolapp .<\/pre>\n<p><span style=\"font-weight: 400;\">Then run your built app:<\/span><\/p>\n<pre class=\"toolbar:2 nums:false lang:default decode:true \">docker run -p 4321:4321 -t rockstardev\/dotnetcore-mycoolapp<\/pre>\n<p><span style=\"font-weight: 400;\">Replacing 4321 with your favorite development port. Once you access the running container from a browser, you\u2019ll get the same expected result:<\/span><\/p>\n<p><img class=\"aligncenter size-full wp-image-3088\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/1.helloworld.png\" alt=\"\" width=\"818\" height=\"263\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/1.helloworld.png 818w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/1.helloworld-300x96.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/1.helloworld-768x247.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/1.helloworld-628x202.png 628w\" sizes=\"(max-width: 818px) 100vw, 818px\" \/><\/p>\n<h2><span style=\"font-weight: 400;\">Final Words<\/span><\/h2>\n<p><span style=\"font-weight: 400;\">Choosing a completely containerized path is freeing. Bringing .NET Core and ASP.NET Core apps into the mix becomes a straightforward process. You don&#8217;t have to choose between OSes, tech stacks, or limiting libraries; you just build more micro-services.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">When .NET Core is the tool of choice for certain tasks, follow this guide and others. You&#8217;ll find yourself enjoying C# 7, async\/await, strong typing, generics and tons of libraries with powerful capabilities.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">If you&#8217;re coming from the .NET world, consider that you can start expanding your horizons with new tech stacks along-side your .NET apps. Experience what makes NodeJS great and not-so-great compared to what you already know. It definitely won&#8217;t hurt your resume.<\/span><\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"6750\"\/>","protected":false},"excerpt":{"rendered":"<p>Microsoft&#8217;s open source push In late 2014, Scott Guthrie announced that Microsoft is open sourcing .NET. It took Microsoft a while, and change came in bits and pieces. But the end-result is many more open-source projects, some of them being built in the open. The projects aren&#8217;t minor ones either; many are projects the open &hellip; <a href=\"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/\">Read more<\/a><\/p>\n","protected":false},"author":27,"featured_media":0,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[8],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Dockerize your C# Application | Codefresh<\/title>\n<meta name=\"description\" content=\"In this article, we\u2019ll provide a brief introduction to Docker and go over what it takes to containerize a C# application.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Dockerize your C# Application\" \/>\n<meta property=\"og:description\" content=\"In this article, we\u2019ll provide a brief introduction to Docker and go over what it takes to containerize a C# application.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2017-06-05T18:54:49+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2019-04-18T18:47:31+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/1.helloworld.png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@todaywasawesome\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Dan Garfield\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"9 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/1.helloworld.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/1.helloworld.png\",\"width\":818,\"height\":263},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/#webpage\",\"url\":\"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/\",\"name\":\"Dockerize your C# Application | Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/#primaryimage\"},\"datePublished\":\"2017-06-05T18:54:49+00:00\",\"dateModified\":\"2019-04-18T18:47:31+00:00\",\"description\":\"In this article, we\u2019ll provide a brief introduction to Docker and go over what it takes to containerize a C# application.\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Dockerize your C# Application\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/17aca6389be0f81b999f1b138a0b44a4\"},\"headline\":\"Dockerize your C# Application\",\"datePublished\":\"2017-06-05T18:54:49+00:00\",\"dateModified\":\"2019-04-18T18:47:31+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/#webpage\"},\"wordCount\":1670,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/1.helloworld.png\",\"articleSection\":[\"Docker Tutorials\"],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/17aca6389be0f81b999f1b138a0b44a4\",\"name\":\"Dan Garfield\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/d4a38809809980ed49dc7e696a8e3938?s=96&d=blank&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/d4a38809809980ed49dc7e696a8e3938?s=96&d=blank&r=g\",\"caption\":\"Dan Garfield\"},\"description\":\"Dan is the Co-Founder and Chief Open Source Officer at Codefresh. His work in open source includes being an Argo Maintainer, and co-chair of the GitOps Working Group. As a technology leader with a background in full-stack engineering, evangelism, and communications, he led Codefresh's go-to-market strategy and now leads open source strategy. You can follow him at twitter.com\/todaywasawesome\",\"sameAs\":[\"https:\/\/twitter.com\/todaywasawesome\"],\"url\":\"https:\/\/codefresh.io\/author\/dang\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Dockerize your C# Application | Codefresh","description":"In this article, we\u2019ll provide a brief introduction to Docker and go over what it takes to containerize a C# application.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/","og_locale":"en_US","og_type":"article","og_title":"Dockerize your C# Application","og_description":"In this article, we\u2019ll provide a brief introduction to Docker and go over what it takes to containerize a C# application.","og_url":"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2017-06-05T18:54:49+00:00","article_modified_time":"2019-04-18T18:47:31+00:00","og_image":[{"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/1.helloworld.png"}],"twitter_card":"summary_large_image","twitter_creator":"@todaywasawesome","twitter_site":"@codefresh","twitter_misc":{"Written by":"Dan Garfield","Est. reading time":"9 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/1.helloworld.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/1.helloworld.png","width":818,"height":263},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/#webpage","url":"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/","name":"Dockerize your C# Application | Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/#primaryimage"},"datePublished":"2017-06-05T18:54:49+00:00","dateModified":"2019-04-18T18:47:31+00:00","description":"In this article, we\u2019ll provide a brief introduction to Docker and go over what it takes to containerize a C# application.","breadcrumb":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Dockerize your C# Application"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/17aca6389be0f81b999f1b138a0b44a4"},"headline":"Dockerize your C# Application","datePublished":"2017-06-05T18:54:49+00:00","dateModified":"2019-04-18T18:47:31+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/#webpage"},"wordCount":1670,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/c-sharp-in-docker\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/06\/1.helloworld.png","articleSection":["Docker Tutorials"],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/17aca6389be0f81b999f1b138a0b44a4","name":"Dan Garfield","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/d4a38809809980ed49dc7e696a8e3938?s=96&d=blank&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/d4a38809809980ed49dc7e696a8e3938?s=96&d=blank&r=g","caption":"Dan Garfield"},"description":"Dan is the Co-Founder and Chief Open Source Officer at Codefresh. His work in open source includes being an Argo Maintainer, and co-chair of the GitOps Working Group. As a technology leader with a background in full-stack engineering, evangelism, and communications, he led Codefresh's go-to-market strategy and now leads open source strategy. You can follow him at twitter.com\/todaywasawesome","sameAs":["https:\/\/twitter.com\/todaywasawesome"],"url":"https:\/\/codefresh.io\/author\/dang\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/6750"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/27"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=6750"}],"version-history":[{"count":0,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/6750\/revisions"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=6750"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=6750"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=6750"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}