{"id":6768,"date":"2017-06-07T22:44:41","date_gmt":"2017-06-07T22:44:41","guid":{"rendered":"https:\/\/codefresh.io\/?post_type=dockerguides&#038;p=6768"},"modified":"2022-02-11T21:55:47","modified_gmt":"2022-02-11T21:55:47","slug":"dockerize-java-application","status":"publish","type":"post","link":"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/","title":{"rendered":"Dockerize Your Java Application"},"content":{"rendered":"<h2><strong>What is Docker?<\/strong><\/h2>\n<p><span style=\"font-weight: 400;\">I\u2019m sure that you\u2019ve heard that <\/span><a href=\"https:\/\/twitter.com\/search?q=%23containers\"><span style=\"font-weight: 400;\">containers<\/span><\/a><span style=\"font-weight: 400;\"> are all the rage these days. If not, you can think of containers as a way to package and ship your existing applications. If you\u2019re familiar with containers, you\u2019ve most certainly heard of <\/span><a href=\"https:\/\/www.docker.com\/\"><span style=\"font-weight: 400;\">Docker<\/span><\/a><span style=\"font-weight: 400;\">, which provides the de-facto toolset to build, manage, and deploy containers. In this article, we\u2019ll provide a brief introduction to Docker and go over what it takes to containerize a Java application.<\/span><\/p>\n<h2><b>Dockerize Your Java Application<\/b><\/h2>\n<p><span style=\"font-weight: 400;\">The first step in building a Docker container for your Java application is to ensure that you have the Docker tool suite installed on your development machine. If you need to install Docker on your machine, you can find the appropriate download for your system on the <\/span><a href=\"https:\/\/www.docker.com\/community-edition#\/download\"><span style=\"font-weight: 400;\">official docker website<\/span><\/a><span style=\"font-weight: 400;\">.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Once installed correctly, you\u2019ll need to find a reputable base image to use as an application baseline. Ideally, a base image should only contain the bare essentials for the task at hand. You\u2019ll also want to keep image sizes down to a minimum to reduce build times and the amount of time to transfer images over the network. While there are several options available, a lot of teams that I\u2019ve worked with prefer <\/span><a href=\"https:\/\/www.alpinelinux.org\/downloads\/\"><span style=\"font-weight: 400;\">Alpine Linux<\/span><\/a><span style=\"font-weight: 400;\"> primarily because of its size (5MB). However, one thing to keep in mind is that Alpine does not use glibc, instead, it uses musl libc, which can be <\/span><a href=\"http:\/\/stackoverflow.com\/questions\/33382707\/alpine-musl-vs-glibc-are-they-supposed-to-be-compatible\"><span style=\"font-weight: 400;\">problematic<\/span><\/a><span style=\"font-weight: 400;\">, but solutions are <\/span><a href=\"http:\/\/stackoverflow.com\/questions\/42113225\/java-and-docker-based-on-alpine\"><span style=\"font-weight: 400;\">available<\/span><\/a><span style=\"font-weight: 400;\">.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Begin by looking through the <\/span><b>Dockerfile<\/b><span style=\"font-weight: 400;\"> in the following git repository.<\/span><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">$ git clone https:\/\/github.com\/n3integration\/dockerize-java.git\r\n$ cd dockerize-java &amp;&amp; cat Dockerfile<\/pre>\n<p><span style=\"font-weight: 400;\">The first line in the file should contain the base image name. As mentioned above, there are several publicly available base images that come with the JDK pre-installed. For additional images, a quick search on <\/span><a href=\"https:\/\/hub.docker.com\/\"><span style=\"font-weight: 400;\">Docker Hub<\/span><\/a><span style=\"font-weight: 400;\"> turns up multiple choices. Choose the best available image based on your needs, or build a custom image from scratch. For the sake of simplicity, in this post, I\u2019ve chosen to use the default openjdk base image, which is significantly larger than the Alpine image but ensures better compatibility. <\/span><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">FROM openjdk:8-jdk<\/pre>\n<p><span style=\"font-weight: 400;\">Although you can certainly install a web server such as <\/span><a href=\"https:\/\/tomcat.apache.org\/\"><span style=\"font-weight: 400;\">Tomcat<\/span><\/a><span style=\"font-weight: 400;\"> within a container, it is much more practical to install runnable jar files. There are several frameworks available including: <\/span><a href=\"http:\/\/sparkjava.com\/\"><span style=\"font-weight: 400;\">Spark<\/span><\/a><span style=\"font-weight: 400;\">, <\/span><a href=\"https:\/\/spring.io\/guides\/gs\/spring-boot\/\"><span style=\"font-weight: 400;\">Springboot<\/span><\/a><span style=\"font-weight: 400;\">, or <\/span><a href=\"https:\/\/restlet.com\/\"><span style=\"font-weight: 400;\">Restlet<\/span><\/a><span style=\"font-weight: 400;\">. I chose Spark for this post because I find it to be one of the simplest frameworks available to get up and running quickly. The compiled binary is copied to a common directory in the container using a common filename.<\/span><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">COPY build\/libs\/*.jar \/app\/service.jar<\/pre>\n<p><span style=\"font-weight: 400;\">Finally, the runnable jar file is executed. It is important to point out that each argument must be declared in an individual string.<\/span><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">CMD [\"java\", \"-jar\", \"\/app\/service.jar\"]<\/pre>\n<p><span style=\"font-weight: 400;\">Refer to the <\/span><a href=\"https:\/\/docs.docker.com\/engine\/reference\/builder\/\"><span style=\"font-weight: 400;\">official Dockerfile reference guide<\/span><\/a><span style=\"font-weight: 400;\"> for a complete set of available commands.<\/span> <span style=\"font-weight: 400;\">In order to build our container, we must first ensure that the project is compiled.<\/span><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">$ cd dockerize-java &amp;&amp; .\/gradlew clean build\r\n$ docker build -t n3integration\/dockerize:latest .<\/pre>\n<p><span style=\"font-weight: 400;\">The -t flag is the image tag and the format is <\/span><i><span style=\"font-weight: 400;\">organization\/project:revision<\/span><\/i><span style=\"font-weight: 400;\">. If the revision is omitted, it will default to using <\/span><b>latest<\/b><span style=\"font-weight: 400;\">.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">After selecting a base image, there are a few additional factors to consider when containerizing your application and deploying it to a Docker environment:<\/span><\/p>\n<ol>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Logging<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Configuration<\/span><\/li>\n<\/ol>\n<h2><b>Application Logging<\/b><\/h2>\n<p><span style=\"font-weight: 400;\">When writing log messages from your application, it is common to use a logging framework (e.g. slf4j, jcl, or log4j2). It is also common for traditional applications to write logs to the filesystem. However, when writing log messages within containers it is generally easier to write log messages to standard output, which is certainly an option regardless of the logging framework used. This enables developers to leverage available tooling such as the <\/span><span style=\"font-weight: 400;\">docker logs<\/span><span style=\"font-weight: 400;\"> command to troubleshoot containers at runtime. <\/span><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">$ docker ps | grep n3integration\/dockerize | awk '{print $1}' | xargs docker logs<\/pre>\n<h2><b>Application Configuration<\/b><\/h2>\n<p><span style=\"font-weight: 400;\">One caveat of working with containers is dealing with an application\u2019s configuration. Since containers are immutable, traditional configuration files are less commonplace, unless you\u2019re attempting to provide a default configuration out of the box with settings that will work regardless of environment. However, don\u2019t be discouraged, there are options available in dealing with your application\u2019s configuration. <\/span><\/p>\n<h2><b>Environment Variables<\/b><\/h2>\n<p><span style=\"font-weight: 400;\">This is the least intrusive option and adheres to the <\/span><a href=\"https:\/\/12factor.net\/\"><span style=\"font-weight: 400;\">twelve factor app<\/span><\/a><span style=\"font-weight: 400;\"> methodology. However, care should be taken in exposing secrets as environment variables that aren\u2019t encrypted. In the following example, the environment variable <\/span><span style=\"font-weight: 400;\">USER<\/span><span style=\"font-weight: 400;\"> is passed to the container.<\/span><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">$ docker run -p4567:4567 -d -eUSER=\"n3integration\" n3integration\/dockerize\r\n$ curl localhost:4567\r\n$ docker ps | grep n3integration\/dockerize | awk '{print $1}' | xargs docker rm -f<\/pre>\n<h2><b>Volumes<\/b><\/h2>\n<p><span style=\"font-weight: 400;\">Docker provides <\/span><a href=\"https:\/\/docs.docker.com\/engine\/tutorials\/dockervolumes\/\"><span style=\"font-weight: 400;\">volumes<\/span><\/a><span style=\"font-weight: 400;\"> as a way to mount and restore partial state within a container at runtime. The availability of volumes comes in handy for configuration files. If, for example, you have multiple containers running on a single host, a local directory with environment-specific configuration files can be loaded into the container at runtime by mounting the directory as a volume in all containers. This simplifies deployments and reduces the amount of runtime dependencies. In the following example, the local data directory is mounted as a volume in the <\/span><span style=\"font-weight: 400;\">\/data<\/span><span style=\"font-weight: 400;\"> directory of the container. The output from the curl command should differ from the previous example.<\/span><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">$ docker run -p4567:4567 -d -v $(pwd)\/data:\/data n3integration\/dockerize\r\n$ curl localhost:4567\r\n$ docker ps | grep n3integration\/dockerize | awk '{print $1}' | xargs docker rm -f<\/pre>\n<h2><b>Configuration Store<\/b><\/h2>\n<p><span style=\"font-weight: 400;\">For more complex installations, a configuration key\/value store such as: <\/span><a href=\"https:\/\/www.consul.io\/\"><span style=\"font-weight: 400;\">consul<\/span><\/a><span style=\"font-weight: 400;\">, <\/span><a href=\"https:\/\/coreos.com\/etcd\/\"><span style=\"font-weight: 400;\">etcd<\/span><\/a><span style=\"font-weight: 400;\">, or <\/span><a href=\"https:\/\/github.com\/Netflix\/curator\/wiki\/Service-Discovery\"><span style=\"font-weight: 400;\">curator<\/span><\/a><span style=\"font-weight: 400;\"> can be used to host and query configuration settings. The most common use case that benefits from the use of a configuration key\/value store is <\/span><a href=\"http:\/\/microservices.io\/patterns\/client-side-discovery.html\"><span style=\"font-weight: 400;\">service discovery<\/span><\/a><span style=\"font-weight: 400;\">. Service discovery is especially important if running multiple instances of the same service on a single host, which would normally bind to the same port. In the case of Docker containers, specifying a host port is optional and should be avoided unless necessary, if for example at most one instance of a service should run on a single host. Service discovery is outside of the scope of this post and more can be read about the topic in the link provided above.<\/span><\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"6768\"\/>","protected":false},"excerpt":{"rendered":"<p>What is Docker? I\u2019m sure that you\u2019ve heard that containers are all the rage these days. If not, you can think of containers as a way to package and ship your existing applications. If you\u2019re familiar with containers, you\u2019ve most certainly heard of Docker, which provides the de-facto toolset to build, manage, and deploy containers. &hellip; <a href=\"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/\">Read more<\/a><\/p>\n","protected":false},"author":27,"featured_media":2344,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[8],"tags":[86],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Dockerize Your Java Application | Codefresh<\/title>\n<meta name=\"description\" content=\"In this article, we\u2019ll provide a brief introduction to Docker and go over what it takes to containerize a Java application.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Dockerize Your Java Application\" \/>\n<meta property=\"og:description\" content=\"In this article, we\u2019ll provide a brief introduction to Docker and go over what it takes to containerize a Java application.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2017-06-07T22:44:41+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-02-11T21:55:47+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/03\/duke_docker.png\" \/>\n\t<meta property=\"og:image:width\" content=\"765\" \/>\n\t<meta property=\"og:image:height\" content=\"340\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@todaywasawesome\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Dan Garfield\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/03\/duke_docker.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/03\/duke_docker.png\",\"width\":765,\"height\":340,\"caption\":\"Java in Docker\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/#webpage\",\"url\":\"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/\",\"name\":\"Dockerize Your Java Application | Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/#primaryimage\"},\"datePublished\":\"2017-06-07T22:44:41+00:00\",\"dateModified\":\"2022-02-11T21:55:47+00:00\",\"description\":\"In this article, we\u2019ll provide a brief introduction to Docker and go over what it takes to containerize a Java application.\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Dockerize Your Java Application\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/17aca6389be0f81b999f1b138a0b44a4\"},\"headline\":\"Dockerize Your Java Application\",\"datePublished\":\"2017-06-07T22:44:41+00:00\",\"dateModified\":\"2022-02-11T21:55:47+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/#webpage\"},\"wordCount\":950,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/03\/duke_docker.png\",\"keywords\":[\"java\"],\"articleSection\":[\"Docker Tutorials\"],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/17aca6389be0f81b999f1b138a0b44a4\",\"name\":\"Dan Garfield\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/d4a38809809980ed49dc7e696a8e3938?s=96&d=blank&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/d4a38809809980ed49dc7e696a8e3938?s=96&d=blank&r=g\",\"caption\":\"Dan Garfield\"},\"description\":\"Dan is the Co-Founder and Chief Open Source Officer at Codefresh. His work in open source includes being an Argo Maintainer, and co-chair of the GitOps Working Group. As a technology leader with a background in full-stack engineering, evangelism, and communications, he led Codefresh's go-to-market strategy and now leads open source strategy. You can follow him at twitter.com\/todaywasawesome\",\"sameAs\":[\"https:\/\/twitter.com\/todaywasawesome\"],\"url\":\"https:\/\/codefresh.io\/author\/dang\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Dockerize Your Java Application | Codefresh","description":"In this article, we\u2019ll provide a brief introduction to Docker and go over what it takes to containerize a Java application.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/","og_locale":"en_US","og_type":"article","og_title":"Dockerize Your Java Application","og_description":"In this article, we\u2019ll provide a brief introduction to Docker and go over what it takes to containerize a Java application.","og_url":"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2017-06-07T22:44:41+00:00","article_modified_time":"2022-02-11T21:55:47+00:00","og_image":[{"width":765,"height":340,"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/03\/duke_docker.png","type":"image\/png"}],"twitter_card":"summary_large_image","twitter_creator":"@todaywasawesome","twitter_site":"@codefresh","twitter_misc":{"Written by":"Dan Garfield","Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/03\/duke_docker.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/03\/duke_docker.png","width":765,"height":340,"caption":"Java in Docker"},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/#webpage","url":"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/","name":"Dockerize Your Java Application | Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/#primaryimage"},"datePublished":"2017-06-07T22:44:41+00:00","dateModified":"2022-02-11T21:55:47+00:00","description":"In this article, we\u2019ll provide a brief introduction to Docker and go over what it takes to containerize a Java application.","breadcrumb":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Dockerize Your Java Application"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/17aca6389be0f81b999f1b138a0b44a4"},"headline":"Dockerize Your Java Application","datePublished":"2017-06-07T22:44:41+00:00","dateModified":"2022-02-11T21:55:47+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/#webpage"},"wordCount":950,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/dockerize-java-application\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/03\/duke_docker.png","keywords":["java"],"articleSection":["Docker Tutorials"],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/17aca6389be0f81b999f1b138a0b44a4","name":"Dan Garfield","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/d4a38809809980ed49dc7e696a8e3938?s=96&d=blank&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/d4a38809809980ed49dc7e696a8e3938?s=96&d=blank&r=g","caption":"Dan Garfield"},"description":"Dan is the Co-Founder and Chief Open Source Officer at Codefresh. His work in open source includes being an Argo Maintainer, and co-chair of the GitOps Working Group. As a technology leader with a background in full-stack engineering, evangelism, and communications, he led Codefresh's go-to-market strategy and now leads open source strategy. You can follow him at twitter.com\/todaywasawesome","sameAs":["https:\/\/twitter.com\/todaywasawesome"],"url":"https:\/\/codefresh.io\/author\/dang\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/6768"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/27"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=6768"}],"version-history":[{"count":1,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/6768\/revisions"}],"predecessor-version":[{"id":21492,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/6768\/revisions\/21492"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/2344"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=6768"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=6768"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=6768"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}