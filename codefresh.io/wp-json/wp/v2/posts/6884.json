{"id":6884,"date":"2017-12-29T17:48:50","date_gmt":"2017-12-29T17:48:50","guid":{"rendered":"https:\/\/codefresh.io\/kubernetes-guides\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/"},"modified":"2022-01-24T09:40:20","modified_gmt":"2022-01-24T09:40:20","slug":"dynamically-creating-k8s-namespaces-every-branch-pull-request-2","status":"publish","type":"post","link":"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/","title":{"rendered":"Dynamically Creating K8s Namespaces for Every Branch\/Pull Request"},"content":{"rendered":"<h2>Shift Left with Kubernetes and Helm<\/h2>\n<p>One of the important principals of shifting left is having the ability to create an environment for each branch you&#8217;re working on. Shifting left is valuable because it puts application engineers in a position where they can totally validate changes before they even issue a pull request. It saves time for people doing code reviews and approving pull requests because they have a lot more information about how valid and well tested a change is.<\/p>\n<p>Plus it&#8217;s nice to be able to share changes with your teams before.<\/p>\n<h2>Making it happen in Kubernetes<\/h2>\n<p>Today I&#8217;ll show you how to<\/p>\n<ul>\n<li>Build a new Docker image<\/li>\n<li>Dynamically create a namespace<\/li>\n<li>Copy secrets to the new namespace<\/li>\n<li>Push images (in this case using a Helm Chart)<\/li>\n<li>Put all of that into a Codefresh pipeline<\/li>\n<\/ul>\n<p>I&#8217;ll start by showing the pipeline and then break it down.<!--more--><\/p>\n<pre class=\"lang:yaml decode:true\">version: '1.0'\nsteps:\n  BuildingDockerImage:\n    title: Building Docker Image\n    type: build\n    image_name: containers101\/demochat\n    working_directory: .\/\n    dockerfile: Dockerfile\n    tag: '${{CF_BRANCH_TAG_NORMALIZED}}'\n  createNamespace:\n    title: Create new namespace\n    image: codefresh\/kube-helm:master\n    fail_fast: false\n    commands:\n     - kubectl config use-context ${{KUBE_CONTEXT}}\n     - kubectl create namespace ${{CF_BRANCH_TAG_NORMALIZED}}\n     - kubectl get secret codefresh-generated-r.cfcr.io-cfcr-default -o json | jq '.metadata.namespace = \"${{CF_BRANCH_TAG_NORMALIZED}}\"' | kubectl create --namespace ${{CF_BRANCH_TAG_NORMALIZED}} -f -\n  release_to_env:\n    title: Deploying Helm Chart\n    image: 'codefresh\/plugin-helm:2.7.2'<\/pre>\n<h3>Building the Docker Image<\/h3>\n<p>Building the Docker image is pretty straight forward. We pass a name, the working directory, the location of the Dockerfile relative to repository and give it any tags we&#8217;d like it to have. Codefresh will take care of the rest.<\/p>\n<pre class=\"lang:yaml decode:true\">    title: Building Docker Image\n    type: build\n    image_name: containers101\/demochat\n    working_directory: .\/\n    dockerfile: Dockerfile\n    tag: '${{CF_BRANCH_TAG_NORMALIZED}}'<\/pre>\n<p>Take notice of the variable\u00a0<span class=\"lang:default decode:true crayon-inline\">${{CF_BRANCH_TAG_NORMALIZED}}<\/span>. Git branch names can have all kinds of characters that Docker and Kubernetes don&#8217;t like. The &#8220;normalized&#8221; version will replace all those funky characters with something more palatable.<\/p>\n<p>If this pipeline is running on the branch &#8220;new feature&#8221; it will create the image &#8220;demochat:new-feature&#8221;.<\/p>\n<h3>Creating the Namespace<\/h3>\n<p>To create the namespace we&#8217;re going to use a custom step. It will take an image called &#8220;kube-helm&#8221; which has Kubectl, Helm, jq and a few other tools installed.<\/p>\n<pre class=\"lang:yaml decode:true\">createNamespace:\n    title: Create new namespace\n    image: codefresh\/kube-helm:master\n    fail_fast: false\n    commands:\n     - kubectl config use-context ${{KUBE_CONTEXT}}\n     - kubectl create namespace ${{CF_BRANCH_TAG_NORMALIZED}}<\/pre>\n<p>Here we&#8217;ve set an environmental variable on the pipeline called\u00a0<span class=\"lang:default decode:true crayon-inline\">${{KUBE_CONTEXT}}<\/span>\u00a0. This is the name of the cluster that I&#8217;ve already added to Codefresh. If you haven&#8217;t added a cluster to Codefresh, <a href=\"https:\/\/codefresh.io\/kubernetes-deploy\/\">it&#8217;s really easy<\/a>.<\/p>\n<p>The create namespace line will again use our\u00a0<span class=\"lang:default decode:true crayon-inline \">${{CF_BRANCH_TAG_NORMALIZED}}<\/span>\u00a0variable.<\/p>\n<p>We&#8217;ll use the\u00a0<span class=\"lang:default decode:true crayon-inline \">fail_fast<\/span>\u00a0option since this step will throw an error if the namespace was already created. The fail_fast will let the rest of the pipeline run even if that happens (as it will every time after the first time we create a new branch).<\/p>\n<p>So far this is pretty easy! The real trick will be adding our secrets.<\/p>\n<h3>Copying Secrets between Namespaces<\/h3>\n<pre class=\"lang:default decode:true\">kubectl get secret codefresh-generated-r.cfcr.io-cfcr-default -o json | jq '.metadata.namespace = \"${{CF_BRANCH_TAG_NORMALIZED}}\"' | kubectl create --namespace ${{CF_BRANCH_TAG_NORMALIZED}} -f -<\/pre>\n<p>This is actually several commands piped together. The first command will get a secret from our default namespace that I&#8217;ve previously saved.<\/p>\n<p>If you wanted to specify a specific namespace to pull a secret from then you would just throw the\u00a0<span class=\"lang:default decode:true crayon-inline \">&#8211;namespace=whatever<\/span>\u00a0option on. You will need to know the name of the secret you want to copy from. Here, I used Codefresh to create the secret earlier and I&#8217;m going to reuse it.\u00a0<span class=\"lang:default decode:true crayon-inline\">codefresh-generated-r.cfcr.io-cfcr-default<\/span><\/p>\n<p>Secrets contain a reference for which namespace they should work in. When we copy the secret we need to modify it. We&#8217;ll pipe the output as json to a tool called jq which can parse json and use it to modify our secret for a new namespace.\u00a0<span class=\"lang:default decode:true crayon-inline \">jq &#8216;.metadata.namespace = &#8220;${{CF_BRANCH_TAG_NORMALIZED}}&#8221;&#8216;<\/span>\u00a0.<\/p>\n<p>Finally, we&#8217;ll apply the secret to our namespace by piping the whole thing to this line.\u00a0<span class=\"lang:default decode:true crayon-inline \">kubectl create &#8211;namespace ${{CF_BRANCH_TAG_NORMALIZED}} -f &#8211;<\/span>\u00a0. This will take the secret we just copied, then modified and apply it to our new namespace.<\/p>\n<h4>Wondering what a secret is?<\/h4>\n<p>Pull secrets let Kubernetes access <a href=\"https:\/\/codefresh.io\/blog\/free-private-docker-registry\/\">private Docker registries, like the one built-in to Codefresh<\/a>. The image that we built at the top of this post was a private Docker image so we need to make sure Kubernetes can pull it when we goto deploy.<\/p>\n<h3>Deploy Built Image using a Helm Chart<\/h3>\n<p>Now that we&#8217;ve built a Docker image, and dynamically created a namespace we can deploy it along with it&#8217;s Chart. We&#8217;ll use the Codefresh Helm plugin with the following YAML.<\/p>\n<pre class=\"lang:default decode:true\">  release_to_env:\n    title: Deploying Helm Chart\n    image: 'codefresh\/plugin-helm:2.7.2'<\/pre>\n<p>You can get the <a href=\"https:\/\/codefresh.io\/docs\/docs\/new-helm\/using-helm-in-codefresh-pipeline\/\">full documentation here<\/a>. Basically this step, plus a few environmental variables will take everything we did and deploy it. Here&#8217;s a screenshot of my environmental variables so you can see how I used Codefresh variables to pull in the new image, configure the Helm deploy step etc.<\/p>\n<p><img class=\"aligncenter size-full wp-image-5759\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/12\/environmental-varibles.png\" alt=\"\" width=\"543\" height=\"487\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/12\/environmental-varibles.png 543w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/12\/environmental-varibles-300x269.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/12\/environmental-varibles-366x328.png 366w\" sizes=\"(max-width: 543px) 100vw, 543px\" \/><\/p>\n<p>And here&#8217;s what the whole thing looks like when I run it:<\/p>\n<p><img class=\"aligncenter size-full wp-image-5760\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/12\/helm-pipeline.png\" alt=\"\" width=\"1103\" height=\"806\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/12\/helm-pipeline.png 1103w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/12\/helm-pipeline-300x219.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/12\/helm-pipeline-768x561.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/12\/helm-pipeline-1024x748.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2017\/12\/helm-pipeline-449x328.png 449w\" sizes=\"(max-width: 1103px) 100vw, 1103px\" \/><\/p>\n<p>As a bonus, here&#8217;s a video of me using this in a feature friday video!<\/p>\n<p><iframe title=\"Feature Friday - Deploying Custom Helm Charts\" width=\"500\" height=\"281\" src=\"https:\/\/www.youtube.com\/embed\/RmSO-AakLoc?start=138&#038;feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe><\/p>\n<p>New to Codefresh? <a href=\"https:\/\/codefresh.io\/codefresh-signup\/?utm_source=Blog&#038;utm_medium=Post&#038;utm_campaign=KTB\">Create Your Free Account Today!<\/a><\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"6884\"\/>","protected":false},"excerpt":{"rendered":"<p>Shift Left with Kubernetes and Helm One of the important principals of shifting left is having the ability to create an environment for each branch you&#8217;re working on. Shifting left is valuable because it puts application engineers in a position where they can totally validate changes before they even issue a pull request. It saves &hellip; <a href=\"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/\">Read more<\/a><\/p>\n","protected":false},"author":27,"featured_media":5203,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[1657],"tags":[44,994,1226],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Dynamically Creating K8s Namespaces for Every Branch\/Pull Request | Codefresh<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Dynamically Creating K8s Namespaces for Every Branch\/Pull Request\" \/>\n<meta property=\"og:description\" content=\"Shift Left with Kubernetes and Helm One of the important principals of shifting left is having the ability to create an environment for each branch you&#8217;re working on. Shifting left is valuable because it puts application engineers in a position where they can totally validate changes before they even issue a pull request. It saves &hellip; Read more\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2017-12-29T17:48:50+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-24T09:40:20+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/11\/computer.png\" \/>\n\t<meta property=\"og:image:width\" content=\"404\" \/>\n\t<meta property=\"og:image:height\" content=\"382\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@todaywasawesome\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Dan Garfield\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/11\/computer.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/11\/computer.png\",\"width\":404,\"height\":382},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/#webpage\",\"url\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/\",\"name\":\"Dynamically Creating K8s Namespaces for Every Branch\/Pull Request | Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/#primaryimage\"},\"datePublished\":\"2017-12-29T17:48:50+00:00\",\"dateModified\":\"2022-01-24T09:40:20+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Dynamically Creating K8s Namespaces for Every Branch\/Pull Request\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/17aca6389be0f81b999f1b138a0b44a4\"},\"headline\":\"Dynamically Creating K8s Namespaces for Every Branch\/Pull Request\",\"datePublished\":\"2017-12-29T17:48:50+00:00\",\"dateModified\":\"2022-01-24T09:40:20+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/#webpage\"},\"wordCount\":758,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/11\/computer.png\",\"keywords\":[\"Kubernetes\",\"helm\",\"namespaces\"],\"articleSection\":[\"Kubernetes Tutorials\"],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/17aca6389be0f81b999f1b138a0b44a4\",\"name\":\"Dan Garfield\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/d4a38809809980ed49dc7e696a8e3938?s=96&d=blank&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/d4a38809809980ed49dc7e696a8e3938?s=96&d=blank&r=g\",\"caption\":\"Dan Garfield\"},\"description\":\"Dan is the Co-Founder and Chief Open Source Officer at Codefresh. His work in open source includes being an Argo Maintainer, and co-chair of the GitOps Working Group. As a technology leader with a background in full-stack engineering, evangelism, and communications, he led Codefresh's go-to-market strategy and now leads open source strategy. You can follow him at twitter.com\/todaywasawesome\",\"sameAs\":[\"https:\/\/twitter.com\/todaywasawesome\"],\"url\":\"https:\/\/codefresh.io\/author\/dang\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Dynamically Creating K8s Namespaces for Every Branch\/Pull Request | Codefresh","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/","og_locale":"en_US","og_type":"article","og_title":"Dynamically Creating K8s Namespaces for Every Branch\/Pull Request","og_description":"Shift Left with Kubernetes and Helm One of the important principals of shifting left is having the ability to create an environment for each branch you&#8217;re working on. Shifting left is valuable because it puts application engineers in a position where they can totally validate changes before they even issue a pull request. It saves &hellip; Read more","og_url":"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2017-12-29T17:48:50+00:00","article_modified_time":"2022-01-24T09:40:20+00:00","og_image":[{"width":404,"height":382,"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/11\/computer.png","type":"image\/png"}],"twitter_card":"summary_large_image","twitter_creator":"@todaywasawesome","twitter_site":"@codefresh","twitter_misc":{"Written by":"Dan Garfield","Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/11\/computer.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/11\/computer.png","width":404,"height":382},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/#webpage","url":"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/","name":"Dynamically Creating K8s Namespaces for Every Branch\/Pull Request | Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/#primaryimage"},"datePublished":"2017-12-29T17:48:50+00:00","dateModified":"2022-01-24T09:40:20+00:00","breadcrumb":{"@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Dynamically Creating K8s Namespaces for Every Branch\/Pull Request"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/17aca6389be0f81b999f1b138a0b44a4"},"headline":"Dynamically Creating K8s Namespaces for Every Branch\/Pull Request","datePublished":"2017-12-29T17:48:50+00:00","dateModified":"2022-01-24T09:40:20+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/#webpage"},"wordCount":758,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/dynamically-creating-k8s-namespaces-every-branch-pull-request-2\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2017\/11\/computer.png","keywords":["Kubernetes","helm","namespaces"],"articleSection":["Kubernetes Tutorials"],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/17aca6389be0f81b999f1b138a0b44a4","name":"Dan Garfield","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/d4a38809809980ed49dc7e696a8e3938?s=96&d=blank&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/d4a38809809980ed49dc7e696a8e3938?s=96&d=blank&r=g","caption":"Dan Garfield"},"description":"Dan is the Co-Founder and Chief Open Source Officer at Codefresh. His work in open source includes being an Argo Maintainer, and co-chair of the GitOps Working Group. As a technology leader with a background in full-stack engineering, evangelism, and communications, he led Codefresh's go-to-market strategy and now leads open source strategy. You can follow him at twitter.com\/todaywasawesome","sameAs":["https:\/\/twitter.com\/todaywasawesome"],"url":"https:\/\/codefresh.io\/author\/dang\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/6884"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/27"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=6884"}],"version-history":[{"count":1,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/6884\/revisions"}],"predecessor-version":[{"id":21087,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/6884\/revisions\/21087"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/5203"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=6884"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=6884"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=6884"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}