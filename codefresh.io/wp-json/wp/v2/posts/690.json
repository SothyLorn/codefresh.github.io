{"id":690,"date":"2016-08-21T05:26:14","date_gmt":"2016-08-21T05:26:14","guid":{"rendered":"https:\/\/codefresh.io\/?p=690"},"modified":"2022-03-01T17:21:12","modified_gmt":"2022-03-01T17:21:12","slug":"getting-node-js-errors-monitoring-systems","status":"publish","type":"post","link":"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/","title":{"rendered":"Getting the Most Out of Your Node.js Errors"},"content":{"rendered":"<p>How many times have\u00a0you found\u00a0yourself viewing a stack trace in your terminal or inside your monitoring systems and been\u00a0unable\u00a0to understand anything from it? If the answer is &#8216;a lot&#8217;, then this blog post is for you. If you do not suffer from this problem often, you might still find this interesting.<\/p>\n<p>When dealing with complex flows that occur from a Node.js server, the ability\u00a0to get the most out of the errors that it can return to the requesting party is vital.\u00a0The problem starts when a single error that is created\u00a0during the handling of a request causes the\u00a0creation of an additional\u00a0error somewhere higher up in the chain. When this scenario happens, once you generate a new\u00a0error and return it in the chain, you lose\u00a0all relation to the previous, original error.<\/p>\n<p>At <a href=\"https:\/\/codefresh.io\">Codefresh<\/a>, we spent a lot of time trying to find best patterns for\u00a0dealing with these scenarios.\u00a0What we really want\u00a0is the ability to create an error that can\u00a0be chained to a previous error with the ability\u00a0to aggregate information from this chain. We also want\u00a0the interface for doing this to\u00a0be very simple, but extendable for future enhancements.<\/p>\n<p>We searched for existing modules that could\u00a0support our needs. The only module we found that answered some of our requirements was <a href=\"https:\/\/www.npmjs.com\/package\/verror\" target=\"_blank\" rel=\"noopener\">WError<\/a>.<br \/>\n&#8216;WError&#8217; provides you with the ability to wrap existing errors with new ones. The interface is very cool and simple, so we gave it a go. After a period\u00a0of intensive use, we came to the\u00a0conclusion that it was not enough:<\/p>\n<ul>\n<li>The stack trace of an error would not go over the whole chain, but rather would only show the stack trace of the higher error that was generated.<\/li>\n<li>It lacked the ability to easily create your own types of errors.<\/li>\n<li>Extending the errors with additional behavior would require extending their code.<\/li>\n<\/ul>\n<h2>Introducing CFError<\/h2>\n<p>With our extensive\u00a0experience we\u00a0assembled an error module that answers all our requirements. You can find all the information and documentation\u00a0here:\u00a0<a href=\"https:\/\/github.com\/codefresh-io\/cf-errors\" target=\"_blank\" rel=\"noopener\">http:\/\/codefresh-io.github.io\/cf-errors<\/a>.<\/p>\n<p>Let&#8217;s see how you can use CFError with a real\u00a0example using Express.\u00a0We will create an Express\u00a0app that will handle a single request to a specific route.\u00a0This request will handle a query for getting a single user from a Mongo database.\u00a0We will define a single route and an additional function that will be in charge of actually retrieving the user from the db.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"javascript\">var CFError    = require('cf-errors');\r\nvar Errors     = CFError.Errors;\r\nvar Q          = require('q');\r\nvar express    = require('express');\r\n\r\nvar UserNotFoundError = {\r\n    name: \"UserNotFoundError\"\r\n};\r\n\r\nvar app = express();\r\n\r\napp.get('\/user\/:id', function (request, response, next) {\r\n    var userId = request.params.id;\r\n    if (userId !== \"coolId\") {\r\n        return next(new CFError(Errors.Http.BadRequest, {\r\n            message: \"Id must be coolId.\",\r\n            internalCode: 04001,\r\n            recognized: true\r\n        }));\r\n    }\r\n\r\n    findUserById(userId)\r\n        .done((user) =&gt; {\r\n            response.send(user);\r\n        }, (err) =&gt; {\r\n            if (err.name === UserNotFoundError.name) {\r\n                next(new CFError(Errors.Http.NotFound, {\r\n                    internalCode: 04041,\r\n                    cause: err,\r\n                    message: `User ${userId} could not be found`,\r\n                    recognized: true\r\n                }));\r\n            }\r\n            else {\r\n                next(new CFError(Errors.Http.InternalServer, {\r\n                    internalCode: 05001,\r\n                    cause: err\r\n                }));\r\n            }\r\n        });\r\n});\r\n\r\nvar findUserById = function (userId) {\r\n    return User.findOne({_id: userId})\r\n        .exec((user) =&gt; {\r\n            if (user) {\r\n                return user;\r\n            }\r\n            else {\r\n                return Q.reject(new CFError(UserNotFoundError, `Failed to retrieve user: ${userId}`));\r\n            }\r\n        })\r\n};<\/pre>\n<p>A few things to notice:<\/p>\n<ul>\n<li>When creating an error, you have the ability to provide predefined http errors that\u00a0you can then extend.<\/li>\n<li>You can add a &#8217;cause&#8217; property when creating an error that\u00a0will chain a previous error to\u00a0the new one. When printing the stack of an error you will receive the full stack trace of the whole chain printed in a readable manner.<\/li>\n<li>You can add any additional fields you want to the error object. We will explain the use of &#8216;internalCode&#8217; and &#8216;recognized&#8217; later.<\/li>\n<li>You have the ability to define your error objects outside of your code and then just reference them when creating an error.<\/li>\n<\/ul>\n<p>Let&#8217;s go ahead and add an error middleware to our Express app.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"javascript\">app.use(function (err, request, response, next) {\r\n    var error;\r\n    if (!(err instanceof CFError)){\r\n        error = new CFError(Errors.Http.InternalServer, {\r\n            cause: err\r\n        }); \r\n    }\r\n    else {\r\n        if (!err.statusCode){\r\n            error = new CFError(Errors.Http.InternalServer, {\r\n                cause: err\r\n            });\r\n        }\r\n        else {\r\n            error = err;\r\n        }\r\n    }\r\n    \r\n    console.error(error.stack);\r\n    return response.status(error.statusCode).send(error.message);\r\n});<\/pre>\n<p>A few things to notice:<\/p>\n<ul>\n<li>We make sure that the final error that is\u00a0printed to the log and returned to the user is\u00a0always a &#8216;CFError&#8217; object. This\u00a0will allow you to add additional logic to the error middleware.<\/li>\n<li>All predefined http errors have a built in &#8216;statusCode&#8217; property and a &#8216;message&#8217; property already populated for your use.<\/li>\n<li>Extending your errors will allow you to have all the error handling logic inside one place. You will not\u00a0need to worry about having to print every error object when it is created, rather you print the stack trace only once and get the whole execution flow and context.<\/li>\n<\/ul>\n<p>Let&#8217;s now change the way we return errors to our clients and return an object instead of just the top level error message.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"javascript\">return response.status(error.statusCode).send({\r\n    message: error.message,\r\n    statusCode: error.statusCode,\r\n    internalCode: error.internalCode\r\n});<\/pre>\n<p>Great! We now have a unified process of returning errors to our clients.<\/p>\n<h2>Reporting errors to monitoring systems<\/h2>\n<p>At\u00a0Codefresh, we use\u00a0New Relic\u00a0as our APM monitoring system.\u00a0We noticed that the errors we generated and reported to New Relic could\u00a0be categorized\u00a0into two groups: the first consisted\u00a0of all errors that were\u00a0generated because of thrown and unexpected behavior of our servers. The second (business exceptions) consisted of all errors that were\u00a0generated as part of good analysis and a correct handling of our servers. Reporting the second type of errors to New Relic\u00a0made our Apdex score decrease\u00a0in unpredictable ways which would result in false positive alarms that we received from our alerting systems.<\/p>\n<p>So we came up with a new convention. Whenever we conclude that a generated\u00a0error is a result of correct behavior of our system, we construct an error and attach\u00a0an additional field named &#8216;recognized&#8217; to it. We wanted the ability to put the &#8216;recognized&#8217; field on a specific error in the chain, but still be able to get its value even if higher errors did not contain this field. We exposed a function on the CFError object named\u00a0&#8216;getFirstValue&#8217; which will retrieve the first value it encounters in the whole\u00a0chain. Let&#8217;s see how we use this in Codefresh.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"javascript\">app.use(function (err, request, response, next) {\r\n    var error;\r\n    if (!(err instanceof CFError)){\r\n        error = new CFError(Errors.Http.InternalServer, {\r\n            cause: err\r\n        });\r\n    }\r\n    else {\r\n        if (!err.statusCode){\r\n            error = new CFError(Errors.Http.InternalServer, {\r\n                cause: err\r\n            });\r\n        }\r\n        else {\r\n            error = err;\r\n        }\r\n    }\r\n\r\n    if (!error.getFirstValue('recognized')){\r\n        nr.noticeError(error); \/\/report to monitoring systems (newrelic in our case)\r\n    }\r\n\r\n    console.error(error.stack);\r\n    return response.status(error.statusCode).send({\r\n        message: error.message,\r\n        statusCode: error.statusCode,\r\n        internalCode: error.internalCode\r\n    });\r\n});<\/pre>\n<p>A few things to notice:<\/p>\n<ul>\n<li>Because we already know we are only dealing with CFError objects, we only had to add two lines of code to support this.<\/li>\n<li>Since we are explicitly deciding which errors we actually want to send, if you are using New Relic you will need to manually disable the automatic sending of all errors. Currently, in order to achieve this you will need to manually add all http errors\u00a0status codes to the &#8216;ignore_status_codes&#8217; field inside the &#8216;newrelic.js&#8217;\u00a0config file. We have already opened a ticket for the New Relic support team to provide\u00a0an easier way to do this.\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"javascript\">exports.config = {\r\n  error_collector: {\r\n    ignore_status_codes: [400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 426, 428, 429, 431, 451, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511]\r\n  }\r\n};<\/pre>\n<\/li>\n<\/ul>\n<h2>In conclusion<\/h2>\n<p>Getting the best out of your errors requires not only a good error module, but also well-defined processes of when, where and how you do it. You will need to follow your defined\u00a0patterns, otherwise it tends to get messy.<br \/>\nReporting only real\u00a0errors to a monitoring system is vital for your ability as a company to detect and solve problems after they have occurred.<\/p>\n<p>CFError github page:\u00a0<a href=\"https:\/\/github.com\/codefresh-io\/cf-errors\" target=\"_blank\" rel=\"noopener\">https:\/\/github.com\/codefresh-io\/cf-errors<br \/>\n<\/a>CFError npm page:\u00a0<a href=\"https:\/\/www.npmjs.com\/package\/cf-errors\" target=\"_blank\" rel=\"noopener\">https:\/\/www.npmjs.com\/package\/cf-errors<\/a><\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"690\"\/>","protected":false},"excerpt":{"rendered":"<p>How many times have\u00a0you found\u00a0yourself viewing a stack trace in your terminal or inside your monitoring systems and been\u00a0unable\u00a0to understand anything from it? If the answer is &#8216;a lot&#8217;, then this blog post is for you. If you do not suffer from this problem often, you might still find this interesting. When dealing with complex &hellip; <a href=\"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/\">Read more<\/a><\/p>\n","protected":false},"author":13,"featured_media":776,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[8],"tags":[19,20,21,22],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Getting the Most Out of Your Node.js Errors | Codefresh<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Getting the Most Out of Your Node.js Errors\" \/>\n<meta property=\"og:description\" content=\"How many times have\u00a0you found\u00a0yourself viewing a stack trace in your terminal or inside your monitoring systems and been\u00a0unable\u00a0to understand anything from it? If the answer is &#8216;a lot&#8217;, then this blog post is for you. If you do not suffer from this problem often, you might still find this interesting. When dealing with complex &hellip; Read more\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2016-08-21T05:26:14+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-03-01T17:21:12+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/08\/node-js-errors-new.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1930\" \/>\n\t<meta property=\"og:image:height\" content=\"400\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@codefresh\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Itai Gendler\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"6 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/08\/node-js-errors-new.jpg\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/08\/node-js-errors-new.jpg\",\"width\":1930,\"height\":400},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/#webpage\",\"url\":\"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/\",\"name\":\"Getting the Most Out of Your Node.js Errors | Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/#primaryimage\"},\"datePublished\":\"2016-08-21T05:26:14+00:00\",\"dateModified\":\"2022-03-01T17:21:12+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Getting the Most Out of Your Node.js Errors\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/99ac475056e736de4f29afe8d083e2b1\"},\"headline\":\"Getting the Most Out of Your Node.js Errors\",\"datePublished\":\"2016-08-21T05:26:14+00:00\",\"dateModified\":\"2022-03-01T17:21:12+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/#webpage\"},\"wordCount\":1089,\"commentCount\":2,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/08\/node-js-errors-new.jpg\",\"keywords\":[\"node.js\",\"error\",\"newrelic\",\"monitoring\"],\"articleSection\":[\"Docker Tutorials\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/99ac475056e736de4f29afe8d083e2b1\",\"name\":\"Itai Gendler\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/97b995aaf39fabd4f71c0e11c943db1d?s=96&d=blank&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/97b995aaf39fabd4f71c0e11c943db1d?s=96&d=blank&r=g\",\"caption\":\"Itai Gendler\"},\"description\":\"Itai is the Chief Architect at Codefresh. He is an expert in CI, microservices, Mongo, Docker, and more.\",\"url\":\"https:\/\/codefresh.io\/author\/itai-gendler\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Getting the Most Out of Your Node.js Errors | Codefresh","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/","og_locale":"en_US","og_type":"article","og_title":"Getting the Most Out of Your Node.js Errors","og_description":"How many times have\u00a0you found\u00a0yourself viewing a stack trace in your terminal or inside your monitoring systems and been\u00a0unable\u00a0to understand anything from it? If the answer is &#8216;a lot&#8217;, then this blog post is for you. If you do not suffer from this problem often, you might still find this interesting. When dealing with complex &hellip; Read more","og_url":"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2016-08-21T05:26:14+00:00","article_modified_time":"2022-03-01T17:21:12+00:00","og_image":[{"width":1930,"height":400,"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/08\/node-js-errors-new.jpg","type":"image\/jpeg"}],"twitter_card":"summary_large_image","twitter_creator":"@codefresh","twitter_site":"@codefresh","twitter_misc":{"Written by":"Itai Gendler","Est. reading time":"6 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/08\/node-js-errors-new.jpg","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/08\/node-js-errors-new.jpg","width":1930,"height":400},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/#webpage","url":"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/","name":"Getting the Most Out of Your Node.js Errors | Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/#primaryimage"},"datePublished":"2016-08-21T05:26:14+00:00","dateModified":"2022-03-01T17:21:12+00:00","breadcrumb":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Getting the Most Out of Your Node.js Errors"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/99ac475056e736de4f29afe8d083e2b1"},"headline":"Getting the Most Out of Your Node.js Errors","datePublished":"2016-08-21T05:26:14+00:00","dateModified":"2022-03-01T17:21:12+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/#webpage"},"wordCount":1089,"commentCount":2,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/08\/node-js-errors-new.jpg","keywords":["node.js","error","newrelic","monitoring"],"articleSection":["Docker Tutorials"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/docker-tutorial\/getting-node-js-errors-monitoring-systems\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/99ac475056e736de4f29afe8d083e2b1","name":"Itai Gendler","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/97b995aaf39fabd4f71c0e11c943db1d?s=96&d=blank&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/97b995aaf39fabd4f71c0e11c943db1d?s=96&d=blank&r=g","caption":"Itai Gendler"},"description":"Itai is the Chief Architect at Codefresh. He is an expert in CI, microservices, Mongo, Docker, and more.","url":"https:\/\/codefresh.io\/author\/itai-gendler\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/690"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/13"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=690"}],"version-history":[{"count":2,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/690\/revisions"}],"predecessor-version":[{"id":21743,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/690\/revisions\/21743"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/776"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=690"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=690"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=690"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}