{"id":7047,"date":"2018-02-01T18:01:42","date_gmt":"2018-02-01T18:01:42","guid":{"rendered":"https:\/\/codefresh.io\/?p=7047"},"modified":"2022-03-24T20:40:21","modified_gmt":"2022-03-24T20:40:21","slug":"simple-canary-codefresh-k8s-2","status":"publish","type":"post","link":"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/","title":{"rendered":"Simple Canary with Codefresh and K8s"},"content":{"rendered":"<h2>Introduction:<\/h2>\n<p>Canary releases (or deployments) are a modern software delivery technique allowing stress-free rollouts of new application versions into production environments.<\/p>\n<p>The idea is to deploy the new release alongside the current functional version and send a small percent of production traffic to the new instances (the canary) . If the canary stays healthy and provides satisfactory service &#8211; we can then incrementally update all of our production environment to use the new version.<\/p>\n<p>The concept is pretty simple, but the implementation details can differ based on your overall system topology, data structure and observability level.<\/p>\n<p>Today we are going to look at a simple example of canary release pattern implemented with the help of Codefresh-Kubernetes integration.<!--more--><\/p>\n<h2>The Flow<\/h2>\n<p>Kubernetes provides us with advanced deployment tooling out of the box, so the main challenge with implementing canary releases does not lie in the deployment. It\u2019s about defining the criteria of canary health and implementing it.<\/p>\n<p>The flow here can be as complex or as simple as required by your specific environment.<\/p>\n<p>The number and type of required verification points, manual or automated approval processes, etc.<\/p>\n<p>For the sake of our example we\u2019ve defined the following, fully automated flow:<\/p>\n<p><img class=\"alignnone size-full wp-image-7048\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/01\/Simple-Canary-with-Codefresh-and-K8s.png\" alt=\"\" width=\"800\" height=\"600\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/01\/Simple-Canary-with-Codefresh-and-K8s.png 800w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/01\/Simple-Canary-with-Codefresh-and-K8s-300x225.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/01\/Simple-Canary-with-Codefresh-and-K8s-768x576.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/01\/Simple-Canary-with-Codefresh-and-K8s-437x328.png 437w\" sizes=\"(max-width: 800px) 100vw, 800px\" \/><\/p>\n<p>As you can see &#8211; this flow involves 2 checkpoints on the way from canary to production. We first test canary in isolation and then check the overall system health with some of the traffic redirected to canary instances.<\/p>\n<p>Now let\u2019s see how Codefresh makes this possible.<\/p>\n<h2>The example<\/h2>\n<p>Canary is a small cute bird so we decided to dedicate our demo deployment to birds in general. We will be deploying an ornithology data management service written in Python with a mongodb backend.<\/p>\n<p>The application name is just that: <strong>ornithology<\/strong>.<\/p>\n<p>(If you look this up on Wikipedia \u00a0&#8211; it\u2019s the scientific study of birds.)<\/p>\n<h3>Example Repositories<\/h3>\n<ul>\n<li>The code and all the configuration files &#8211;\u00a0<a href=\"https:\/\/github.com\/otomato-gh\/ornithology\">https:\/\/github.com\/otomato-gh\/ornithology<\/a><\/li>\n<li>Configuration files and Codefresh pipeline examples head to:\u00a0<a href=\"https:\/\/github.com\/Codefresh-Examples\/Examples\/tree\/master\/canary-release\">https:\/\/github.com\/Codefresh-Examples\/Examples\/tree\/master\/canary-release<\/a><\/li>\n<\/ul>\n<p>Application code is all in the file named <span class=\"lang:default decode:true crayon-inline \">api.py<\/span>\u00a0\u00a0with data structures defined in <span class=\"lang:default decode:true crayon-inline\">settings.py<\/span>\u00a0.<\/p>\n<p>There are 2 dockerfiles in our repo: one named <span class=\"lang:default decode:true crayon-inline \">Dockerfile<\/span>\u00a0\u00a0that is used to package and execute the application code and the other one named <span class=\"lang:default decode:true crayon-inline \">Dockerfile.test<\/span>\u00a0\u00a0used to package and execute the tests. This is needed because we will run all of our tests inside the K8s cluster and we will use Docker to send them there.<\/p>\n<h2>Codefresh Pipelines<\/h2>\n<p>Our goal in this example is to implement the <b>trunk-based development <\/b>and delivery pattern. We will do this by associating 2 Codefresh pipelines with the same github repository. Both watching the master branch.<\/p>\n<h2>The Canary Pipeline<\/h2>\n<p>First pipeline is called <b>ornithology-canary. <\/b>It is triggered by a Github webhook for each new master commit and is configured to use <i>codefresh-canary.yml<\/i> as its flow definition.<\/p>\n<h2><img class=\"alignnone size-full wp-image-7051\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/01\/Screen-Shot-2018-01-30-at-1.53.32-PM.png\" alt=\"\" width=\"822\" height=\"239\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/01\/Screen-Shot-2018-01-30-at-1.53.32-PM.png 822w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/01\/Screen-Shot-2018-01-30-at-1.53.32-PM-300x87.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/01\/Screen-Shot-2018-01-30-at-1.53.32-PM-768x223.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/01\/Screen-Shot-2018-01-30-at-1.53.32-PM-628x183.png 628w\" sizes=\"(max-width: 822px) 100vw, 822px\" \/><\/h2>\n<p>Let\u2019s see what this looks like:<\/p>\n<p>As you can see &#8211; there\u2019s quite a lot going on here. So let\u2019s walk through this step by step.<\/p>\n<p>We first build and push the images for the application and for test execution. Steps appropriately named <b>buildAppImage, pushAppImage, buildTestImage <\/b>and<b> pushTestImage <\/b>take care of that:<\/p>\n<pre class=\"lang:default decode:true\">version: '1.0'\r\nsteps:\r\n  buildAppImage:\r\n    type: build\r\n    description: Builds my service\r\n    image_name: otomato\/ornithology\r\n    tag: ${{CF_SHORT_REVISION}}\r\n  pushAppImage:\r\n    type: push\r\n    candidate: ${{buildAppImage}}\r\n    tag: ${{CF_SHORT_REVISION}}\r\n  buildTestImage:\r\n    type: build\r\n    description: Builds image with tests\r\n    dockerfile: Dockerfile.test\r\n    image_name: otomato\/ornitest\r\n    tag: ${{CF_SHORT_REVISION}}\r\n  pushTestImage:\r\n    type: push\r\n    candidate: ${{buildTestImage}}\r\n    tag: ${{CF_SHORT_REVISION}}<\/pre>\n<p>The step <strong>deployToK8s<\/strong> then uses the K8s deployment definition residing in <strong>orni-dep-canary.yml<\/strong> to deploy our new version to the production\u00a0cluster. ( We\u2019ll take a look at the \u00a0deployment file in a minute.)<\/p>\n<pre class=\"lang:default decode:true\">deployToK8s:\r\n    title: deploy-to-k8s\r\n    image: codefresh\/k8s-kubectl\r\n    commands:\r\n      - sed -i -- \"s\/BUILD_NUMBER\/${{CF_SHORT_REVISION}}\/g\" orni-dep-canary.yml\r\n      - kubectl config use-context cf-staging@codefresh-staging\r\n      - kubectl apply -f orni-dep-canary.yml -n otom8<\/pre>\n<p>In <b>testCanary<\/b> we run an end-to-end integration test on the canary in order to verify its health.<\/p>\n<pre class=\"lang:default decode:true\">testCanary:\r\n    title: testCanary\r\n    image: codefresh\/k8s-kubectl\r\n    commands:\r\n      - kubectl config use-context cf-staging@codefresh-staging\r\n      - kubectl run e2e --image=otomato\/ornitest:${{CF_SHORT_REVISION}} --attach=true --restart=Never --rm=true -n=otom8 --  \"\/tests\/it\/canarytest.sh\"\r\n      - cf_export CANARY_EXIT_FLAG=$?\r\n    fail-fast: false\r\n<\/pre>\n<p>If the test fails \u00a0&#8211; we rollback the canary release:<\/p>\n<pre class=\"lang:default decode:true\">rollbackCanary:\r\n    title: rollbackCanary\r\n    image: codefresh\/k8s-kubectl\r\n    commands:\r\n      - echo \"Canary didn't pass isolation gate. Rolling back\"\r\n      - kubectl delete -f orni-dep-canary.yml -n otom8\r\n    when:\r\n      condition:\r\n        all:\r\n          canaryTestFailed: \"'${{CANARY_EXIT_FLAG}}' != '0'\"\r\n<\/pre>\n<p>If all goes well &#8211; we proceed to <b>verifyCanaryInProd <\/b>where we open 10% of production traffic to the canary instance and verify that some of the traffic indeed gets served by it.<\/p>\n<pre class=\"lang:yaml decode:true\">verifyCanaryInProd:\r\n  title: verifyCanaryInProd\r\n  image: codefresh\/k8s-kubectl\r\n  commands:\r\n    - kubectl config use-context cf-staging@codefresh-staging\r\n    - export PODNAME=`kubectl get pods -n otom8 | grep canary | cut -d ' '  -f 1`\r\n    - kubectl label pod $PODNAME run=ornithology -n otom8\r\n    - kubectl run verify --image=otomato\/ornitest:${{CF_SHORT_REVISION}} --attach=true --restart=Never --rm=true -n=otom8 --  \"\/tests\/it\/version_verify.sh\"\r\n<\/pre>\n<p>Once that is completed &#8211; we call <b>triggerProdDeployment <\/b>which executes Codefresh CLI \u00a0to run our second pipeline.<\/p>\n<pre class=\"lang:default decode:true\">triggerProdDeployment:\r\n  image: codefresh\/cli:latest\r\n  commands:\r\n    - codefresh run 5a5e15cc8aced0000153ba08 -b master -detach\r\n<\/pre>\n<p>&nbsp;<\/p>\n<h2>The Production Pipeline<\/h2>\n<p>This pipeline is called simply <b>\u2018ornithology\u2019<\/b> . It gets triggered by the canary pipeline. It only has one step that updates a K8s deployment file with the docker image version created in the canary pipeline and then triggers a rolling update of all production pods with the new image version.<\/p>\n<p><img class=\"alignnone size-full wp-image-7049\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/01\/Screen-Shot-2018-01-24-at-11.47.40-AM.png\" alt=\"\" width=\"994\" height=\"285\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/01\/Screen-Shot-2018-01-24-at-11.47.40-AM.png 994w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/01\/Screen-Shot-2018-01-24-at-11.47.40-AM-300x86.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/01\/Screen-Shot-2018-01-24-at-11.47.40-AM-768x220.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/01\/Screen-Shot-2018-01-24-at-11.47.40-AM-628x180.png 628w\" sizes=\"(max-width: 994px) 100vw, 994px\" \/><\/p>\n<p>Here\u2019s what it looks like:<\/p>\n<pre class=\"lang:default decode:true\">version: '1.0'\r\nsteps:\r\n  deployToK8s:\r\n  title: deploy-to-k8s\r\n    image: codefresh\/k8s-kubectl\r\n    commands:\r\n      - sed -i -- \"s\/BUILD_NUMBER\/${{CF_SHORT_REVISION}}\/g\" orni-dep.yml\r\n      - kubectl config use-context cf-staging@codefresh-staging\r\n      - kubectl apply -f orni-dep.yml -n otom8<\/pre>\n<h2>Nuts and Bolts<\/h2>\n<p>Now that we\u2019ve scanned the overall pipelines structure, let\u2019s look under the hood to get a better understanding af all those cryptic <strong>kubectl<\/strong> commands and shell scripting wizardry.<\/p>\n<h2>The Deployment Files<\/h2>\n<p>We are using two K8s declarative definition YAML files: one for the production instances and another one for the canary.<\/p>\n<p>The production one is called <span class=\"lang:default decode:true crayon-inline \">orni-dep.yaml<\/span>\u00a0\u00a0and declares 2 K8s resources:<\/p>\n<ol>\n<li>An externally visible LoadBalancer type service named \u2018ornithology\u2019\n<ol>\n<li>That exposes pods based on\u00a0<strong>app=ornithology<\/strong>\u00a0and\u00a0<strong>production=ready<\/strong>\u00a0labels<\/li>\n<\/ol>\n<\/li>\n<li>A deployment, also named \u2018ornithology\u2019\n<ol>\n<li>That creates 9 replicas of our application pod with the matching <b>app=ornithology<\/b> and <b>production=ready <\/b>labels<\/li>\n<\/ol>\n<\/li>\n<\/ol>\n<p>Note the container spec of the deployment object:<\/p>\n<pre class=\"lang:default decode:true\" title=\"K8S deployment container spec\">spec:\r\n  containers:\r\n    - name: ornithology\r\n      image: otomato\/ornithology:<span style=\"color: #ff0000;\"><strong>BUILD_NUMBER<\/strong><\/span>\r\n      ports:\r\n        - containerPort: 5000<\/pre>\n<p>The image tag <span class=\"lang:default decode:true crayon-inline \">BUILD_NUMBER<\/span>\u00a0 is not an actual tag but a placeholder which gets replaced inside our Codefresh pipeline with the actual tag of the newly built image:<\/p>\n<pre class=\"lang:default decode:true\">- sed -i -- \"s\/BUILD_NUMBER\/${{CF_SHORT_REVISION}}\/g\" orni-dep.yml<\/pre>\n<p>(This could be of course better implemented using a Helm chart, but I\u2019ve decided to keep this example simpler and not add Helm into the mix.)<\/p>\n<p>You will also notice that the deployment strategy for production pods is set to RollingUpdate, which means that once we are satisfied with the canary and ready to upgrade them \u00a0&#8211; they are replaced in a zero-downtime, ramped manner.<\/p>\n<p>The canary deployment declaration resides in <b>orni-dep.yaml.<\/b> It also defines 2 resources:<\/p>\n<ol>\n<li>A cluster-visible ClusterIp type service named \u2018ornithology-canary\u2019\n<ol>\n<li>That exposes pods based on <b>type=canary<\/b> label<\/li>\n<\/ol>\n<\/li>\n<li>A deployment, also named \u2018ornithology-canary\u2019\n<ol>\n<li>That creates 1 replica of our application pod with the matching <b>type=canary <\/b>label.<\/li>\n<\/ol>\n<\/li>\n<\/ol>\n<p>This allows us to roll out the canary to the same cluster and namespace as the production but initially invisible to clients talking to the production version.<\/p>\n<h2>Canary Gates<\/h2>\n<p><img class=\"alignnone size-full wp-image-7054\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/01\/Simple-Canary-with-Codefresh-and-K8s2.png\" alt=\"\" width=\"710\" height=\"164\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/01\/Simple-Canary-with-Codefresh-and-K8s2.png 710w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/01\/Simple-Canary-with-Codefresh-and-K8s2-300x69.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/01\/Simple-Canary-with-Codefresh-and-K8s2-628x145.png 628w\" sizes=\"(max-width: 710px) 100vw, 710px\" \/><\/p>\n<p>As we already said &#8211; the real challenge with canary is building the quality gate that defines when and if the new version satisfies all the requirements and can incrementally be exposed to more production users.<\/p>\n<p>This gate could of course be purely manual. I.e &#8211; deploy the canary version, let it run for a while, analyze its logs and metrics to see if everything is working fine and then release to production.<\/p>\n<p>But manual techniques are slow, unreliable and scale really-really bad. So for a real canary islands paradise you need some automated solution that will approve your application health and send it to production when everything looks sunny.<\/p>\n<p>In a real-world environment you\u2019ll want such a solution to integrate with your observability platform. In fact &#8211; our example application is already instrumented to output metrics that can be scraped by Prometheus.<\/p>\n<p>But here again &#8211; for the sake of simplicity I decided not to look into reading and programmatically analyzing Prometheus metrics.<\/p>\n<p>Instead we will be running some shell scripts to verify that application provides responses with acceptable latency and to test basic functionality.<\/p>\n<h3>Gate 1: Test in Isolation<\/h3>\n<p>As we already discussed &#8211; the canary is first exposed only to the K8S cluster via the <b>ornithology-canary<\/b> NodePort type service. This is done by matching pod label <b>type=canary<\/b> to the corresponding service selector.<\/p>\n<p>Once the service is up &#8211; we can test application health by sending requests only to the canary pod(s).<\/p>\n<p>As the service is not available outside of the cluster &#8211; we\u2019ll need to run the tests inside our cluster and namespace. Here is the step that does exactly that in codefresh.yml:<\/p>\n<pre class=\"lang:default decode:true\">testCanary:\r\n    title: testCanary\r\n    image: codefresh\/k8s-kubectl\r\n    commands:\r\n      - kubectl config use-context cf-staging@codefresh-staging\r\n      - kubectl run e2e --image=otomato\/ornitest:${{CF_SHORT_REVISION}} --attach=true --restart=Never --rm=true -n=otom8 --  \"\/tests\/it\/canarytest.sh\"\r\n      - cf_export CANARY_EXIT_FLAG=$?\r\n    fail-fast: false<\/pre>\n<p>We are using the test image we built earlier and running it in the cluster as a one-shot job using <i>&#8211;attach=true<\/i> to get the job exit code back into Codefresh.<\/p>\n<p>If the test script fails, it will exit with non-zero exit code, which will also fail the pod and therefore this pipeline step will be marked as failed.<\/p>\n<p>Note the use of<span class=\"lang:default decode:true crayon-inline \">fail-fast: false<\/span>\u00a0and <span class=\"lang:default decode:true crayon-inline \">cf_export<\/span>\u00a0<i>\u00a0<\/i>&#8211; this is how we record test results in order to rollback the canary if they failed. The rollback criteria is then evaluated in the next step:<\/p>\n<pre class=\"lang:default decode:true\">rollbackCanary:\r\n    title: rollbackCanary\r\n    image: codefresh\/k8s-kubectl\r\n    commands:\r\n      - echo \"Canary didn't pass isolation gate. Rolling back\"\r\n      - kubectl delete -f orni-dep-canary.yml -n otom8\r\n    when:\r\n      condition:\r\n        all:\r\n          canaryTestFailed: \"'${{CANARY_EXIT_FLAG}}' != '0'\"\r\n<\/pre>\n<p>We will use the same mechanism of result evaluation and rollback for the next quality gate.<\/p>\n<p>The verification itself is done by the test script that is found in tests\/it\/canarytest.sh<\/p>\n<p>It first waits for the application to return a response within a satisfactory timeout. If the response is not returned &#8211; verification is failed. This is similar to how we\u2019re defining the <i>readinessProbe <\/i>for the canary pod. Both the probe and the verificator script try to hit the same \/ping application endpoint.<\/p>\n<p>This endpoint is set to have an initial latency of 10 seconds which decreases with each incoming request. The difference here is that the service doesn\u2019t even start sending traffic to the pod until the <i>readinessProbe<\/i> is satisfied.<\/p>\n<p>Once the service becomes available &#8211; the verificator does its own checks. If the response arrives &#8211; the script proceeds to running the integration test. This involves reading and writing some actual ornithology data to and from the database.<\/p>\n<p>If all goes well &#8211; we conclude that the canary is alive and healthy and proceed to the next gate.<\/p>\n<h3>Gate 2: Test in Production<\/h3>\n<p>Now that our canary grew stronger we can try and expose it to the poisonous winds of production workloads. We do this by attaching\u00a0<strong>app=ornithology<\/strong> and <strong>production=read<\/strong>y labels to it. This tells the \u2018ornithology\u2019 service to route part of the incoming traffic to the canary pod.<\/p>\n<p>In our case this will be approximately 10% \u00a0&#8211; as we\u2019re running 9 replicas of the production version and 1 instance for the canary.<\/p>\n<p>We then verify that the whole system continues to function as expected, while the canary is in fact getting the designated traffic:<\/p>\n<pre class=\"lang:default decode:true\">verifyCanaryInProd:\r\n    title: verifyCanaryInProd\r\n    image: codefresh\/k8s-kubectl\r\n    commands:\r\n     - kubectl config use-context cf-staging@codefresh-staging\r\n     - export PODNAME=`kubectl get pods -n otom8 | grep canary | cut -d ' '  -f 1`\r\n     - kubectl label pod $PODNAME app=ornithology production=ready -n otom8\r\n     - kubectl run verify --image=otomato\/ornitest:${{CF_SHORT_REVISION}} --attach=true --restart=Never --rm=true -n=otom8 --  \"\/tests\/it\/version_verify.sh\"\r\n     - cf_export CANARY_EXIT_FLAG=$?\r\n<\/pre>\n<p>If this step also goes well &#8211; we can either open some more traffic to canary \u00a0(by deploying more replicas of the new version or replacing some of the production pods) or just roll out straight to production if we\u2019re satisfied with the results.<\/p>\n<h2>Letting the Canary Out<\/h2>\n<p>If we passed both the gates, we are ready to promote the canary to production use. If any of the previous gates had failed, the pipeline would have stopped and we wouldn\u2019t have reached this step of promoting the canary.<\/p>\n<p>For this example, let\u2019s assume that the 10% traffic check is a strong enough criteria for release approval.<\/p>\n<p>Therefore in the next step we just trigger the Codefresh production pipeline as shown below:<\/p>\n<pre class=\"lang:default decode:true\">triggerProdDeployment:\r\n    image: codefresh\/cli:latest\r\n    commands:\r\n      - codefresh run 5a5e15cc8aced0000153ba08 -b master -detach\r\n<\/pre>\n<p>This is done using the brand new Codefresh cli which you can read more about here: <a href=\"http:\/\/cli.codefresh.io\/\">http:\/\/cli.codefresh.io\/<\/a><\/p>\n<p>The production pipeline doesn\u2019t need to rebuild the application image (remember the CI\/CD mantra : <em>build artifacts only once<\/em>) &#8211; it just does the tag replacement trick in the K8s deployment file and triggers a rolling update of production replicas to the new image version.<\/p>\n<p>Here are all our services and pods shown in Codefresh K8S dashboard:<br \/>\n<img class=\"alignnone size-large wp-image-7058\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/01\/Screen-Shot-2018-01-31-at-2.48.50-PM-1024x381.png\" alt=\"\" width=\"1024\" height=\"381\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/01\/Screen-Shot-2018-01-31-at-2.48.50-PM-1024x381.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/01\/Screen-Shot-2018-01-31-at-2.48.50-PM-300x112.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/01\/Screen-Shot-2018-01-31-at-2.48.50-PM-768x286.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/01\/Screen-Shot-2018-01-31-at-2.48.50-PM-628x234.png 628w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/01\/Screen-Shot-2018-01-31-at-2.48.50-PM.png 1062w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/p>\n<h2>Stepping Up Your Canary Game<\/h2>\n<p>Canary deployments provide tremendous value, but they aren\u2019t that easy to pull off. With all the simplicity there is quite a lot of detail in our tiny example. We haven\u2019t even discussed rolling back the canary if something goes wrong! And then there are the questions of data compatibility, API versioning and inter-service dependencies. You can not cover it all in one blog post. We will do our best to touch upon each of these topics separately in future publications.<\/p>\n<p>Another point to remember is that, using Kubernetes standard LoadBalancer type service only allows simple round-robin traffic distribution between canary and production instances. That\u2019s why we had to deploy at least 9 replicas of the production version in order to be able to route 10% percent of traffic to the canary.<\/p>\n<p>For more advanced traffic splitting, one could use a smarter Ingress resource based on Nginx, for example.<\/p>\n<p>In further posts we\u2019ll provide an example of how this is done.<\/p>\n<p>It\u2019s also worth noting that our example is fully synchronous and blocking &#8211; i.e all the canary verifications are executed inside of the pipeline. In a real-life scenario such a pipeline could take quite a while to complete. A better strategy would be introducing a cluster-side listener that would orchestrate canary availability and trigger further Codefresh pipelines when canary quality gates are passed. We\u2019ve started looking into developing such a component to complete this flow.<\/p>\n<p>We do hope that today\u2019s example provides a glimpse of how one can achieve canary bliss by combining Codefresh and Kubernetes. Feel free to send us your feedback, ask questions and raise doubts. Codefresh engineers are here to help!<\/p>\n<p>New to Codefresh? Get started with Codefresh by <strong><a href=\"https:\/\/codefresh.io\/codefresh-signup\/?utm_source=Blog&amp;utm_medium=Post&amp;utm_campaign=CanaryB\">signing up for an account<\/a><\/strong> today!<\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"7047\"\/>","protected":false},"excerpt":{"rendered":"<p>Introduction: Canary releases (or deployments) are a modern software delivery technique allowing stress-free rollouts of new application versions into production environments. The idea is to deploy the new release alongside the current functional version and send a small percent of production traffic to the new instances (the canary) . If the canary stays healthy and &hellip; <a href=\"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/\">Read more<\/a><\/p>\n","protected":false},"author":9,"featured_media":7072,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[1657],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Simple Canary with Codefresh and K8s | Codefresh<\/title>\n<meta name=\"description\" content=\"Canary releases are a modern software delivery technique allowing stress-free rollouts of new application versions into production environments.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Simple Canary with Codefresh and K8s\" \/>\n<meta property=\"og:description\" content=\"Canary releases are a modern software delivery technique allowing stress-free rollouts of new application versions into production environments.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2018-02-01T18:01:42+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-03-24T20:40:21+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/02\/Kubernetes-canary.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1534\" \/>\n\t<meta property=\"og:image:height\" content=\"401\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@antweiss\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Anton Weiss\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"12 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/02\/Kubernetes-canary.jpg\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/02\/Kubernetes-canary.jpg\",\"width\":1534,\"height\":401},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/#webpage\",\"url\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/\",\"name\":\"Simple Canary with Codefresh and K8s | Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/#primaryimage\"},\"datePublished\":\"2018-02-01T18:01:42+00:00\",\"dateModified\":\"2022-03-24T20:40:21+00:00\",\"description\":\"Canary releases are a modern software delivery technique allowing stress-free rollouts of new application versions into production environments.\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Simple Canary with Codefresh and K8s\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/93d9834241a4b1b862a21e1d9a42a39f\"},\"headline\":\"Simple Canary with Codefresh and K8s\",\"datePublished\":\"2018-02-01T18:01:42+00:00\",\"dateModified\":\"2022-03-24T20:40:21+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/#webpage\"},\"wordCount\":2151,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/02\/Kubernetes-canary.jpg\",\"articleSection\":[\"Kubernetes Tutorials\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/93d9834241a4b1b862a21e1d9a42a39f\",\"name\":\"Anton Weiss\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/74279e1c79e1997c40057ee2c54a6454?s=96&d=blank&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/74279e1c79e1997c40057ee2c54a6454?s=96&d=blank&r=g\",\"caption\":\"Anton Weiss\"},\"description\":\"Ant(on) Weiss is a DevOps Evangelist and Enabler. He's been architecting software delivery processes at large and small companies for the last 15 years. Today he's the CEO and Principal Consultant at Otomato. When not evangelising for Codefresh, he's deeply involved with technical training and public speaking.\",\"sameAs\":[\"http:\/\/antweiss.com\",\"https:\/\/twitter.com\/antweiss\"],\"url\":\"https:\/\/codefresh.io\/author\/anton\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Simple Canary with Codefresh and K8s | Codefresh","description":"Canary releases are a modern software delivery technique allowing stress-free rollouts of new application versions into production environments.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/","og_locale":"en_US","og_type":"article","og_title":"Simple Canary with Codefresh and K8s","og_description":"Canary releases are a modern software delivery technique allowing stress-free rollouts of new application versions into production environments.","og_url":"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2018-02-01T18:01:42+00:00","article_modified_time":"2022-03-24T20:40:21+00:00","og_image":[{"width":1534,"height":401,"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/02\/Kubernetes-canary.jpg","type":"image\/jpeg"}],"twitter_card":"summary_large_image","twitter_creator":"@antweiss","twitter_site":"@codefresh","twitter_misc":{"Written by":"Anton Weiss","Est. reading time":"12 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/02\/Kubernetes-canary.jpg","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/02\/Kubernetes-canary.jpg","width":1534,"height":401},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/#webpage","url":"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/","name":"Simple Canary with Codefresh and K8s | Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/#primaryimage"},"datePublished":"2018-02-01T18:01:42+00:00","dateModified":"2022-03-24T20:40:21+00:00","description":"Canary releases are a modern software delivery technique allowing stress-free rollouts of new application versions into production environments.","breadcrumb":{"@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Simple Canary with Codefresh and K8s"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/93d9834241a4b1b862a21e1d9a42a39f"},"headline":"Simple Canary with Codefresh and K8s","datePublished":"2018-02-01T18:01:42+00:00","dateModified":"2022-03-24T20:40:21+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/#webpage"},"wordCount":2151,"commentCount":0,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/02\/Kubernetes-canary.jpg","articleSection":["Kubernetes Tutorials"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/kubernetes-tutorial\/simple-canary-codefresh-k8s-2\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/93d9834241a4b1b862a21e1d9a42a39f","name":"Anton Weiss","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/74279e1c79e1997c40057ee2c54a6454?s=96&d=blank&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/74279e1c79e1997c40057ee2c54a6454?s=96&d=blank&r=g","caption":"Anton Weiss"},"description":"Ant(on) Weiss is a DevOps Evangelist and Enabler. He's been architecting software delivery processes at large and small companies for the last 15 years. Today he's the CEO and Principal Consultant at Otomato. When not evangelising for Codefresh, he's deeply involved with technical training and public speaking.","sameAs":["http:\/\/antweiss.com","https:\/\/twitter.com\/antweiss"],"url":"https:\/\/codefresh.io\/author\/anton\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/7047"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/9"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=7047"}],"version-history":[{"count":2,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/7047\/revisions"}],"predecessor-version":[{"id":21978,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/7047\/revisions\/21978"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/7072"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=7047"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=7047"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=7047"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}