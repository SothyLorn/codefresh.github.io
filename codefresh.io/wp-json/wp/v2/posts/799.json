{"id":799,"date":"2016-09-13T15:32:30","date_gmt":"2016-09-13T15:32:30","guid":{"rendered":"https:\/\/codefresh.io\/?p=799"},"modified":"2022-02-09T14:30:41","modified_gmt":"2022-02-09T14:30:41","slug":"codefresh-jenkins-plugin-1-2-new-features","status":"publish","type":"post","link":"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/","title":{"rendered":"Pipelines-as-Code with the New Codefresh Jenkins Plugin"},"content":{"rendered":"<p>We are excited\u00a0to announce the release of the Jenkins Codefresh plugin version 1.2.<\/p>\n<p><span style=\"font-weight: 400;\">This release brings three\u00a0new important features : <\/span><\/p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Better branch support for Codefresh builds.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Ability to launch Codefresh compositions from Jenkins jobs.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">And most exciting: support for\u00a0Jenkins <a href=\"https:\/\/jenkins.io\/doc\/pipeline\/\">Pipeline<\/a>.<\/span><\/li>\n<\/ul>\n<p><span style=\"font-weight: 400;\">If you\u2019ve been using Jenkins lately, you probably\u00a0heard about the Pipeline Plugin,\u00a0an open-sourced rework of the workflow plugin from Cloudbees.\u00a0It gives you the ability to write your whole CI\/CD flow in a powerful and\u00a0very comprehensible Groovy DSL. <\/span><\/p>\n<p><span style=\"font-weight: 400;\">As with all Infrastructure-as-Code (IaC) initiatives, this Pipeline-as-Code initiative by Jenkins came about to address\u00a0the ever-growing scale and complexity of continuous delivery pipelines. The kind of scale where it becomes cumbersome, if not totally infeasible, to manage things manually or through the GUI,\u00a0accompanied by an escalated rate of change and the need to manage multiple branches, experiments, and sandbox environments. <\/span><\/p>\n<p><span style=\"font-weight: 400;\">In a <a href=\"https:\/\/codefresh.io\/blog\/integrate-codefresh-jenkins\/\">previous post<\/a>, we\u2019ve shown how you can easily complement your existing Jenkins pipelines by integrating them with Docker flows managed by Codefresh. Today we\u2019ll be looking at even more continuous delivery goodness. We\u2019ll start with an example of triggering Codefresh pipelines for building and testing all of the branches in your codebase. <\/span><\/p>\n<p><span style=\"font-weight: 400;\">You may want to do this if you know that some or all\u00a0of\u00a0your repository branches share the same dependency, and you want to retest them each time a dependency changes.<\/span><\/p>\n<p>But let\u2019s start with the basics.<\/p>\n<h2><span style=\"font-weight: 400;\">Branches are Easy<\/span><\/h2>\n<p><span style=\"font-weight: 400;\">In our <a href=\"https:\/\/codefresh.io\/blog\/integrate-codefresh-jenkins\/\">previous post<\/a> describing the Jenkins plugin we didn\u2019t deal with branches. Branch support was added later\u00a0and this is how it works: <\/span><\/p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">If you simply choose the option to \u2018Run Codefresh Build\u2019 and there\u2019s already a Git repository defined on your Jenkins job, the plugin will use whatever branch is used in Git definitions. <\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">If you choose to build a different Codefresh service\/pipeline, you\u2019re presented with an optional \u2018Branch\u2019 field. If left empty, the default branch will be used for the build.<\/span><\/li>\n<\/ul>\n<p><img class=\"alignnone size-full wp-image-800\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/Screen-Shot-2016-09-02-at-4.14.47-PM.png\" alt=\"Screen Shot 2016-09-02 at 4.14.47 PM\" width=\"414\" height=\"115\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/Screen-Shot-2016-09-02-at-4.14.47-PM.png 414w, https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/Screen-Shot-2016-09-02-at-4.14.47-PM-300x83.png 300w\" sizes=\"(max-width: 414px) 100vw, 414px\" \/><\/p>\n<p><span style=\"font-weight: 400;\">Pretty simple, isn\u2019t it?<\/span><\/p>\n<h2><span style=\"font-weight: 400;\">Branches as Code<\/span><\/h2>\n<p><span style=\"font-weight: 400;\">Now to the exciting stuff. Having Jenkins pipeline DSL support means we can codify the build triggers\u00a0for all of our branches. This is how it can be implemented:<\/span><\/p>\n<ol>\n<li style=\"list-style-type: none;\">\n<ol>\n<li style=\"list-style-type: none;\">\n<ol>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Make sure you\u2019re running Jenkins &gt; 1.651.2 with the Pipeline plugin installed.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">If you haven\u2019t done so yet, provide your Codefresh credentials in Jenkins system configuration as described on the plugin <a href=\"https:\/\/wiki.jenkins-ci.org\/display\/JENKINS\/Codefresh+Plugin\">Wiki<\/a><\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Create a new job by clicking \u2018New Item\u2019 on Jenkins left-hand menu.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Choose \u2018Pipeline\u2019 as your job type.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">In the \u2018Pipeline\u2019 section of job configuration enter the Pipeline\u00a0script that follows (make sure to replace the project name and git url with your service properties).<\/span><\/li>\n<li style=\"font-weight: 400;\">Make sure to uncheck the \u2018Use Groovy Sandbox\u2019 option beneath the pipeline script window.<\/li>\n<li style=\"font-weight: 400;\">Save your changes, run the pipeline and watch Codefresh run builds for each of the branches in your repo.<\/li>\n<\/ol>\n<\/li>\n<\/ol>\n<\/li>\n<\/ol>\n<p>And here&#8217;s the Pipeline script:<\/p>\n<pre class=\"lang:java decode:true\">stage 'Codefresh'\n\ndef owner = 'codefreshdemo'\ndef service = 'demochat'\ndef branchApi = new URL(\"https:\/\/api.github.com\/repos\/${owner}\/${service}\/branches\")\ndef branches = new groovy.json.JsonSlurper().parse(branchApi.newReader())\ncfPerBranch = [:]\n\nfor ( branch in branches ) {\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def branchName = branch.name\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cfPerBranch[branchName] = {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node {\n             println \"running Codefresh build for branch ${branchName}\"\n             codefresh build: true, cfService: service, cfBranch: branchName\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n}\nparallel cfPerBranch<\/pre>\n<p><span style=\"font-weight: 400;\">Let\u2019s walk through the script to see what\u2019s going on here.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">First of all, we\u2019re defining our Git repository properties, whereas the variable <strong><em>&#8216;<\/em><\/strong><\/span><b><i>service&#8217;\u00a0<\/i><\/b><span style=\"font-weight: 400;\">is also our Codefresh service name. (Note: you can create Codefresh pipelines with different names, of course. Just use a different variable).<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Then, we\u2019re calling the GitHub branches API to retrieve the list of all branches in our repo:<\/span><\/p>\n<pre class=\"lang:default decode:true\">def branches = new groovy.json.JsonSlurper().parse(branchApi.newReader())<\/pre>\n<p><span style=\"font-weight: 400;\">This brings back a list of hashmaps with branch name stored under the <strong><em>\u2018name\u2019<\/em><\/strong> key. <\/span><\/p>\n<p><span style=\"font-weight: 400;\">We then iterate over this list, building a list of Codefresh invocations in the form:<\/span><\/p>\n<pre class=\"lang:default decode:true\">codefresh build: true, cfService: service, cfBranch: branchName<\/pre>\n<p><span style=\"font-weight: 400;\">The integration is achieved by the step name: <em><strong>codefresh<\/strong><\/em>. This gets passed the parameters:<\/span><\/p>\n<p style=\"padding-left: 30px;\"><b>build: true <\/b><span style=\"font-weight: 400;\">tells the plugin that we want to run a build (and not launch a composition)<\/span><\/p>\n<p style=\"padding-left: 30px;\"><b>cfService<\/b><span style=\"font-weight: 400;\"> provides the name of the service to build<\/span><\/p>\n<p style=\"padding-left: 30px;\"><b>cfBranch<\/b><span style=\"font-weight: 400;\"> is the name of the branch<\/span><\/p>\n<p>After building the list of invocations we pass it to the special pipeline function <em><strong>parallel<\/strong><\/em> which does exactly that &#8211; executes all these Codefresh calls in parallel. Looking at the job console output we can see notification from all branches,\u00a0for example,\u00a0two branches: master and testing.<\/p>\n<pre style=\"padding-left: 30px;\" class=\"\">[master] running cf build for branch master\n [Pipeline] [master] codefresh\n [Pipeline] [testing] echo\n [testing] running cf build for branch testing\n [Pipeline] [testing] codefresh\n [master]\n [master] Triggering Codefresh build. Service: codefreshdemo\/demochat.\n [master] \n [testing] \n [testing] Triggering Codefresh build. Service: codefreshdemo\/demochat.\n [testing] \n [master] Codefresh build running - https:\/\/g.codefresh.io\/process\/57caca9749786005005adce8\n [master] \u00a0Waiting 5 seconds...\n [testing] Codefresh build running - https:\/\/g.codefresh.io\/process\/57caca977ec1d4050067147b\n [testing] \u00a0Waiting 5 seconds...<\/pre>\n<p><span style=\"font-weight: 400;\">A few words about the \u2018Groovy sandbox\u2019 option. It&#8217;s\u00a0a feature of Jenkins that allows admins to restrict script executions to a limited set of allowed methods and thus protect the system from intentional or unintentional abuse. If we leave this unchecked, our script will fail on calling <\/span><i><span style=\"font-weight: 400;\">groovy.json.JsonSlurper() or <\/span><\/i><span style=\"font-weight: 400;\"><em>branchApi.newReader()<\/em>. That can be solved by then going to Jenkins system config and whitelisting each of these methods, but for our use case it\u2019s much easier to just disable sandboxing altogether. Once you decide you\u2019re ready to use this for production, enable sandboxing and also make sure to save your pipeline script to a Jenkinsfile stored in source control. See <a href=\"https:\/\/github.com\/jenkinsci\/pipeline-plugin\/blob\/master\/README.md#introduction\">pipeline documentation<\/a> for more details.<\/span><\/p>\n<h2><span style=\"font-weight: 400;\">But We Want Compositions&#8230;<\/span><\/h2>\n<p><span style=\"font-weight: 400;\">Building and running unit tests\u00a0in Codefresh pipelines is very important,\u00a0but we usually want to bring up a composition to perform some real integration tests afterwards. <\/span><span style=\"font-weight: 400;\">Nowadays we\u2019re mostly dealing with microservices and it\u2019s necessary to be able to test them as a part of the whole complex system. This is the only real way to verify their communication patterns, caching abilities and overall resilience.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Codefresh provides an <a href=\"https:\/\/codefresh.io\/docs\/\">easy way of defining Docker compositions<\/a> without leaving the service. In our example, we\u2019ll be launching the <\/span><b>demochat<\/b><span style=\"font-weight: 400;\"> application, a fork of the open-source Slack alternative called \u2018Let\u2019s Chat\u2019. It&#8217;s an Express.js application with a MongoDB backend. The code can be found on <a href=\"https:\/\/github.com\/codefreshdemo\/demochat\">GitHub<\/a>\u00a0and here\u2019s the Docker-Compose YAML\u00a0we will use to launch it on Codefresh:<\/span><\/p>\n<pre class=\"lang:yaml decode:true\" title=\"docker-compose.yml\">version: '2'\nservices:\n\u00a0demochat:\n\u00a0\u00a0\u00a0image: codefreshdemo\/demochat:master'\n\u00a0\u00a0\u00a0ports:\n\u00a0\u00a0\u00a0\u00a0\u00a0- 5000\n\u00a0\u00a0\u00a0\u00a0\u00a0- 5222\n\u00a0\u00a0\u00a0links:\n\u00a0\u00a0\u00a0\u00a0\u00a0- mongo\n\u00a0mongo:\n\u00a0\u00a0\u00a0image: mongo<\/pre>\n<p><span style=\"font-weight: 400;\"> We\u2019ll name our composition \u2018mydemochat\u2019. All the compositions on our Codefresh account are immediately\u00a0visible and available for selection on Jenkins job configuration:<\/span><\/p>\n<p><img class=\"alignnone size-full wp-image-801\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/Screen-Shot-2016-09-03-at-4.45.32-PM.png\" alt=\"Screen Shot 2016-09-03 at 4.45.32 PM\" width=\"411\" height=\"104\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/Screen-Shot-2016-09-03-at-4.45.32-PM.png 411w, https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/Screen-Shot-2016-09-03-at-4.45.32-PM-300x76.png 300w\" sizes=\"(max-width: 411px) 100vw, 411px\" \/><\/p>\n<p><span style=\"font-weight: 400;\">This can be used in combination with build triggering or on its own. Note that if you select both build and launch options, the build will always be performed first.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Once the composition is launched, the new environment\u2019s URL becomes available in Jenkins console output and through the Codefresh green leaves badge in the\u00a0job build history.<\/span><\/p>\n<p><img class=\"alignnone size-full wp-image-802\" src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/Screen-Shot-2016-09-03-at-5.31.33-PM.png\" alt=\"Screen Shot 2016-09-03 at 5.31.33 PM\" width=\"342\" height=\"46\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/Screen-Shot-2016-09-03-at-5.31.33-PM.png 342w, https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/Screen-Shot-2016-09-03-at-5.31.33-PM-300x40.png 300w\" sizes=\"(max-width: 342px) 100vw, 342px\" \/><\/p>\n<h2>Compositions-As-Code<\/h2>\n<p><span style=\"font-weight: 400;\">Composition launching is also available from pipeline DSL. Let\u2019s say that in our original script\u00a0&#8212;\u00a0after building all the branches &#8212; we decide we want to launch a composition.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Add this to your Pipeline script:<\/span><\/p>\n<pre class=\"lang:default decode:true\">stage 'Launch'\nnode {\n  codefresh launch: true, cfComposition: 'mydemochat'\n}<\/pre>\n<p><span style=\"font-weight: 400;\">Again we\u2019re using the \u00a0\u2018<strong>codefresh<\/strong>\u2019 keyword to invoke the integration, but this time we\u2019re passing it<\/span><b> launch: true <\/b><span style=\"font-weight: 400;\">accompanied by the <\/span><b>cfComposition<\/b><span style=\"font-weight: 400;\"> name parameter.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">If all goes well, this is what we\u2019ll see in the job console output :<\/span><\/p>\n<pre>Launching Codefresh composition environment: demochat.\n  Waiting 5 seconds...\n  Codefresh environment launched successfully - http:\/\/cf-aue1-docker-node-0010.cf-cd.com:32773\n  [Pipeline] }<\/pre>\n<p><span style=\"font-weight: 400;\">We can now browse to the composition URL and start testing our chat functionality.\u00a0<\/span><span style=\"font-weight: 400;\">That\u2019s all!<\/span><\/p>\n<p><span style=\"font-weight: 400;\">As always we\u2019re looking forward to your feedback, a<\/span>nd here are some links to help you get started:<\/p>\n<p><a href=\"https:\/\/wiki.jenkins-ci.org\/display\/JENKINS\/Codefresh+Plugin\"><span style=\"font-weight: 400;\">Codefresh Jenkins plugin Wiki<\/span><\/a><\/p>\n<p><a href=\"https:\/\/codefresh.io\/docs\/\"><span style=\"font-weight: 400;\">Creating a Codefresh Composition<\/span><\/a><\/p>\n<p>And if you don&#8217;t already have a Codefresh account, <a href=\"https:\/\/codefresh.io\/codefresh-signup\/\">create a free one here.<\/a><\/p>\n<p>Stay fresh!<\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"799\"\/>","protected":false},"excerpt":{"rendered":"<p>We are excited\u00a0to announce the release of the Jenkins Codefresh plugin version 1.2. This release brings three\u00a0new important features : Better branch support for Codefresh builds. Ability to launch Codefresh compositions from Jenkins jobs. And most exciting: support for\u00a0Jenkins Pipeline. If you\u2019ve been using Jenkins lately, you probably\u00a0heard about the Pipeline Plugin,\u00a0an open-sourced rework of &hellip; <a href=\"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/\">Read more<\/a><\/p>\n","protected":false},"author":9,"featured_media":829,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[1505],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Pipelines-as-Code with the New Codefresh Jenkins Plugin | Codefresh<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Pipelines-as-Code with the New Codefresh Jenkins Plugin\" \/>\n<meta property=\"og:description\" content=\"We are excited\u00a0to announce the release of the Jenkins Codefresh plugin version 1.2. This release brings three\u00a0new important features : Better branch support for Codefresh builds. Ability to launch Codefresh compositions from Jenkins jobs. And most exciting: support for\u00a0Jenkins Pipeline. If you\u2019ve been using Jenkins lately, you probably\u00a0heard about the Pipeline Plugin,\u00a0an open-sourced rework of &hellip; Read more\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2016-09-13T15:32:30+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-02-09T14:30:41+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/jenkins-multi-branches2.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1713\" \/>\n\t<meta property=\"og:image:height\" content=\"450\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@antweiss\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Anton Weiss\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"7 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/jenkins-multi-branches2.jpg\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/jenkins-multi-branches2.jpg\",\"width\":1713,\"height\":450},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/#webpage\",\"url\":\"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/\",\"name\":\"Pipelines-as-Code with the New Codefresh Jenkins Plugin | Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/#primaryimage\"},\"datePublished\":\"2016-09-13T15:32:30+00:00\",\"dateModified\":\"2022-02-09T14:30:41+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Pipelines-as-Code with the New Codefresh Jenkins Plugin\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/93d9834241a4b1b862a21e1d9a42a39f\"},\"headline\":\"Pipelines-as-Code with the New Codefresh Jenkins Plugin\",\"datePublished\":\"2016-09-13T15:32:30+00:00\",\"dateModified\":\"2022-02-09T14:30:41+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/#webpage\"},\"wordCount\":1161,\"commentCount\":1,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/jenkins-multi-branches2.jpg\",\"articleSection\":[\"Containers\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/93d9834241a4b1b862a21e1d9a42a39f\",\"name\":\"Anton Weiss\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/74279e1c79e1997c40057ee2c54a6454?s=96&d=blank&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/74279e1c79e1997c40057ee2c54a6454?s=96&d=blank&r=g\",\"caption\":\"Anton Weiss\"},\"description\":\"Ant(on) Weiss is a DevOps Evangelist and Enabler. He's been architecting software delivery processes at large and small companies for the last 15 years. Today he's the CEO and Principal Consultant at Otomato. When not evangelising for Codefresh, he's deeply involved with technical training and public speaking.\",\"sameAs\":[\"http:\/\/antweiss.com\",\"https:\/\/twitter.com\/antweiss\"],\"url\":\"https:\/\/codefresh.io\/author\/anton\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Pipelines-as-Code with the New Codefresh Jenkins Plugin | Codefresh","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/","og_locale":"en_US","og_type":"article","og_title":"Pipelines-as-Code with the New Codefresh Jenkins Plugin","og_description":"We are excited\u00a0to announce the release of the Jenkins Codefresh plugin version 1.2. This release brings three\u00a0new important features : Better branch support for Codefresh builds. Ability to launch Codefresh compositions from Jenkins jobs. And most exciting: support for\u00a0Jenkins Pipeline. If you\u2019ve been using Jenkins lately, you probably\u00a0heard about the Pipeline Plugin,\u00a0an open-sourced rework of &hellip; Read more","og_url":"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2016-09-13T15:32:30+00:00","article_modified_time":"2022-02-09T14:30:41+00:00","og_image":[{"width":1713,"height":450,"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/jenkins-multi-branches2.jpg","type":"image\/jpeg"}],"twitter_card":"summary_large_image","twitter_creator":"@antweiss","twitter_site":"@codefresh","twitter_misc":{"Written by":"Anton Weiss","Est. reading time":"7 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/jenkins-multi-branches2.jpg","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/jenkins-multi-branches2.jpg","width":1713,"height":450},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/#webpage","url":"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/","name":"Pipelines-as-Code with the New Codefresh Jenkins Plugin | Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/#primaryimage"},"datePublished":"2016-09-13T15:32:30+00:00","dateModified":"2022-02-09T14:30:41+00:00","breadcrumb":{"@id":"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Pipelines-as-Code with the New Codefresh Jenkins Plugin"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/93d9834241a4b1b862a21e1d9a42a39f"},"headline":"Pipelines-as-Code with the New Codefresh Jenkins Plugin","datePublished":"2016-09-13T15:32:30+00:00","dateModified":"2022-02-09T14:30:41+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/#webpage"},"wordCount":1161,"commentCount":1,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2016\/09\/jenkins-multi-branches2.jpg","articleSection":["Containers"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/containers\/codefresh-jenkins-plugin-1-2-new-features\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/93d9834241a4b1b862a21e1d9a42a39f","name":"Anton Weiss","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/74279e1c79e1997c40057ee2c54a6454?s=96&d=blank&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/74279e1c79e1997c40057ee2c54a6454?s=96&d=blank&r=g","caption":"Anton Weiss"},"description":"Ant(on) Weiss is a DevOps Evangelist and Enabler. He's been architecting software delivery processes at large and small companies for the last 15 years. Today he's the CEO and Principal Consultant at Otomato. When not evangelising for Codefresh, he's deeply involved with technical training and public speaking.","sameAs":["http:\/\/antweiss.com","https:\/\/twitter.com\/antweiss"],"url":"https:\/\/codefresh.io\/author\/anton\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/799"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/9"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=799"}],"version-history":[{"count":2,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/799\/revisions"}],"predecessor-version":[{"id":21356,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/799\/revisions\/21356"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/829"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=799"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=799"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=799"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}