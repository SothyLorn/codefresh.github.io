{"id":8406,"date":"2018-05-02T21:28:51","date_gmt":"2018-05-02T21:28:51","guid":{"rendered":"http:\/\/codefresh.io\/?p=8406"},"modified":"2018-06-14T23:45:39","modified_gmt":"2018-06-14T23:45:39","slug":"selenium-deployment-verification-testing-dockers-example-voting-app","status":"publish","type":"post","link":"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/","title":{"rendered":"Selenium Deployment Verification Testing of Docker\u2019s Example Voting App"},"content":{"rendered":"<p>In this blog post, I will be focusing on running Deployment Verification Tests against Docker&#8217;s Example Voting App using Selenium and PyTest against the Kubernetes Helm Release we worked on in Part 1.<\/p>\n<p>New to Codefresh? Get started with Codefresh by <strong><a href=\"https:\/\/codefresh.io\/codefresh-signup\/?utm_source=Blog&amp;utm_medium=Post&amp;utm_campaign=SelDepT\n\">signing up for an account<\/a><\/strong> today!<\/p>\n<p><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/05\/simple-1.png\" alt=\"\" width=\"441\" height=\"421\" class=\"alignnone size-full wp-image-8425\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/05\/simple-1.png 441w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/05\/simple-1-300x286.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/05\/simple-1-344x328.png 344w\" sizes=\"(max-width: 441px) 100vw, 441px\" \/><\/p>\n<p>This blog is Part 2 of a series <strong>The Perfect Pipeline<\/strong>.<\/p>\n<ul>\n<li><a href=\"https:\/\/codefresh.io\/howtos\/deploying-docker-example-voting-app-helm\/\" rel=\"noopener\" target=\"_blank\">Click Here for Part 1<\/a><\/li>\n<\/ul>\n<p><strong>Adding 4 New Build Steps:<\/strong><\/p>\n<ul>\n<li>GetKubernetesServicesEndpoints: We&#8217;re gathering the Endpoint IPs for vote and result service&#8217;s from Kubernetes<\/li>\n<li>BuildingTestDockerImage: Building a Test Docker image with Python, PyTest and Selenium..<br \/>\nPostDeploymentVerificationTests: Running a composition with Selenium Hub, Chrome Browser, Firefox Browser and Test image.  This composition will utilize the open source Selenium Docker images to run our PyTest Deployment Verification Tests.<\/li>\n<li>ArchiveDVTs: We&#8217;re generating HTML reports in the prior step and in this step archiving them in S3 and annotating our Test Docker image&#8217;s metadata with the URLs to the reports.<\/li>\n<\/ul>\n<p>The diagram below represents the workflow discussed in this blog post.<\/p>\n<p><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/05\/voting_app_selenium_dvts.png\" alt=\"\" width=\"841\" height=\"1053\" class=\"alignnone size-full wp-image-8408\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/05\/voting_app_selenium_dvts.png 841w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/05\/voting_app_selenium_dvts-240x300.png 240w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/05\/voting_app_selenium_dvts-768x962.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/05\/voting_app_selenium_dvts-818x1024.png 818w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/05\/voting_app_selenium_dvts-262x328.png 262w\" sizes=\"(max-width: 841px) 100vw, 841px\" \/><\/p>\n<p><strong>Update to Existing YAML<\/strong><\/p>\n<p>Some updates have occurred to names and titles of the build steps but below are the critical updates.<\/p>\n<p>Edit value of <code>RELEASE_NAME<\/code> for the <code>HelmUpgrade<\/code> build step to <code>${{HELM_RELEASE_NAME}}<\/code>.<br \/>\nThe Helm Release Name was templated for later use in new build steps.<\/p>\n<p>Please be aware that WordPress may have modified symbols used the scripting below.<\/p>\n<p>All examples below are available in this Github repository.<\/p>\n<p><a href=\"https:\/\/github.com\/codefresh-io\/example-voting-app\" rel=\"noopener\" target=\"_blank\">https:\/\/github.com\/codefresh-io\/example-voting-app<\/a><\/p>\n<p><strong>Create PyTest + Selenium python script<\/strong><\/p>\n<p>Create <code>\/tests\/selenium\/test_app.py<\/code> example below..<\/p>\n<pre><code class=\"python\">import os\nimport time\n\nimport pytest\n\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.wait import WebDriverWait\nfrom selenium.common.exceptions import (\n    InvalidSelectorException,\n    NoSuchElementException,\n    ElementNotVisibleException,\n    ElementNotInteractableException,\n    WebDriverException)\n\nvote_endpoint_ip = os.getenv('VOTE_ENDPOINT_IP')\nresult_endpoint_ip = os.getenv('RESULT_ENDPOINT_IP')\n\n# Give Selenium Hub time to start\ntime.sleep(15)  # TODO: figure how to do this better\n\n@pytest.fixture(scope='module')\ndef browser():\n    browser_name = ip = os.getenv('BROWSER')\n    browser = webdriver.Remote(\n        command_executor='http:\/\/selenium_hub:4444\/wd\/hub',\n        desired_capabilities={'browserName': 'chrome'},\n    )\n    yield browser\n    browser.quit()\n\n\ndef test_confirm_vote_title(browser):\n    browser.get(\"http:\/\/{}:80\".format(vote_endpoint_ip))\n    assert \"Cats vs Dogs!\" in browser.title\n\n\ndef test_confirm_vote_choice_form(browser):\n    browser.get(\"http:\/\/{}:80\".format(vote_endpoint_ip))\n    element = browser.find_element(By.ID, 'choice')\n    assert element.get_attribute('id') == 'choice'\n\n\ndef test_confirm_vote_button_a(browser):\n    browser.get(\"http:\/\/{}:80\".format(vote_endpoint_ip))\n    element = browser.find_element(By.ID, 'a')\n    assert element.get_attribute('id') == 'a'\n\n\ndef test_confirm_vote_button_b(browser):\n    browser.get(\"http:\/\/{}:80\".format(vote_endpoint_ip))\n    element = browser.find_element(By.ID, 'b')\n    assert element.get_attribute('id') == 'b'\n\n\ndef test_vote_click(browser):\n    browser.get(\"http:\/\/{}:80\".format(vote_endpoint_ip))\n    browser.find_element(By.ID, 'a').click()\n    WebDriverWait(browser, 3)\n\n\ndef test_confirm_result_title(browser):\n    browser.get(\"http:\/\/{}:80\".format(result_endpoint_ip))\n    assert \"Cats vs Dogs -- Result\" in browser.title\n\n\ndef test_confirm_result(browser):\n    browser.get(\"http:\/\/{}:80\".format(result_endpoint_ip))\n    element = browser.find_element(By.ID, 'result')\n    assert element.get_attribute('id') == 'result'\n\n\ndef test_confirm_result_vote_tally(browser):\n    browser.get(\"http:\/\/{}:80\".format(result_endpoint_ip))\n    element = browser.find_element(By.ID, 'result')\n    assert 'No votes yet' not in element.text\n\n<\/code><\/pre>\n<p>There are simple tests for both the vote and result service&#8217;s webpage.<\/p>\n<p>Using PyTest + Selenium Hub and allowing for multiple browsers.<\/p>\n<p>For <code>vote<\/code> service we&#8217;re checking:<\/p>\n<ul>\n<li>the value of the web page&#8217;s title is <code>Cats vs Dogs!<\/code><\/li>\n<li>the existence of the <code>choice<\/code> element<\/li>\n<li>the existence of button <code>a<\/code><\/li>\n<li>the existence of button <code>b<\/code><\/li>\n<\/ul>\n<p>For <code>result<\/code> service we&#8217;re checking:<\/p>\n<ul>\n<li>the value of the web page&#8217;s title is <code>Cats vs Dogs -- Result<\/code><\/li>\n<li>the existence of the <code>result<\/code> element<\/li>\n<\/ul>\n<p>We&#8217;re also doing a simple button click() test on the <code>vote<\/code> web page and confirming the <code>result<\/code> web page tallied that vote.<\/p>\n<ul>\n<li>execute click() of button <code>a<\/code> on <code>vote<\/code> web page<\/li>\n<li>confirm <code>result<\/code> element of the <code>result<\/code> web page does not equal <code>No votes yet<\/code> as this would signify we didn&#8217;t tally the click() to button <code>a<\/code> on the <code>vote<\/code> web page.<\/li>\n<\/ul>\n<p><strong>Create Dockerfile for Test Docker image<\/strong><\/p>\n<p>Now we&#8217;ll create a new Dockerfile in the root folder of the repository<\/p>\n<pre><code class=\"sh\">FROM python:3.4-alpine\n\nRUN apk update &amp;&amp; \\\n    apk add bash &amp;&amp; \\\n    pip install selenium pytest pytest-html\n<\/code><\/pre>\n<p>We&#8217;re skipping copying in our tests in this Dockerfile and instead will use tests mounted from the GIT repository in our composition candidate or our composition build step.<\/p>\n<p>Now that we have a Docker image ready for our Codefresh Pipeline we need to add a new build step to our Pipeline&#8217;s <code>codefresh-matrix-pipeline.yml<\/code> to build the Docker image.<\/p>\n<p><strong>Add Docker build Build Step for Test image<\/strong><\/p>\n<pre><code class=\"yaml\">  BuildingTestDockerImage:\n    title: Building Test Docker Image\n    type: build\n    image_name: codefresh\/example-voting-app-tests\n    working_directory: .\/\n    dockerfile: Dockerfile\n    tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'\n<\/code><\/pre>\n<p><strong>Add Get Kubernetes Service IP Build Step<\/strong><\/p>\n<p>Add GetKubernetesServicesEndpoints build step to get Endpoint IPs for <code>vote<\/code> and <code>result<\/code> service.<\/p>\n<pre><code class=\"yaml\">  GetKubernetesServicesEndpoints:\n    title: Getting Kubernetes Services Endpoints\n    image: codefresh\/cfstep-helm:2.8.0\n    commands:\n      - bash -c 'IFS=\" \" read -a services &lt;&lt;&lt; \"${{SERVICES}}\" &amp;&amp; for service in \"${services[@]}\"; do external_ip=\"\"; while [ -z $external_ip ]; do echo \"Waiting for end point...\"; external_ip=$(kubectl get svc ${{HELM_RELEASE_NAME}}-${service} --namespace ${{KUBE_NAMESPACE}} --template=\"{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}\"); [ -z \"$external_ip\" ] &amp;&amp; sleep 10; done; echo \"End point ready-\" &amp;&amp; echo $external_ip; cf_export ${service^^}_ENDPOINT_IP=$external_ip; done'\n  BuildingTestDockerImage:\n    title: Building Test Docker Image\n    type: build\n    image_name: codefresh\/example-voting-app-tests\n    working_directory: .\/\n    dockerfile: Dockerfile\n    tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'\n<\/code><\/pre>\n<p>To support the changes made in the matrix YAML file we need to add the following Environment Variables.<\/p>\n<p>Add Helm Release Name and Kubernetes Services as Environment variables on the matrix pipeline.<\/p>\n<ul>\n<li><code>HELM_RELEASE_NAME<\/code> = <code>example-voting-app<\/code> &lt;- YAML supports any name you&#8217;d like to use.<\/li>\n<li><code>services<\/code> = <code>vote result<\/code> &lt;- space delimited services we would like to return Kubernetes External IPs for.<\/li>\n<\/ul>\n<p>You will need to add additional browsers to the composition build step <code>PostDeploymentVerificationTests<\/code> if you&#8217;d like to support additional browsers.<\/p>\n<p><strong>Add Selenium Deployment Verification Build Step<\/strong><\/p>\n<p>Now we&#8217;ll add the composition build step which will stand up Selenium Hub, Chrome and Firefox browsers as supporting infrastructure and join in our Test Docker image as a composition candidate.<\/p>\n<p>We&#8217;ve setup the composition candidate with a volume mount of our Github clone and passed in our Kubernetes Service&#8217;s IPs and browsers to test against.<\/p>\n<p>When the tests have finished we will annotate the Test Docker image&#8217;s metadata with pass\/fail.<\/p>\n<pre><code class=\"yaml\">  PostDeploymentVerificationTests:\n    title: Running Selenium DVTs\n    type: composition\n    composition:\n      version: '2'\n      services:\n        selenium_hub:\n          image: selenium\/hub\n          ports:\n            - 4444\n          environment:\n            - SE_OPTS=-debug\n            - GRID_MAX_SESSION=5\n        chrome_node:\n          image: selenium\/node-chrome\n          ports:\n            - 5900\n            - 5555\n          command: bash -c \"sleep 5 &amp;&amp; \/opt\/bin\/entry_point.sh\"\n          depends_on: \n            - selenium_hub\n          environment:\n            - HUB_HOST=selenium_hub\n            - REMOTE_HOST=http:\/\/chrome_node:5555\n            - NODE_MAX_SESSION=5\n            - NODE_MAX_INSTANCES=5\n        firefox_node:\n          image: selenium\/node-firefox\n          ports:\n            - 5900\n            - 5555\n          command: bash -c \"sleep 5 &amp;&amp; \/opt\/bin\/entry_point.sh\"\n          depends_on: \n            - selenium_hub\n          environment:\n            - HUB_HOST=selenium_hub\n            - REMOTE_HOST=http:\/\/firefox_node:5555\n            - NODE_MAX_SESSION=5\n            - NODE_MAX_INSTANCES=5\n    composition_candidates:\n      test:\n        image: ${{BuildingTestDockerImage}}\n        working_dir: ${{CF_VOLUME_PATH}}\/${{CF_REPO_NAME}}\n        environment:\n          VOTE_ENDPOINT_IP: ${{VOTE_ENDPOINT_IP}}\n          RESULT_ENDPOINT_IP: ${{RESULT_ENDPOINT_IP}}\n        command: bash -c 'IFS=\" \" read -a browserarray &lt;&lt;&lt; \"${{BROWSERS}}\" &amp;&amp; for browser in \"$${browserarray[@]}\"; do BROWSER=$$browser python -m pytest -vvv --html=.\/selenium-report-$${browser}.html --self-contained-html .\/tests\/selenium\/test_app.py; done'\n        volumes:\n          - '${{CF_VOLUME_NAME}}:\/codefresh\/volume'\n    add_flow_volume_to_composition: true\n    on_success:\n      metadata:\n        set:\n          - '${{BuildingTestDockerImage.imageId}}':\n              - SELENIUM_DVTS: true\n    on_fail:\n      metadata:\n        set:\n          - '${{BuildingTestDockerImage.imageId}}':\n              - SELENIUM_DVTS: false\n<\/code><\/pre>\n<p>Add supported browsers as Environment variables on the matrix pipeline.<\/p>\n<ul>\n<li><code>browsers<\/code> = <code>chrome firefox<\/code> &lt;- space delimited browsers you&#8217;d like to execute Selenium DVTS against.<\/li>\n<\/ul>\n<p>You will need to add additional browsers to the composition build step <code>PostDeploymentVerificationTests<\/code> if you&#8217;d like to support additional browsers.<\/p>\n<p><strong>Add a S3 Bucket and Upload PyTest HTML Reports to S3 bucket<\/strong><\/p>\n<p>We generated HTML reports for each browser and will upload these to S3 bucket for the build and add the URLs to the Test Docker image&#8217;s metadata.<\/p>\n<blockquote><p>NOTICE<\/p><\/blockquote>\n<p>LINE 123: I&#8217;ve added an argument to make the uploads public <code>--acl public-read<\/code><\/p>\n<p>You may want to remove this argument if you use this build step in a private setting.<\/p>\n<p>Prerequisites:<\/p>\n<p>S3 bucket:<br \/>\n<a href=\"https:\/\/docs.aws.amazon.com\/AmazonS3\/latest\/gsg\/CreatingABucket.html\" rel=\"noopener\" target=\"_blank\">https:\/\/docs.aws.amazon.com\/AmazonS3\/latest\/gsg\/CreatingABucket.html<\/a><\/p>\n<p>AWS Access Key and Secret Access Key:<br \/>\n<a href=\"https:\/\/docs.aws.amazon.com\/general\/latest\/gr\/aws-sec-cred-types.html#access-keys-and-secret-access-keys\" rel=\"noopener\" target=\"_blank\">https:\/\/docs.aws.amazon.com\/general\/latest\/gr\/aws-sec-cred-types.html#access-keys-and-secret-access-keys<\/a><\/p>\n<p>Add YAML below to <code>codefresh-matrix-pipeline.yml<\/code><\/p>\n<pre><code class=\"yaml\">  ArchiveSeleniumDVTReports:\n    title: Archiving Selenium DVT Reports\n    image: mesosphere\/aws-cli\n    working_directory: .\/\n    commands:\n      - apk update\n      - apk upgrade\n      - apk add bash\n      - bash -c 'IFS=\" \" read -a browserarray &lt;&lt;&lt; \"${{BROWSERS}}\" &amp;&amp; for browser in \"${browserarray[@]}\"; do BROWSER=$browser aws s3 cp .\/selenium-report-${browser}.html s3:\/\/${{S3_BUCKETNAME}}\/${{CF_BUILD_ID}}\/selenium-report-${browser}.html --acl public-read; done'\n    on_success:\n     metadata:\n        set:\n          # I manually setup metadata for each browser\n          - ${{BuildingTestDockerImage.imageId}}:\n              - CHROME_SELENIUM_DVTS: \"https:\/\/s3.${{AWS_DEFAULT_REGION}}.amazonaws.com\/${{S3_BUCKETNAME}}\/${{CF_BUILD_ID}}\/selenium-report-chrome.html\"\n              - FIREFOX_SELENIUM_DVTS: \"https:\/\/s3.${{AWS_DEFAULT_REGION}}.amazonaws.com\/${{S3_BUCKETNAME}}\/${{CF_BUILD_ID}}\/selenium-report-firefox.html\"\n<\/code><\/pre>\n<p>To support the changes made in the matrix YAML file we need to add the following Environment Variables.<\/p>\n<p>Add AWS Region and Credentials to AWS_CLI Shared Secret<\/p>\n<p>Account Settings -> Shared Configuration -> ADD CONFIGURATION CONTEXT -> Shared Secret<\/p>\n<p><code>AWS_DEFAULT_REGION<\/code> = <code>aws-region-s3-bucket<\/code> &lt;- S3 bucket&#8217;s AWS Region.<br \/>\n<code>AWS_ACCESS_KEY_ID<\/code> = <code>aws-access-key<\/code> &lt;- Access Key with read\/write access to S3 bucket.<br \/>\n<code>AWS_SECRET_ACCESS_KEY<\/code> = <code>aws-secret-access-key<\/code> &lt;- Secret Access Key for Access Key above.<\/p>\n<p>Add S3 Bucket Name Global Variable<\/p>\n<p>Codefresh Repository -> General (tab) -> Global Variables<\/p>\n<p><code>S3_BUCKETNAME<\/code> = <code>example-voting-app<\/code> &lt;- named after my repository<\/p>\n<p>We&#8217;ll be using this in future blog posts across the different pipelines for the Codefresh Repository.<\/p>\n<p><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/05\/Screen-Shot-2018-05-02-at-1.37.32-PM.png\" alt=\"\" width=\"2774\" height=\"1260\" class=\"alignnone size-full wp-image-8417\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/05\/Screen-Shot-2018-05-02-at-1.37.32-PM.png 2774w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/05\/Screen-Shot-2018-05-02-at-1.37.32-PM-300x136.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/05\/Screen-Shot-2018-05-02-at-1.37.32-PM-768x349.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/05\/Screen-Shot-2018-05-02-at-1.37.32-PM-1024x465.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/05\/Screen-Shot-2018-05-02-at-1.37.32-PM-628x285.png 628w\" sizes=\"(max-width: 2774px) 100vw, 2774px\" \/><\/p>\n<ul>\n<li><a href=\"https:\/\/s3.us-east-1.amazonaws.com\/example-voting-app\/5aea161cb486d500014b9ac8\/selenium-report-chrome.html\" rel=\"noopener\" target=\"_blank\">Click Here for example Chrome PyTest HTML Report<\/a><\/li>\n<li><a href=\"https:\/\/s3.us-east-1.amazonaws.com\/example-voting-app\/5aea161cb486d500014b9ac8\/selenium-report-firefox.html\" rel=\"noopener\" target=\"_blank\">Click Here for example Firefox PyTest HTML Report<\/a><\/li>\n<\/ul>\n<p>Resources:<\/p>\n<p><a href=\"https:\/\/github.com\/codefresh-io\/example-voting-app\/tree\/add-selenium-tests#part-2-add-selenium-deployment-verification-testing-of-deployment\" rel=\"noopener\" target=\"_blank\">https:\/\/github.com\/codefresh-io\/example-voting-app\/tree\/add-selenium-tests#part-2-add-selenium-deployment-verification-testing-of-deployment<\/a><\/p>\n<p><a href=\"http:\/\/pytest-selenium.readthedocs.io\/en\/latest\/index.html\" rel=\"noopener\" target=\"_blank\">http:\/\/pytest-selenium.readthedocs.io\/en\/latest\/index.html<\/a><\/p>\n<p><a href=\"https:\/\/github.com\/SeleniumHQ\/docker-selenium\" rel=\"noopener\" target=\"_blank\">https:\/\/github.com\/SeleniumHQ\/docker-selenium<\/a><\/p>\n<p><a href=\"https:\/\/github.com\/SeleniumHQ\/selenium\/tree\/master\/py\/test\/selenium\/webdriver\/common\" rel=\"noopener\" target=\"_blank\">https:\/\/github.com\/SeleniumHQ\/selenium\/tree\/master\/py\/test\/selenium\/webdriver\/common<\/a><\/p>\n<p>Planning for next blog to focus on Helm Chart Management using Codefresh&#8217;s embedded Chart Museum and use of Helm Repository in CI\/CD workflow.<\/p>\n<p><a href=\"https:\/\/codefresh.io\/docs\/docs\/new-helm\/managed-helm-repository\/\" rel=\"noopener\" target=\"_blank\">Codefresh Helm Repository<\/a><\/p>\n<p>Hope, you find this tutorial useful. I look forward to your comments and any questions you have.<\/p>\n<p><span style=\"font-weight: 400;\">New to Codefresh? <\/span><strong><a href=\"https:\/\/codefresh.io\/codefresh-signup\/?utm_source=Blog&amp;utm_medium=Post&amp;utm_campaign=SelDepB\">create a free Codefresh account<\/a><\/strong><span style=\"font-weight: 400;\"> and start building, testing and deploying Docker images faster than ever.<\/span><\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"8406\"\/>","protected":false},"excerpt":{"rendered":"<p>In this blog post, I will be focusing on running Deployment Verification Tests against Docker&#8217;s Example Voting App using Selenium and PyTest against the Kubernetes Helm Release we worked on in Part 1. New to Codefresh? Get started with Codefresh by signing up for an account today! This blog is Part 2 of a series &hellip; <a href=\"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/\">Read more<\/a><\/p>\n","protected":false},"author":57,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[2507,6],"tags":[2400,2508,2509,2510],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Selenium Deployment Verification Testing of Docker\u2019s Example Voting App<\/title>\n<meta name=\"description\" content=\"In this blog post, I will be focusing on running Deployment Verification Tests against Docker&#039;s Example Voting App using Selenium.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Selenium Deployment Verification Testing of Docker\u2019s Example Voting App\" \/>\n<meta property=\"og:description\" content=\"In this blog post, I will be focusing on running Deployment Verification Tests against Docker&#039;s Example Voting App using Selenium.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2018-05-02T21:28:51+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2018-06-14T23:45:39+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/05\/simple-1.png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@codefresh\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Dustin Van Buskirk\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"9 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/05\/simple-1.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/05\/simple-1.png\",\"width\":441,\"height\":421},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/#webpage\",\"url\":\"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/\",\"name\":\"Selenium Deployment Verification Testing of Docker\u2019s Example Voting App\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/#primaryimage\"},\"datePublished\":\"2018-05-02T21:28:51+00:00\",\"dateModified\":\"2018-06-14T23:45:39+00:00\",\"description\":\"In this blog post, I will be focusing on running Deployment Verification Tests against Docker's Example Voting App using Selenium.\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Selenium Deployment Verification Testing of Docker\u2019s Example Voting App\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/486e48ad011e672d3be105c43179f662\"},\"headline\":\"Selenium Deployment Verification Testing of Docker\u2019s Example Voting App\",\"datePublished\":\"2018-05-02T21:28:51+00:00\",\"dateModified\":\"2018-06-14T23:45:39+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/#webpage\"},\"wordCount\":975,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/05\/simple-1.png\",\"keywords\":[\"Perfect Pipeline\",\"Selenium\",\"DVTs\",\"Example Voting App\"],\"articleSection\":[\"Deployment Verification Testing\",\"How Tos\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/486e48ad011e672d3be105c43179f662\",\"name\":\"Dustin Van Buskirk\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/99e2803d9a75d50d8de1a8b560a6534c?s=96&d=blank&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/99e2803d9a75d50d8de1a8b560a6534c?s=96&d=blank&r=g\",\"caption\":\"Dustin Van Buskirk\"},\"description\":\"A Senior Solution Architect at Codefresh\",\"sameAs\":[\"https:\/\/codefresh.io\/\"],\"url\":\"https:\/\/codefresh.io\/author\/dustinvbcodefresh-io\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Selenium Deployment Verification Testing of Docker\u2019s Example Voting App","description":"In this blog post, I will be focusing on running Deployment Verification Tests against Docker's Example Voting App using Selenium.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/","og_locale":"en_US","og_type":"article","og_title":"Selenium Deployment Verification Testing of Docker\u2019s Example Voting App","og_description":"In this blog post, I will be focusing on running Deployment Verification Tests against Docker's Example Voting App using Selenium.","og_url":"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2018-05-02T21:28:51+00:00","article_modified_time":"2018-06-14T23:45:39+00:00","og_image":[{"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/05\/simple-1.png"}],"twitter_card":"summary_large_image","twitter_creator":"@codefresh","twitter_site":"@codefresh","twitter_misc":{"Written by":"Dustin Van Buskirk","Est. reading time":"9 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/05\/simple-1.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/05\/simple-1.png","width":441,"height":421},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/#webpage","url":"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/","name":"Selenium Deployment Verification Testing of Docker\u2019s Example Voting App","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/#primaryimage"},"datePublished":"2018-05-02T21:28:51+00:00","dateModified":"2018-06-14T23:45:39+00:00","description":"In this blog post, I will be focusing on running Deployment Verification Tests against Docker's Example Voting App using Selenium.","breadcrumb":{"@id":"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Selenium Deployment Verification Testing of Docker\u2019s Example Voting App"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/486e48ad011e672d3be105c43179f662"},"headline":"Selenium Deployment Verification Testing of Docker\u2019s Example Voting App","datePublished":"2018-05-02T21:28:51+00:00","dateModified":"2018-06-14T23:45:39+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/#webpage"},"wordCount":975,"commentCount":0,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/05\/simple-1.png","keywords":["Perfect Pipeline","Selenium","DVTs","Example Voting App"],"articleSection":["Deployment Verification Testing","How Tos"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/howtos\/selenium-deployment-verification-testing-dockers-example-voting-app\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/486e48ad011e672d3be105c43179f662","name":"Dustin Van Buskirk","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/99e2803d9a75d50d8de1a8b560a6534c?s=96&d=blank&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/99e2803d9a75d50d8de1a8b560a6534c?s=96&d=blank&r=g","caption":"Dustin Van Buskirk"},"description":"A Senior Solution Architect at Codefresh","sameAs":["https:\/\/codefresh.io\/"],"url":"https:\/\/codefresh.io\/author\/dustinvbcodefresh-io\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/8406"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/57"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=8406"}],"version-history":[{"count":0,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/8406\/revisions"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=8406"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=8406"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=8406"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}