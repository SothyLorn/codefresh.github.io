{"id":9777,"date":"2018-07-19T06:00:04","date_gmt":"2018-07-19T06:00:04","guid":{"rendered":"http:\/\/codefresh.io\/?p=9777"},"modified":"2018-07-31T21:07:11","modified_gmt":"2018-07-31T21:07:11","slug":"deploying-to-azure-kubernetes-with-helm-draft-and-codefresh","status":"publish","type":"post","link":"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/","title":{"rendered":"Deploying to Azure Kubernetes from Github with Helm, Draft, and Codefresh"},"content":{"rendered":"<p>In this tutorial, we will use <a href=\"https:\/\/azure.microsoft.com\/en-us\/services\/kubernetes-service\/\">Azure Kubernetes Service<\/a> (AKS) to deploy an application in the form of a <a href=\"https:\/\/helm.sh\/\">Helm<\/a> package. We will use Codefresh for CI\/CD and also get a brief look at <a href=\"https:\/\/draft.sh\/\">Draft<\/a> for creating Helm charts.<\/p>\n<h2>What you will learn<\/h2>\n<ul>\n<li>How to create a Kubernetes cluster in Azure<\/li>\n<li>How to install Helm -the Kubernetes package manager &#8211; on the cluster<\/li>\n<li>How to add\/view\/edit the cluster in Codefresh<\/li>\n<li>How to use Draft to create a starting Helm chart for the application<\/li>\n<li>How to push Helm charts with Codefresh<\/li>\n<li>How to deploy Helm charts with Codefresh<\/li>\n<\/ul>\n<h2>Prerequisites<\/h2>\n<p>If you want to follow along as you read the tutorial, you will need:<\/p>\n<ul>\n<li>A free Codefresh Account<\/li>\n<li>An Azure subscription (trial should work fine)<\/li>\n<li>A Github repository with your application (Codefresh also supports Gitlab and Bitbucket)<\/li>\n<\/ul>\n<p>The programming language of your application does not really matter, as long as it comes with a Dockerfile. Even if you don\u2019t have a Dockerfile at hand we will see how you can create one easily with Draft.<\/p>\n<h2>Creating a Kubernetes cluster in Azure<\/h2>\n<p>The documentation for AKS explains how you can create a cluster using <a href=\"https:\/\/docs.microsoft.com\/en-us\/azure\/aks\/kubernetes-walkthrough\">the command line<\/a> or the <a href=\"https:\/\/docs.microsoft.com\/en-us\/azure\/aks\/kubernetes-walkthrough-portal\">GUI of Azure Portal<\/a>. Both ways are valid but since we are also going to use Helm from the command line, it makes sense to dive into the terminal right away. For the sake of convenience, however, we will use the terminal offered in the Azure portal (Azure cloud shell) which offers some nice features such as automatic authentication as well as preinstalled <code>kubectl<\/code> and <code>helm<\/code> executables.<\/p>\n<p>Login into Azure portal with your account and launch the cloud shell from the top right of the GUI.<\/p>\n<figure id=\"attachment_9779\" aria-describedby=\"caption-attachment-9779\" style=\"width: 1024px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/azure-shell.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/azure-shell-1024x550.png\" alt=\"Azure Cloud shell\" width=\"1024\" height=\"550\" class=\"size-large wp-image-9779\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/azure-shell-1024x550.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/azure-shell-300x161.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/azure-shell-768x412.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/azure-shell-611x328.png 611w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/azure-shell.png 1638w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/a><figcaption id=\"caption-attachment-9779\" class=\"wp-caption-text\">Azure Cloud shell<\/figcaption><\/figure>\n<p>After a few moments, you should have access to the command line right from your browser!<\/p>\n<p>Before you create your first Kubernetes cluster in Azure you need to understand the concept of <a href=\"https:\/\/docs.microsoft.com\/en-us\/azure\/architecture\/cloud-adoption-guide\/adoption-intro\/resource-group-explainer\">Resource Groups<\/a>. Everything in Azure is created under a Resource Group. If you don\u2019t have a Resource Group yet you need to create one first following <a href=\"https:\/\/docs.microsoft.com\/en-us\/azure\/azure-resource-manager\/resource-group-portal#manage-resource-groups\">the documentation<\/a>.<\/p>\n<p>A Resource Group was already available for the purposes of this tutorial and therefore creating an Azure cluster was a single line in the terminal:<\/p>\n<pre class=\"lang:default decode:true \"> \naz aks create --resource-group kostis-rg --name myDemoAKSCluster --node-count 1 --generate-ssh-keys\n<\/pre>\n<p>Adjust the node count according to your preference but be aware that this affects billing. In this tutorial we&#8217;ll use one, but adding more won&#8217;t change how you interact with Kubernetes.<\/p>\n<p>After a few minutes, the cluster will be created and you can even visit it from the GUI and see its details.<\/p>\n<figure id=\"attachment_9780\" aria-describedby=\"caption-attachment-9780\" style=\"width: 635px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/created.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/created.png\" alt=\"Azure Kubernetes cluster\" width=\"635\" height=\"407\" class=\"size-full wp-image-9780\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/created.png 635w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/created-300x192.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/created-512x328.png 512w\" sizes=\"(max-width: 635px) 100vw, 635px\" \/><\/a><figcaption id=\"caption-attachment-9780\" class=\"wp-caption-text\">Azure Kubernetes cluster<\/figcaption><\/figure>\n<p>The next step is to setup kubectl access to the cluster. Kubectl is already available in the command line but you still need to match its config with the cluster we just created. The command that does this uses the Azure CLI:<\/p>\n<pre class=\"lang:default decode:true \"> \naz aks get-credentials --resource-group kostis-rg --name myDemoAKSCluster\n<\/pre>\n<p>Once that is done, we have full access to the cluster with <code>kubectl<\/code>.  We can now enter any of the familiar commands and see the resources of the cluster (pods, deployments, services etc).<\/p>\n<h2>Connecting the Azure Kubernetes cluster to Codefresh<\/h2>\n<p>Codefresh has native support for Azure Kubernetes clusters which includes a nice dashboard that can be used both for viewing existing resources as well as modifying them and built-in deploy steps through pipelines.<\/p>\n<p>To connect the Azure Kubernetes cluster, log in to your Codefresh account and click <em>Kubernetes<\/em> on the left sidebar. Then click &#8220;Add Cluster&#8221;<\/p>\n<figure id=\"attachment_9781\" aria-describedby=\"caption-attachment-9781\" style=\"width: 1024px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/image6.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/image6-1024x391.png\" alt=\"Codefresh integrations\" width=\"1024\" height=\"391\" class=\"size-large wp-image-9781\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/image6-1024x391.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/image6-300x114.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/image6-768x293.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/image6-628x239.png 628w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/image6.png 1041w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/a><figcaption id=\"caption-attachment-9781\" class=\"wp-caption-text\">Codefresh integrations<\/figcaption><\/figure>\n<p>From the drop-down menu select <em>Microsoft Azure<\/em> and enter your cluster credentials (url, certificate, and token). To obtain these values, <a href=\"https:\/\/codefresh.io\/docs\/docs\/deploy-to-kubernetes\/adding-non-gke-kubernetes-cluster\/#get-cluster-configurations\">Codefresh documentation<\/a> explains the <code>kubectl<\/code> commands that you need to execute. You can execute them in the Azure cloud shell directly, as we have already seen in the previous section that <code>kubectl <\/code>is configured to point at the newly created cluster.<\/p>\n<p>Once all the details are filled in, test your settings and save the cluster configuration. If everything goes well, you will be able to click on Kubernetes on the left sidebar and view all the cluster details within Codefresh.<\/p>\n<figure id=\"attachment_9782\" aria-describedby=\"caption-attachment-9782\" style=\"width: 1024px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/k8s-dashboard.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/k8s-dashboard-1024x530.png\" alt=\"Kubernetes Dashboard\" width=\"1024\" height=\"530\" class=\"size-large wp-image-9782\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/k8s-dashboard-1024x530.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/k8s-dashboard-300x155.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/k8s-dashboard-768x397.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/k8s-dashboard-628x325.png 628w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/k8s-dashboard.png 1218w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/a><figcaption id=\"caption-attachment-9782\" class=\"wp-caption-text\">Kubernetes Dashboard<\/figcaption><\/figure>\n<p>The last step is to create a registry pull secret so that the cluster can pull Docker images from the Codefresh Registry. Each Codefresh account comes with a <a href=\"https:\/\/codefresh.io\/docs\/docs\/docker-registries\/codefresh-registry\/\">built-in free Docker registry<\/a> that can be used for image storage. Of course, you can also use your own external registry instead. (Azure offers a <a href=\"https:\/\/azure.microsoft.com\/en-us\/services\/container-registry\/\">Docker Registry<\/a> as well.)<br \/>\nFirst, you need to <a href=\"https:\/\/codefresh.io\/docs\/docs\/docker-registries\/codefresh-registry\/#generate-cfcr-login-token\">create a token<\/a> for the Codefresh registry, then execute the following <code>kubectl <\/code>command in the Azure cloud shell:<\/p>\n<pre class=\"lang:default decode:true \"> \nkubectl create secret docker-registry my-codefresh-registry --docker-server=r.cfcf.io --docker-username=<codefresh_username> --docker-password=<codefresh_token> --docker-email=<email>\n<\/pre>\n<p>Of course, you need to enter your own values here. Notice also that this secret is for the default namespace, so if you want to use another namespace add it as a parameter on the command above.<\/p>\n<p><strong>Tip<\/strong> &#8211; If you don&#8217;t want to run the command line to create the secret, you can goto the Kubernetes dashboard and click &#8220;Add Service&#8221; then click on &#8220;Image Pull Secret&#8221; to add a secret for any of your connected repositories.<\/p>\n<p>That\u2019s it! The Kubernetes cluster is now ready to deploy Docker applications. At this point, we could use plain Kubernetes manifests to deploy our application. In this tutorial, however, we will see how we can use Helm.<\/p>\n<h2>Installing Helm on the Azure Kubernetes cluster<\/h2>\n<p>Helm is a package manager for Kubernetes. It offers several extra features on top of vanilla Kubernetes deployments, some of which are:<\/p>\n<ul>\n<li>The ability to group multiple Kubernetes manifests together and treat them as a single entity (for deployments, rollbacks, and storage).<\/li>\n<li>Built-in templating for Kubernetes manifests, putting an end to custom template systems that you might use for replacing things such as the Docker tag inside a manifest.<\/li>\n<li>The ability to package the collection of manifests in Charts which contain the templates as well as default values.<\/li>\n<li>The ability to create catalogs of applications (Helm repositories) that function similar to traditional package repositories (think deb, rpm, nuget,brew, npm etc).<\/li>\n<\/ul>\n<p>Helm comes in two parts, the client (Helm) and the server component called Tiller. The Azure cloud shell comes with the client already preinstalled. The client can be used to install the server part as well. Therefore, just execute in the Azure cloud shell the following:<\/p>\n<pre class=\"lang:default decode:true \"> \nhelm init\n<\/pre>\n<p>The <code>helm<\/code> executable uses the same configuration as <code>kubectl<\/code>. Because <code>kubectl<\/code> was already configured to point to our Kubernetes cluster in the beginning of this tutorial, the <code>helm init<\/code> command works out of the box without any extra configuration.<\/p>\n<p>Codefresh also comes with a Helm dashboard that you can now visit. It should be empty because we haven\u2019t deployed anything yet.<\/p>\n<figure id=\"attachment_9783\" aria-describedby=\"caption-attachment-9783\" style=\"width: 1024px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/helm-dashboard.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/helm-dashboard-1024x413.png\" alt=\"Empty Helm Dashboard\" width=\"1024\" height=\"413\" class=\"size-large wp-image-9783\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/helm-dashboard-1024x413.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/helm-dashboard-300x121.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/helm-dashboard-768x310.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/helm-dashboard-628x253.png 628w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/helm-dashboard.png 1148w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/a><figcaption id=\"caption-attachment-9783\" class=\"wp-caption-text\">Empty Helm Dashboard<\/figcaption><\/figure>\n<h2>Creating a starter Helm chart using Draft<\/h2>\n<p>Creating a Helm template and associated default values is <a href=\"https:\/\/docs.helm.sh\/developing_charts\/\">a well-documented process<\/a>. Maybe you are already familiar with Helm templates and your application already has its own chart. In that case, skip this section.<\/p>\n<p>In this tutorial, however, we will select the easy way out and auto-generate a chart that will serve as a starting point for the Helm package. We will use Draft for this purpose.<\/p>\n<p><a href=\"https:\/\/draft.sh\/\">Draft <\/a>is a tool geared towards local Kubernetes deployments (i.e. before you actually commit your code) such as Minikube. It is developed by the same team that develops Helm so obviously, they play along very well together.<\/p>\n<p>We will explore the deployment capabilities of Draft in a future article. For the present situation, we will exploit its capability to create a Helm chart for any of <a href=\"https:\/\/github.com\/Azure\/draft\/tree\/master\/packs\">the supported languages<\/a>.<\/p>\n<p><a href=\"https:\/\/github.com\/Azure\/draft\/releases\">Download Draft<\/a> for your OS and then execute it at the root directory of your project.<\/p>\n<pre class=\"lang:default decode:true \"> \ndraft create\n<\/pre>\n<p>This will create a default Helm chart under the charts folder. Notice that Draft will even create a Dockerfile for your application if it doesn\u2019t contain one already.<\/p>\n<p>Edit the <code>values.yaml<\/code> file to your preference. At the very least you should change:<\/p>\n<ul>\n<li>The ports for the Kubernetes service<\/li>\n<li>The type of Service from ClusterIP to LoadBalancer<\/li>\n<\/ul>\n<p>You can also add the Docker repository\/tag values, although this is not strictly necessary as Codefresh will do this for us during the actual deployment.<\/p>\n<p>Once you are finished, commit the chart folder to your Git repository.<\/p>\n<h2>Preparing a Helm Chart with Codefresh<\/h2>\n<p>Apart from a built-in Docker registry, all Codefresh accounts also include <a href=\"https:\/\/codefresh.io\/docs\/docs\/new-helm\/managed-helm-repository\/\">an integrated Helm Repository<\/a>. A Helm Repository can be used to catalog your own Helm Charts in addition to the public charts already included with Codefresh from <a href=\"https:\/\/kubeapps.com\/\">KubeApps<\/a>.<\/p>\n<p>To push the Helm Chart, create a new Codefresh Pipeline with the <a href=\"https:\/\/codefresh.io\/docs\/docs\/codefresh-yaml\/what-is-the-codefresh-yaml\/\">following yml build file<\/a>:<\/p>\n<pre class=\"lang:default decode:true \"> \nversion: '1.0'\nsteps:\n BuildingDockerImage:\n    title: Building Docker Image\n    type: build\n    image_name: kostis-codefresh\/python-flask-sampleapp\n    working_directory: .\/\n    tag: ${{CF_BRANCH_TAG_NORMALIZED}}\n    dockerfile: Dockerfile\n StoreChart:\n    title: Storing Helm Chart\n    image: 'codefresh\/cfstep-helm:2.9.1'\n    environment:\n     - ACTION=push\n     - CHART_REF=charts\/python\n<\/pre>\n<p>This yml file contains two steps. The first step, <code>BuildingDockerImage <\/code>creates a Docker image from a Dockerfile that exists at the root of the project.<\/p>\n<p>The second step uses the premade Codefresh Helm Docker image and pushes the Helm chart located at charts\/python in the root folder. The names of steps are arbitrary.<\/p>\n<p>In order to make this pipeline have access to the internal Helm Repository you also need to import its configuration. Select \u201cimport from shared configuration\u201d in your Codefresh pipeline and choose the <code>CF_HELM_DEFAULT <\/code>config.<\/p>\n<figure id=\"attachment_9784\" aria-describedby=\"caption-attachment-9784\" style=\"width: 989px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/import.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/import.png\" alt=\"Codefresh Helm configuration\" width=\"989\" height=\"700\" class=\"size-full wp-image-9784\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/import.png 989w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/import-300x212.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/import-768x544.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/import-463x328.png 463w\" sizes=\"(max-width: 989px) 100vw, 989px\" \/><\/a><figcaption id=\"caption-attachment-9784\" class=\"wp-caption-text\">Codefresh Helm configuration<\/figcaption><\/figure>\n<p>After you execute the pipeline you will see the chart getting pushed in the Codefresh Helm Repository. To browse this repository select <em>Kubernetes->Helm Releases<\/em> from the left sidebar and expand the <code>CF_HELM_DEFAULT <\/code>Repo.<\/p>\n<figure id=\"attachment_9786\" aria-describedby=\"caption-attachment-9786\" style=\"width: 939px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/helm-repo.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/helm-repo.png\" alt=\"Codefresh Helm repository\" width=\"939\" height=\"387\" class=\"size-full wp-image-9786\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/helm-repo.png 939w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/helm-repo-300x124.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/helm-repo-768x317.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/helm-repo-628x259.png 628w\" sizes=\"(max-width: 939px) 100vw, 939px\" \/><\/a><figcaption id=\"caption-attachment-9786\" class=\"wp-caption-text\">Codefresh Helm repository<\/figcaption><\/figure>\n<p>You can also manually deploy this chart to your Azure cluster by clicking the <em>Install<\/em> icon as shown on the right-hand side. Even though this is a convenient way to deploy applications via the Codefresh GUI, it is best if we fully automate this process as you will see in the next section.<\/p>\n<h2>Automatically deploying a Helm Chart with Codefresh<\/h2>\n<p>In the previous section, we saw how you can store the Helm chart in the integrated Codefresh Helm repository. The final step is to actually deploy the application and get a full CI\/CD pipeline. Here are the respective pipeline steps:<\/p>\n<pre class=\"lang:default decode:true \"> \nDeployChart:\n    image: 'codefresh\/cfstep-helm:2.9.1'\n    environment:\n     - CHART_REF=charts\/python\n     - RELEASE_NAME=mypython-chart-prod\n     - KUBE_CONTEXT=myDemoAKSCluster\n     - VALUE_image_pullPolicy=Always\n     - VALUE_image_tag=${{CF_BRANCH_TAG_NORMALIZED}}\n<\/pre>\n<p>This is a Helm step as before, but with the following parameters:<\/p>\n<ul>\n<li>We define again which chart we will deploy<\/li>\n<li>We select a release name. (This is optional and if not provided, Helm with autogenerate one for us using a funky naming pattern.)<\/li>\n<li>The Kube context selects the Azure Cluster as the target of the deployment (Codefresh supports linking multiple Kubernetes clusters from multiple cloud providers).<\/li>\n<\/ul>\n<p>The last two lines show the power of Helm. Instead of having to use custom replacement scripts or external templating system that are needed for plain Kubernetes manifests, Helm has <a href=\"https:\/\/docs.helm.sh\/chart_template_guide\/\">built-in templating<\/a>. The two lines override the default values for the chart.<\/p>\n<p>We change the pull policy to &#8220;always&#8221; (by default it was <code>IfNotPresent<\/code>) and also we make sure that we use the Docker image from the branch that we are building from. This is just a suggestion and you can use any other combination of tags on your Docker images. You can find all built-in Codefresh variables <a href=\"https:\/\/codefresh.io\/docs\/docs\/codefresh-yaml\/variables\/\">in the documentation<\/a>.<\/p>\n<p>Once the application is deployed you should be able to access it from its external endpoint. If you visit again the Codefresh Helm dashboard you should now see the release along with its templates and values.<\/p>\n<figure id=\"attachment_9787\" aria-describedby=\"caption-attachment-9787\" style=\"width: 1024px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/first-helm-release.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/first-helm-release-1024x391.png\" alt=\"Codefresh Helm release\" width=\"1024\" height=\"391\" class=\"size-large wp-image-9787\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/first-helm-release-1024x391.png 1024w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/first-helm-release-300x114.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/first-helm-release-768x293.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/first-helm-release-628x239.png 628w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/first-helm-release.png 1041w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/a><figcaption id=\"caption-attachment-9787\" class=\"wp-caption-text\">Helm Release<\/figcaption><\/figure>\n<p>Congratulations! You have now deployed a Helm chart in the Azure Kubernetes cluster and the application is ready to be used.<\/p>\n<p>You can also see the release from the Azure Cloud shell if you execute<\/p>\n<pre class=\"lang:default decode:true \"> \nhelm list\n<\/pre>\n<p>This will print out the release details in the terminal.<\/p>\n<h2>Rolling back deployments without re-running the pipelines<\/h2>\n<p>Another big advantage of Helm is the way it gives you easy rollbacks for free. If you make some commits in your project, Helm will keep the same deployment and add new revisions on it.<\/p>\n<p>You can easily rollback to any previous version <strong>without <\/strong> actually re-running the pipeline.<\/p>\n<figure id=\"attachment_9788\" aria-describedby=\"caption-attachment-9788\" style=\"width: 993px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/helm-rollback.png\"><img src=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/helm-rollback.png\" alt=\"Helm Rollback\" width=\"993\" height=\"409\" class=\"size-full wp-image-9788\" srcset=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/helm-rollback.png 993w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/helm-rollback-300x124.png 300w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/helm-rollback-768x316.png 768w, https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/helm-rollback-628x259.png 628w\" sizes=\"(max-width: 993px) 100vw, 993px\" \/><\/a><figcaption id=\"caption-attachment-9788\" class=\"wp-caption-text\">Helm Rollback<\/figcaption><\/figure>\n<p>The server part of Helm keeps a history of all releases and knows the exact contents of each respective Helm package.<\/p>\n<p>Codefresh allows you to do this right from the GUI. Select the History tab in the Helm release and from the list of revisions you can select any of them as the rollback target. Notice that rolling back will actually create a new revision. So you can go backward and forward in time to any revision possible.<\/p>\n<h2>Conclusion<\/h2>\n<p>We have reached the end of this tutorial. You have now seen:<\/p>\n<ul>\n<li>How to create an Azure Kubernetes cluster<\/li>\n<li>How to install Helm<\/li>\n<li>How to give access of the Codefresh Registry to the Azure cluster<\/li>\n<li>How to connect the Azure cluster in Codefresh<\/li>\n<li>How to inspect Kubernetes resources and Helm chart\/releases from the Codefresh GUI<\/li>\n<li>How to create a Helm chart using Draft and how to edit default values<\/li>\n<li>How to use Codefresh to store the chart in the integrated Helm repository<\/li>\n<li>How to use Codefresh to deploy applications to the Azure cluster from a Helm chart<\/li>\n<li>How to easily rollback Helm releases<\/li>\n<\/ul>\n<p>Now you know how to create a complete CI\/CD pipeline that deploys applications to Kubernetes using Helm packaging.<\/p>\n<p>New to Codefresh? <a href=\"https:\/\/codefresh.io\/codefresh-signup\/?utm_source=Blog&amp;utm_medium=Post&amp;utm_campaign=AKSHelm\">Create Your Free Account Today! <\/a><\/p>\n<input class=\"fooboxshare_post_id\" type=\"hidden\" value=\"9777\"\/>","protected":false},"excerpt":{"rendered":"<p>In this tutorial, we will use Azure Kubernetes Service (AKS) to deploy an application in the form of a Helm package. We will use Codefresh for CI\/CD and also get a brief look at Draft for creating Helm charts. What you will learn How to create a Kubernetes cluster in Azure How to install Helm &hellip; <a href=\"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/\">Read more<\/a><\/p>\n","protected":false},"author":62,"featured_media":9775,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[2367,3120,1657,1538],"tags":[44,53,59,411,994,3067],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.9 (Yoast SEO v18.4.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Deploying to Azure Kubernetes with Helm, Draft, and Codefresh<\/title>\n<meta name=\"description\" content=\"In this tutorial, we use the Azure Kubernetes Service (AKS) to deploy an application in the form of a Helm package. We will use Codefresh for CI\/CD and...\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Deploying to Azure Kubernetes from Github with Helm, Draft, and Codefresh\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, we use the Azure Kubernetes Service (AKS) to deploy an application in the form of a Helm package. We will use Codefresh for CI\/CD and...\" \/>\n<meta property=\"og:url\" content=\"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/\" \/>\n<meta property=\"og:site_name\" content=\"Codefresh\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/codefresh.io\" \/>\n<meta property=\"article:published_time\" content=\"2018-07-19T06:00:04+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2018-07-31T21:07:11+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/blog.png\" \/>\n\t<meta property=\"og:image:width\" content=\"792\" \/>\n\t<meta property=\"og:image:height\" content=\"302\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@codefresh\" \/>\n<meta name=\"twitter:site\" content=\"@codefresh\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Kostis Kapelonis\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"12 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/codefresh.io\/#organization\",\"name\":\"Codefresh\",\"url\":\"https:\/\/codefresh.io\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/codefresh.io\",\"https:\/\/www.linkedin.com\/company\/codefresh\",\"https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg\",\"https:\/\/twitter.com\/codefresh\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png\",\"width\":800,\"height\":800,\"caption\":\"Codefresh\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/codefresh.io\/#website\",\"url\":\"https:\/\/codefresh.io\/\",\"name\":\"Codefresh\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/codefresh.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/blog.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/blog.png\",\"width\":792,\"height\":302,\"caption\":\"Azure Helm Codefresh\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/#webpage\",\"url\":\"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/\",\"name\":\"Deploying to Azure Kubernetes with Helm, Draft, and Codefresh\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/#primaryimage\"},\"datePublished\":\"2018-07-19T06:00:04+00:00\",\"dateModified\":\"2018-07-31T21:07:11+00:00\",\"description\":\"In this tutorial, we use the Azure Kubernetes Service (AKS) to deploy an application in the form of a Helm package. We will use Codefresh for CI\/CD and...\",\"breadcrumb\":{\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/codefresh.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Deploying to Azure Kubernetes from Github with Helm, Draft, and Codefresh\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/#webpage\"},\"author\":{\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87\"},\"headline\":\"Deploying to Azure Kubernetes from Github with Helm, Draft, and Codefresh\",\"datePublished\":\"2018-07-19T06:00:04+00:00\",\"dateModified\":\"2018-07-31T21:07:11+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/#webpage\"},\"wordCount\":2217,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/codefresh.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/blog.png\",\"keywords\":[\"Kubernetes\",\"CI\/CD\",\"codefresh\",\"azure\",\"helm\",\"draft\"],\"articleSection\":[\"Helm Tutorials\",\"Continuous Deployment\/Delivery\",\"Kubernetes Tutorials\",\"DevOps Tutorials\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87\",\"name\":\"Kostis Kapelonis\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/codefresh.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png\",\"contentUrl\":\"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png\",\"caption\":\"Kostis Kapelonis\"},\"description\":\"Kostis is a software engineer\/technical-writer dual class character. He lives and breathes automation, good testing practices and stress-free deployments with GitOps.\",\"url\":\"https:\/\/codefresh.io\/author\/kostiscodefresh-io\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Deploying to Azure Kubernetes with Helm, Draft, and Codefresh","description":"In this tutorial, we use the Azure Kubernetes Service (AKS) to deploy an application in the form of a Helm package. We will use Codefresh for CI\/CD and...","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/","og_locale":"en_US","og_type":"article","og_title":"Deploying to Azure Kubernetes from Github with Helm, Draft, and Codefresh","og_description":"In this tutorial, we use the Azure Kubernetes Service (AKS) to deploy an application in the form of a Helm package. We will use Codefresh for CI\/CD and...","og_url":"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/","og_site_name":"Codefresh","article_publisher":"https:\/\/www.facebook.com\/codefresh.io","article_published_time":"2018-07-19T06:00:04+00:00","article_modified_time":"2018-07-31T21:07:11+00:00","og_image":[{"width":792,"height":302,"url":"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/blog.png","type":"image\/png"}],"twitter_card":"summary_large_image","twitter_creator":"@codefresh","twitter_site":"@codefresh","twitter_misc":{"Written by":"Kostis Kapelonis","Est. reading time":"12 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/codefresh.io\/#organization","name":"Codefresh","url":"https:\/\/codefresh.io\/","sameAs":["https:\/\/www.facebook.com\/codefresh.io","https:\/\/www.linkedin.com\/company\/codefresh","https:\/\/www.youtube.com\/channel\/UC9r94SY6BqN05kXPIHsDXPg","https:\/\/twitter.com\/codefresh"],"logo":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#logo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/02\/Codefresh_Logo_Vertical_LightBkgd.png","width":800,"height":800,"caption":"Codefresh"},"image":{"@id":"https:\/\/codefresh.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/codefresh.io\/#website","url":"https:\/\/codefresh.io\/","name":"Codefresh","description":"","publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/codefresh.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/#primaryimage","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/blog.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/blog.png","width":792,"height":302,"caption":"Azure Helm Codefresh"},{"@type":"WebPage","@id":"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/#webpage","url":"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/","name":"Deploying to Azure Kubernetes with Helm, Draft, and Codefresh","isPartOf":{"@id":"https:\/\/codefresh.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/#primaryimage"},"datePublished":"2018-07-19T06:00:04+00:00","dateModified":"2018-07-31T21:07:11+00:00","description":"In this tutorial, we use the Azure Kubernetes Service (AKS) to deploy an application in the form of a Helm package. We will use Codefresh for CI\/CD and...","breadcrumb":{"@id":"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/codefresh.io\/"},{"@type":"ListItem","position":2,"name":"Deploying to Azure Kubernetes from Github with Helm, Draft, and Codefresh"}]},{"@type":"Article","@id":"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/#article","isPartOf":{"@id":"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/#webpage"},"author":{"@id":"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87"},"headline":"Deploying to Azure Kubernetes from Github with Helm, Draft, and Codefresh","datePublished":"2018-07-19T06:00:04+00:00","dateModified":"2018-07-31T21:07:11+00:00","mainEntityOfPage":{"@id":"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/#webpage"},"wordCount":2217,"commentCount":0,"publisher":{"@id":"https:\/\/codefresh.io\/#organization"},"image":{"@id":"https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/#primaryimage"},"thumbnailUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2018\/07\/blog.png","keywords":["Kubernetes","CI\/CD","codefresh","azure","helm","draft"],"articleSection":["Helm Tutorials","Continuous Deployment\/Delivery","Kubernetes Tutorials","DevOps Tutorials"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/codefresh.io\/helm-tutorial\/deploying-to-azure-kubernetes-with-helm-draft-and-codefresh\/#respond"]}]},{"@type":"Person","@id":"https:\/\/codefresh.io\/#\/schema\/person\/b2f763eca5adecaee359ad3170055d87","name":"Kostis Kapelonis","image":{"@type":"ImageObject","@id":"https:\/\/codefresh.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png","contentUrl":"https:\/\/codefresh.io\/wp-content\/uploads\/2022\/03\/branded-96x96.png","caption":"Kostis Kapelonis"},"description":"Kostis is a software engineer\/technical-writer dual class character. He lives and breathes automation, good testing practices and stress-free deployments with GitOps.","url":"https:\/\/codefresh.io\/author\/kostiscodefresh-io\/"}]}},"acf":[],"_links":{"self":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/9777"}],"collection":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/users\/62"}],"replies":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/comments?post=9777"}],"version-history":[{"count":0,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/posts\/9777\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media\/9775"}],"wp:attachment":[{"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/media?parent=9777"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/categories?post=9777"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/codefresh.io\/wp-json\/wp\/v2\/tags?post=9777"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}